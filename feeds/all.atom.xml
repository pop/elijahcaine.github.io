<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>elijahcaine.me</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2017-12-12T00:00:00-08:00</updated><entry><title>I. Fucking. Graduated.</title><link href="/personal/i-fucking-graduated" rel="alternate"></link><published>2017-12-12T00:00:00-08:00</published><updated>2017-12-12T00:00:00-08:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2017-12-12:/personal/i-fucking-graduated</id><summary type="html">&lt;p class="first last"&gt;I fucking graduated. Fuck yes.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Today I checked my grades for the last time.
I can safely say that I have &lt;strong&gt;finally&lt;/strong&gt; gotten a gorramn undergraduate degree in Computer Science, with a minor in Mathematics, from Oregon State University. &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt; &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hear that this happens on the reg &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[2]&lt;/a&gt; but I'm sure that every single person who &lt;em&gt;actually graduates&lt;/em&gt; feels amazing when they do.&lt;/p&gt;
&lt;p&gt;It's not amazing because graduation is a Herculean feat.
I know I'm not a 60 year old grandmother who dreamt of getting a college degree for 45 years and finally scraped together the cash and time in retirement.
I'm also not a refugee that escaped a war-torn country for an education and a better life.
I'm just another white dude that checked all the boxes.&lt;/p&gt;
&lt;p&gt;It wasn't hard for me.
I just had to put my head down and do the work.
But it did take a long ass time.&lt;/p&gt;
&lt;p&gt;Honestly my story is exactly like &lt;em&gt;most&lt;/em&gt; college graduation stories.
I went to kindergarten, then elementary school, then middle school, then high school, then college, and now life.
I plugged away at school, did what I needed to pass my classes, stressed and lamented, studied hard and eventually the system said &amp;quot;Cool. You're done.&amp;quot;
Along the way I learned how to &amp;quot;play the game&amp;quot; &lt;a class="footnote-reference" href="#id8" id="id4"&gt;[4]&lt;/a&gt;, albeit a bit late compared to a lot of my peers.&lt;/p&gt;
&lt;p&gt;I'm thankful to be in a field which doesn't require a masters or PHD to get a jorb.
Heck my field doesn't really require the degree I got; a surprising number of my friends got well paying jobs sans-degree.&lt;/p&gt;
&lt;p&gt;I'm also thankful to graduate without debt.
This came from some kickass parents + grandparents, some work during school, and some bad stuff that happened which ended up paying for abou half of my tuition.&lt;/p&gt;
&lt;p&gt;I'm thankful to graduate with wonderful friends, a job, and some passions which make my work-related decisions simple and profitable.&lt;/p&gt;
&lt;p&gt;Last, I'm thankful to be &lt;em&gt;done&lt;/em&gt;.
Now I can finally focus on &lt;em&gt;learning&lt;/em&gt;, my real passion.&lt;/p&gt;
&lt;p&gt;I'm gonna have a &lt;a class="reference external" href="https://10barrel.com/beer/crush-cucumber-sour/"&gt;Cucumber Sour&lt;/a&gt; and celebrate.
Thanks for reading.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I don't claim to have the best sources, but at least it's not Yahoo Answers:
&lt;a class="reference external" href="https://www.reference.com/education/many-people-graduate-college-year-8b0ccf821050d39e"&gt;https://www.reference.com/education/many-people-graduate-college-year-8b0ccf821050d39e&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I'm 99% sure I graduated. Something horribly kafkaesque might still happen, but fuckit.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Go beavs.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class="first"&gt;This is shorthand for tips and tricks to get through school.&lt;/p&gt;
&lt;p&gt;School isn't really focused on making sure you &lt;em&gt;learned&lt;/em&gt;, it's mostly designed to make sure you can pass tests.
Once you figure this out you can focus on learning for the test instead of trying to grok the material.
I believe the kids call it a &amp;quot;life hack&amp;quot;.&lt;/p&gt;
&lt;p&gt;Not that you shouldn't try to grok the material, that just happens to take &lt;em&gt;way&lt;/em&gt; longer than test-based learning.
So if you want a personal life, learn for the test; if you want a PHD, learn for the material.&lt;/p&gt;
&lt;p class="last"&gt;I didn't figure this system out until about Junior year of High School, too late to apply this zen skill to the ACT and SAT, but it was useful in college.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Persona"></category><category term="Graduation"></category></entry><entry><title>Independent Crypto Conclusion</title><link href="/crypto/independent-crypto-conclusion" rel="alternate"></link><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2017-11-27:/crypto/independent-crypto-conclusion</id><summary type="html">&lt;p class="first last"&gt;Sit back and ponder how much we've learned these past few weeks.&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is a part of a series of blog posts I wrote for an Independent Study on cryptography at Oregon State University.
To read all of the posts, check out the 'Independent Crypto' tag.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Wait, is it over already?
It feels like we just started!
Those 10 weeks always fly by, and this term was no exception.&lt;/p&gt;
&lt;p&gt;Independent Crypto has been a thrill, an honor, and of course immensely educational.
It's been a blast to say the least.
The weekly check-ins with my mentor &lt;a class="reference external" href="http://web.engr.oregonstate.edu/~rosulekm/"&gt;Mike Rosulek&lt;/a&gt;, forcing myself to engage with academic papers and online lectures, and finally having complex topics like Garbled Circuits and Elliptic Curves &amp;quot;make sense&amp;quot;, it was all very enjoyable.
I am very fortunate to have been given the opportunity to both create this course and take it.
Excited as I was before it began, it turned out even better than I could have hoped.&lt;/p&gt;
&lt;p&gt;Let's reflect on the some of the things we learned...&lt;/p&gt;
&lt;div class="section" id="elliptic-curve-cryptography"&gt;
&lt;h2&gt;Elliptic Curve Cryptography&lt;/h2&gt;
&lt;p&gt;We learned that Elliptic Curves look like this:&lt;/p&gt;
&lt;img alt="A straight forward ECC." class="align-center" src="/assets/images/independent-crypto/ecc-1.png" style="width: 100%;" /&gt;
&lt;p&gt;and this:&lt;/p&gt;
&lt;img alt="ECC with the line L illustrated." class="align-center" src="/assets/images/independent-crypto/ecc-3.png" style="width: 100%;" /&gt;
&lt;p&gt;We also learned that you can implement a version of the Diffie-hellman key exchange protocol by &amp;quot;adding&amp;quot; points on an Elliptic Curve over a finite field.&lt;/p&gt;
&lt;p&gt;We also learned that despite how weird Elliptic Curve Cryptography sounds when you describe it, it can be used in very secure and efficient crypto.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="memory-hard-functions"&gt;
&lt;h2&gt;Memory Hard Functions&lt;/h2&gt;
&lt;p&gt;We learned that Memory Hard Functions (MHFs) are a solution to the arms race that is hash-cracking hardware.
Importantly, it relies on the fact that while there are specialized hashing processors, there is no specialized RAM for the same task (or any task really).&lt;/p&gt;
&lt;p&gt;The goal of an MHF is to make it as hard (or harder) for an adversary to compute a given hash as it was for you, assuming you're running on non-specialized hardware and they have specialized hash-cracking hardware.&lt;/p&gt;
&lt;p&gt;We learned that there are two types of MHF's: data-dependent and data-independent.
Data-dependent MFHs (dMHFs) have predictable memory usage patterns so they may be susceptible to cache-timing attacks.
Data-independent MHFs (iMHFs) are not susceptible to this attack as their memory patterns are not predictable.
While there are dMHFs in the wild, like scrypt which performs exceptionally well, there are not any any proven iMHFs in use.&lt;/p&gt;
&lt;p&gt;We also learned that this is what it looks like to &amp;quot;Pebble an iMHF Directed Acyclic Graph&amp;quot;:&lt;/p&gt;
&lt;img alt="Animated DAG traversal." class="align-center" src="/assets/images/independent-crypto/dag-animated.gif" style="width: 100%;" /&gt;
&lt;p&gt;We also learned that the way to attack an iMHF is by performing a breadth-first search on the graph, then once you hit a wall, fill in the necessary nodes (pebbles) until you can compute the next node.
Much of the active research into iMHFs is in figuring out the best graphs, or types of graphs, to combat these kinds of feather/balloon attacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="garbled-circuits"&gt;
&lt;h2&gt;Garbled Circuits&lt;/h2&gt;
&lt;p&gt;We learned that Garbled Circuits are a way of achieved two-party secure function evaluation.&lt;/p&gt;
&lt;p&gt;Alice and Bob agree on a circuit (program) to garble.
One party encrypts the circuit by encrypting each logic-gate.
Both parties obfuscate their inputs and evaluate the garbled circuit.
This gives both parties the result of the original program without either party knowing the exact inputs.&lt;/p&gt;
&lt;p&gt;This isn't a fool-proof security measure.
Sometimes it is good to ask the party garbling said circuits to create a few extras.
The evaluating party opens some of them to make sure they're on the up-and-up.
The other party evaluates the remaining circuits and verifies that the outputs are consistent.&lt;/p&gt;
&lt;p&gt;We also learned that this game is surprisingly fun for only having &lt;strong&gt;four levels&lt;/strong&gt;.&lt;/p&gt;
&lt;iframe src="garbled-circuits-game.html" height="400px" width="100%"&gt;&lt;/iframe&gt;&lt;p&gt;Permalink: &lt;a class="reference external" href="http://elijahcaine.me/garbled-circuits-game.html"&gt;http://elijahcaine.me/garbled-circuits-game.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="remote-timing-attacks"&gt;
&lt;h2&gt;Remote Timing Attacks&lt;/h2&gt;
&lt;p&gt;And now for something completely different!
We broke from the math and theory to focus on a problem involving real tangible bits!&lt;/p&gt;
&lt;p&gt;Based on response timing differences an adversary can sometimes determine private information &lt;strong&gt;like your OpenSSL Private Keys&lt;/strong&gt;.
This is scary, but the problem has mostly been fixed and now there are standards the crypto community follows to write code which is secure against these attacks.&lt;/p&gt;
&lt;p&gt;If you're writing crypto and you know what you're doing, make sure you're using the defacto constant-time libraries for bit-wise comparisons, mathematical operations, and pretty much anything involving secrets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="miscellaneous"&gt;
&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;p&gt;I personally gained a lot from this course.
I wrote annotated bibliographies, read academic papers, implemented a remote timing attack, and made a fun little game which was totally relevant and 100% not just an excuse to play around making games.&lt;/p&gt;
&lt;p&gt;Despite sinking hours into this course I barely scratched the surface of every topic.
I've got &lt;em&gt;loads&lt;/em&gt; more I could cover if I was inclined to do so.
I'm not saying I'm &lt;em&gt;going&lt;/em&gt; to get a graduate degree, but if it's anything like this I'd be up for it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Crytpo"></category><category term="Independent Crypto"></category></entry><entry><title>Remote Timing Attacks</title><link href="/crypto/remote-timing-attacks" rel="alternate"></link><published>2017-11-20T00:00:00-08:00</published><updated>2017-11-20T00:00:00-08:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2017-11-20:/crypto/remote-timing-attacks</id><summary type="html">&lt;p class="first last"&gt;Or yet another reason you should never roll your own crypto.&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is a part of a series of blog posts I wrote for an Independent Study on cryptography at Oregon State University.
To read all of the posts, check out the 'Independent Crypto' tag.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Fade in.&lt;/p&gt;
&lt;p&gt;It is 2002.&lt;/p&gt;
&lt;p&gt;You are a Linux system administrator.
You and thousands of other admins are running OpenSSL on you battle tested Linux servers.
You trust that your data is transfered securely from host to host because... why wouldn't it be?!
OpenSSL makes things secure.
Duh.&lt;/p&gt;
&lt;p&gt;A few months into running that server you figure out that your private keys have been compromised!
They were stolen somehow but you can't figure out what happened.
You check the logs to see if somebody hacked into your system, but nothing obvious catches your eye.&lt;/p&gt;
&lt;p&gt;Combing through the logs you do see an IP address that tried (and failed) hundreds of thousands of times to authenticate with your OpenSSL server.
It attempted authentication over and over and failed relentlessly until suddenly, after about two days, it stopped.
Weird.&lt;/p&gt;
&lt;p&gt;A year later you read an academic paper from Stanford. &lt;a class="footnote-reference" href="#id24" id="id1"&gt;[3]&lt;/a&gt;
It clicks.
You've you've been Remote Timing Attacked!&lt;/p&gt;
&lt;div class="section" id="definition"&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;Remote Timing Attacks are a special brand of Side Channel Attack where adversaries use differences in response times to determine private information.
Creepy I know.&lt;/p&gt;
&lt;p&gt;A lot of code and Statistics&lt;sup&gt;TM&lt;/sup&gt; goes into figuring out secret information based on this, but let's start small.
Take the following comparison which lives in a hypothetical SSL library:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recieved_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;PRIVATE_KEY_LENGTH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;KeyLengthError&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;recieved_key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Thing&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;UnknownKeyError&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This might seem innocent enough but as it turns out this leaks information!
The &lt;tt class="docutils literal"&gt;==&lt;/tt&gt; operator does not &lt;em&gt;always&lt;/em&gt; take the same amount of time to return a response.
In fact, this operator tends to compare two inputs bit-by-bit.
When it finds a difference it short-circuits and returns True or False.
If &lt;tt class="docutils literal"&gt;recieved_key&lt;/tt&gt; shares the first N bits with &lt;tt class="docutils literal"&gt;expected_key&lt;/tt&gt;, the program will return slightly sooner than if they only shared the first N-1 bits.&lt;/p&gt;
&lt;p&gt;What's the timing difference if it's just returning one or two cycles earlier; does it really matter?
As it turns out, there is &lt;em&gt;enough&lt;/em&gt; of a difference to break security and enable an adversary to decrypt entire private keys! &lt;a class="footnote-reference" href="#id24" id="id2"&gt;[3]&lt;/a&gt;
This is put well by an article on chosenplaintext.ca: &lt;a class="footnote-reference" href="#id25" id="id3"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
Now, it may not seem significant that an attacker can see how many bytes of their key were a match, but it can actually be &lt;strong&gt;fatal&lt;/strong&gt; to security.
The attacker can crack the first byte of the key by trying all 256 possibilities, and observing which one caused the comparison to take longer.
Now, armed with the first byte, they can do the same with the second byte, and the third, and so on, until they have recovered the entire key.&lt;/blockquote&gt;
&lt;p&gt;With a lot of patience an adversary can recover secret information from an OpenSSL processes on the same host OS, an OpenSSL processes on a Virtual Machine on the same host OS, and even an OpenSSL on a separate host processes across a network.
It gets harder (read: more time consuming) to hack the farther away adversary, but they're all possible with sufficient patience, compute power, and Statistics&lt;sup&gt;TM&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="oh-god-fix-it-please"&gt;
&lt;h2&gt;Oh god fix it please&lt;/h2&gt;
&lt;p&gt;Clam down!
We've come a long way since 2003 when this was proven to be a viable attack.
Most SSL libraries have fixed this vulnerability so you're fine as long as you updated in the past decade.&lt;/p&gt;
&lt;p&gt;If you &lt;em&gt;haven't&lt;/em&gt; updated in the past decade... burn that server.
Even the silicon atoms are compromised.
It's not even worth trying a fresh install.
The thing is just too far gone, start fresh.
Goodnight, sweet prince.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="constant-time-algorithms"&gt;
&lt;h2&gt;Constant-time Algorithms&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;How did the crypto libraries solve this problem?&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Constant-time Algorithms&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Oh fancy, tell me more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Constant-time Algorithms are a way of implementing an algorithm in a way that always takes the same amount of time to compute regardless of the input.&lt;/p&gt;
&lt;p&gt;Specifically, these perform in constant-time while processing &lt;em&gt;secret&lt;/em&gt; information.
This distinction means processing a secret key &lt;em&gt;always&lt;/em&gt; takes N cycles while checking that a configuration file is correctly formatted might take a M cycles or maybe M+5.&lt;/p&gt;
&lt;p&gt;There are a lot of coding practices to be aware of in crypto which help us to avoid leaking information for Remote Timing Attacks.
Let's go over a few.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="limit-conditionals-on-secrets"&gt;
&lt;h2&gt;Limit conditionals on secrets&lt;/h2&gt;
&lt;blockquote&gt;
Avoid conditioning on secret information to avoid (among other things) CPU branch predictions.&lt;/blockquote&gt;
&lt;p&gt;Take this code for example:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;usually_true&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_usual_thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Path A&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_weird_thing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Path B&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The CPU eventually will recognize that Path A is going to happen more than Path B so it will try to optimize for that path, making the &amp;quot;usual thing&amp;quot; faster.
This makes sense from a CPU designer standpoint &lt;a class="footnote-reference" href="#id27" id="id4"&gt;[6]&lt;/a&gt;, but it leaks information about which branch is being taken.
When the &amp;quot;unusual thing&amp;quot; happens the CPU has to backpedal before continuing, which takes a notable amount of time.
This backpedaling gives an adversary enough information to craft an attack the path they're on and extrapolate secret information based on that path-awareness.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This type of attack (conditioning on private information) is explored in the Constnat Time Algorithm example and Remote Timing Attack demo near the end of the post.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="division-multiplication-tricky-stuff"&gt;
&lt;h2&gt;Division/Multiplication: tricky stuff&lt;/h2&gt;
&lt;blockquote&gt;
Multiplication is not always constant-time.&lt;/blockquote&gt;
&lt;p&gt;Take this piece of code.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
t1_a = current_time
small_number_a * small_number_b
t2_a = current_time

t1_b = current_time
big_number_a * big_number_b
t2_b = current_time

assert(t2_a - t1_a == t2_b - t1_b)
&lt;/pre&gt;
&lt;p&gt;Believe it or not, even though the first and second blocks are just multiplying two numbers together they can take different amounts of time depending on your CPU and compiler.&lt;/p&gt;
&lt;p&gt;This is triggered by some CPUs just not being equipped to handle large numbers, so they have to perform the large number multiplication in software.
Other CPUs optimize for small numbers since those get handled more frequently than large numbers.
These are pretty old hardware limitations, and the issue has mostly been resolved in newer 64-bit CPUs.
That said... you know... still something to lookout for.&lt;/p&gt;
&lt;p&gt;The same goes for division.
Many CPUs don't have hardware support for division so the compiler needs to handle the operation in software.&lt;/p&gt;
&lt;p&gt;TLDR: the same piece of code which is constant-time on one architecture (X86_64) might not be constant-time on another piece of hardware (x86_32 for example). &lt;a class="footnote-reference" href="#id22" id="id5"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compilers-and-undefined-behavior"&gt;
&lt;h2&gt;Compilers and undefined behavior&lt;/h2&gt;
&lt;blockquote&gt;
Watch out for compiler's &amp;quot;undefined behavior&amp;quot;.&lt;/blockquote&gt;
&lt;p&gt;The C programming language, and &lt;em&gt;most&lt;/em&gt; programming languages, have a formal specification of some kind.
This formal specification gives the programmer a good idea about what their code will do when they compile and run it.&lt;/p&gt;
&lt;p&gt;For example if I wrote the following C:&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;it &lt;em&gt;should&lt;/em&gt; run and return &lt;tt class="docutils literal"&gt;30&lt;/tt&gt;, because the specification tells us that the &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; operator adds two numbers and &lt;tt class="docutils literal"&gt;return&lt;/tt&gt; returns a given value from a function.
It also says that &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; returns a given integer as the exit status.&lt;/p&gt;
&lt;p&gt;If I ran that code and it returned &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/tt&gt; I'd be very confused; that breaks specification!
Compiler authors know this and follow the specification of the C language very carefully to make sure specified inputs produce specified outputs.&lt;/p&gt;
&lt;p&gt;But what about behavior the specification &lt;em&gt;doesn't&lt;/em&gt; mention?&lt;/p&gt;
&lt;p&gt;Take for instance this:&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;214748300&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;214745000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This might not be explicitly covered by the specification because it's pretty weird.
214748300 and 214745000 are close to the signed integer maximum, so when multiplied together what happens?
Will the program print an unsigned integer value of 4611686014132420609 or does it return a signed integer which has overflowed but is still signed?&lt;/p&gt;
&lt;p&gt;This kind headache is called Undefined Behavior and it basically means the compiler, or rather the compiler's authors, &lt;em&gt;choose&lt;/em&gt; which behavior they think is best because the language spec didn't say what should happen.&lt;/p&gt;
&lt;p&gt;Another side effect hinted at is that while you can be confident what the end behavior of your code will be you can't predict how that behavior is achieved.
This didn't used to be an issue when C compilers were just 1:1 mapping your C loops and functions to sane assembly.
Fortunately compilers have gotten much better at producing fast and efficient executables.
&lt;strong&gt;Unfortunately&lt;/strong&gt;, we aren't easily able to predict the runtime of our code because our compilers are liable to pour some black-magic voodoo on any and all binaries it produces.&lt;/p&gt;
&lt;p&gt;These points are condensed really well by the BearSSL website:&lt;/p&gt;
&lt;blockquote&gt;
The C programming language is defined to run in an abstract machine under the &amp;quot;as if&amp;quot; rule, so the compiler is free to translate your code in any sequence of instructions that yield the expected result, with execution time not being part of the observable elements that must be preserved.&lt;/blockquote&gt;
&lt;p&gt;Even though we know that a function will always &lt;em&gt;work&lt;/em&gt;, the C language (and compiler spec) doesn't care about &lt;em&gt;how&lt;/em&gt; it gets done.&lt;/p&gt;
&lt;p&gt;When you're trying to write crypto code this can feel like you're a parent telling your kid to clean their room.
They'll make it look clean, but they just shoved everything under the bed.
Technically they did what you wanted, the room looks cleaner, but they missed the point.
Something about building character in constant-time.&lt;/p&gt;
&lt;p&gt;So what do we do?
We need to trick the compiler.&lt;/p&gt;
&lt;p&gt;There are a handful of tricks to &lt;a class="footnote-reference" href="#id26" id="id6"&gt;[5]&lt;/a&gt; to get the compiler to (a) avoid unknown behavior and (b) enforce a specific assembly output.
These are tricks include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using a bit-wise operations instead of the equivalent mathematical operation.&lt;/li&gt;
&lt;li&gt;Mark important [secret] variables as volatile.&lt;/li&gt;
&lt;li&gt;Manually zero out important [secret filled] memory.&lt;/li&gt;
&lt;li&gt;Use multiple sources of entropy; as many as you can get your hands on.&lt;/li&gt;
&lt;li&gt;Read the output assembly and become a Jedi.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are very high-level solutions to some of the problems, solutions I'm only going to hand-wavily describe, but honestly that's because I don't really grok the solutions and don't want to lead you astray.
Check out the end of this post for further reading by really smart people that get paid to do this stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-can-t-i-just"&gt;
&lt;h2&gt;&amp;quot;Why can't I just...&amp;quot;&lt;/h2&gt;
&lt;p&gt;Just &lt;em&gt;wait&lt;/em&gt;?
If only.&lt;/p&gt;
&lt;p&gt;So the first thought I had (and every other crypto novice has) is something like this:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
do time sensitive operation
sleep N seconds
&lt;/pre&gt;
&lt;p&gt;This doesn't work because this just shifts the amount of time it takes to do an operation, literally &lt;em&gt;just&lt;/em&gt; making your crypto take longer.
Then the &lt;em&gt;second&lt;/em&gt; thought I and every other crypto novice has is something like:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
record start time
do time sensitive operation
record end time
sleep (expected time - elapsed time) seconds
&lt;/pre&gt;
&lt;p&gt;This is &lt;em&gt;better&lt;/em&gt; but you'll never &lt;em&gt;nail&lt;/em&gt; the expected time.
It'll either be too long or too short
This means that either some amount of information is leaked, when &lt;tt class="docutils literal"&gt;expected time&lt;/tt&gt; is too short, or the crypto is needlessly slow, which is just a silly compromise. &lt;a class="footnote-reference" href="#id25" id="id7"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We &lt;em&gt;can&lt;/em&gt; make it algorithmically secure without this &lt;tt class="docutils literal"&gt;sleep&lt;/tt&gt; hack, so we &lt;em&gt;will&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="practical-solutions-to-timing-attacks"&gt;
&lt;h2&gt;Practical Solutions to Timing Attacks&lt;/h2&gt;
&lt;p&gt;If you're implementing crypto, STOP.&lt;/p&gt;
&lt;p&gt;If you're implementing crypto and you know what you're doing, your language of choice &lt;em&gt;probably&lt;/em&gt; has a constant-time library which implements some primitives that you can take advantage of for simple tasks like comparisons.
Those can be found at the end of this post in Errata. &lt;a class="citation-reference" href="#ctlibs" id="id8"&gt;[CTLibs]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After looking into constant-time-ifying your code, do some reading and testing!
There have been a lot of developments in analyzing program constant-time-ness and much of this work is Open Source!
These are implemented using a lot of Statistics&lt;sup&gt;TM&lt;/sup&gt;, code inspection, and even Valgrind. &lt;a class="footnote-reference" href="#id31" id="id9"&gt;[10]&lt;/a&gt; &lt;a class="footnote-reference" href="#id28" id="id10"&gt;[7]&lt;/a&gt; &lt;a class="footnote-reference" href="#id32" id="id11"&gt;[11]&lt;/a&gt;
If you're really concerned that &lt;em&gt;Your Crypto Library&lt;/em&gt; isn't secure against Remote Timing Attacks, take one of those tools on a test drive and see what happens.
It's pretty likely that you'll find a &lt;em&gt;notable&lt;/em&gt; timing difference based on different inputs and you'll probably need to make changes for your library to be secure against timing attacks.&lt;/p&gt;
&lt;p&gt;It's for the greater good.
Because of your contributions the crypto community is even stronger.&lt;/p&gt;
&lt;div class="section" id="a-crazy-idea-constant-time-language-spec"&gt;
&lt;h3&gt;A crazy idea: constant time language spec&lt;/h3&gt;
&lt;p&gt;My crazy idea, for my &lt;em&gt;very&lt;/em&gt; hypothetical grad-school studies would be to implement a Constant-time &lt;em&gt;compiler&lt;/em&gt; and/or &lt;em&gt;language&lt;/em&gt;.
This would perform transformations to your code in an attempt to make it constant-time or warning you when your code isn't going to run in constant-time when it ought to.&lt;/p&gt;
&lt;p&gt;Of course this would take a very long time, and honestly I haven't thought it through entirely, but I imagine something like this:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
regular code

ct {
    thing that needs to be constant-time.
}

regular code
&lt;/pre&gt;
&lt;p&gt;Where you tell the compiler &amp;quot;This needs to be constant-time&amp;quot;.
The compiler does it's best to convert loops and statements into constant-time and when it's done it tells you if it was able to convert your code into constant-time execution or not.&lt;/p&gt;
&lt;p&gt;It's probably overkill; you don't usually just willy-nilly write constant-time code.
That said, just like C and Python help produce less error prone code than writing straight Assembly, so too might a constant-time language help produce code that hits less of the tricky pitfalls of implementing Constant-time algorithms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="constant-time-algorithm-example"&gt;
&lt;h2&gt;Constant-time Algorithm example&lt;/h2&gt;
&lt;p&gt;Take our code block from the beginning, the one that did the leaky comparison.
That takes different amounts of time when processing a given key against a known private key.
How would we write &lt;em&gt;that&lt;/em&gt; in constant-time?&lt;/p&gt;
&lt;p&gt;Something like this:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# Short circuit based on user input, does not leak private information&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recieved_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;PRIVATE_KEY_LENGTH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;KeyLengthError&lt;/span&gt;

&lt;span class="n"&gt;recvied_bits&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recieved_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Taken to be constant-time&lt;/span&gt;
&lt;span class="n"&gt;expected_bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Taken to be constant-time&lt;/span&gt;

&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thing&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PRIVATE_KEY_LENGTH&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;recieved_bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;expected_bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KeyLengthError&lt;/span&gt; &lt;span class="c1"&gt;# This sets the output, but the loop does not break&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is similar to our original code but it does a few things differently:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We convert our keys to a variable which can be operated on bit-wise.&lt;/li&gt;
&lt;li&gt;We manually compare each bit of the inputs. This is what the &lt;tt class="docutils literal"&gt;==&lt;/tt&gt; operator does, but instead of returning when we get a difference we essentially set a switch. &lt;tt class="docutils literal"&gt;ret = Error&lt;/tt&gt; from &lt;tt class="docutils literal"&gt;ret = Thing&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Outside of the loop we return our response after processing all of our bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Behaviorally this is almost identical to our original code, but it does not return earlier or later depending on the user's input.&lt;/p&gt;
&lt;p&gt;Yet another implementation avoids the direct comparison:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# Short circuit based on user input, does not leak private information&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recieved_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;PRIVATE_KEY_LENGTH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;KeyLengthError&lt;/span&gt;

&lt;span class="n"&gt;recvied_bits&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recieved_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Taken to be constant-time&lt;/span&gt;
&lt;span class="n"&gt;expected_bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Taken to be constant-time&lt;/span&gt;

&lt;span class="n"&gt;matching_bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PRIVATE_KEY_LENGTH&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;matching_bits&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recieved_bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;expected_bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matching_bits&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;PRIVATE_KEY_LENGTH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;KeyLengthError&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="remote-timing-attack-demo"&gt;
&lt;h2&gt;Remote Timing Attack demo&lt;/h2&gt;
&lt;blockquote&gt;
Examples are fine, but what about a demo!
You said this was a real threat!&lt;/blockquote&gt;
&lt;p&gt;True, I did say that... so we'll do a small demonstration.&lt;/p&gt;
&lt;p&gt;Below is a bit of Python code that checks a user's input against some hard-coded secret.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# secret.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt; &lt;span class="c1"&gt;# Used to exaggerate time difference.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;   &lt;span class="c1"&gt;# Used to read user input.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Custom `==` operator&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Fail if the strings aren't the right length&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="c1"&gt;# Short-circuit if the strings don't match&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This exaggerates it just enough for our purposes&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Hard-coded secret globals FOR DEMONSTRATIONS ONLY&lt;/span&gt;
&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'l33t'&lt;/span&gt;

&lt;span class="c1"&gt;# This is python for &amp;quot;If someone uses you as a script, do this&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# The user got it right!&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'You got the secret!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# The user got it wrong&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Try again!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The user forgot to enter a guess.&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Usage: python secret.py yourguess&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; \
             &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'The secret may consist of characters in [a-z0-9] '&lt;/span&gt;\
             &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;'and is {} characters long.'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The thing that makes the above code particularly useful for our purposes is that it exaggerates the time it takes to evaluate the &lt;tt class="docutils literal"&gt;is_equal&lt;/tt&gt; function.
Think of this as the 'backpedaling' the CPU does... turned up to 11.
Most important [for the author] we don't need to use Statistics&lt;sup&gt;TM&lt;/sup&gt; to figure the secret, evaluating each input multiple times and collecting/processing that timing data, it already takes about one magnitude longer to evaluate a matching letter than it does to evaluate a non-matching letter.&lt;/p&gt;
&lt;p&gt;Next we've got the attack code.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# attack.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="c1"&gt;# Used to get a timing difference.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ascii_lowercase&lt;/span&gt; &lt;span class="c1"&gt;# All lowercase characters&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="c1"&gt;# All digits as strings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# used to exec a secret.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;devnull&lt;/span&gt;  &lt;span class="c1"&gt;# Suppress output of secret.py&lt;/span&gt;

&lt;span class="n"&gt;current&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'aaaa'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Initial guess&lt;/span&gt;
&lt;span class="n"&gt;characters&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="c1"&gt;# All possible characters in the secret&lt;/span&gt;

&lt;span class="c1"&gt;# We know the string is the same length as our initial guess&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;guess_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# Keep track of execution times&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;# Swap the current letter with the current guess&lt;/span&gt;

        &lt;span class="c1"&gt;# Uncomment the following line for fun debug output&lt;/span&gt;
        &lt;span class="c1"&gt;# print('Making guess {}'.format(''.join(current)))&lt;/span&gt;

        &lt;span class="c1"&gt;# Execute `secret.py` and time it&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'secret.py'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;devnull&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Add that time to the list&lt;/span&gt;
        &lt;span class="n"&gt;guess_times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Uncomment the following line for fun debug output&lt;/span&gt;
    &lt;span class="c1"&gt;# print('max {} min {}'.format(max(guess_times), min(guess_times)))&lt;/span&gt;

    &lt;span class="c1"&gt;# This is a hackey-looking way of getting the outlier time.&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;guess_times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess_times&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'character {} is {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="c1"&gt;# Uncomment the following line for fun debug output&lt;/span&gt;
    &lt;span class="c1"&gt;# print(guess_times.index(max(guess_times)))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Final guess is {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It's a bit convoluted in parts but if you stare at it for a while and read the enlightening comments you should see why this gets the right answer.&lt;/p&gt;
&lt;p&gt;I encourage you to copy that code into two files, &lt;tt class="docutils literal"&gt;secret.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;attack.py&lt;/tt&gt; and run it like so:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
$ time python attack.py
character 0 is l
character 1 is 3
character 2 is 3
character 3 is t
Final guess is l33t

real  0m35.176s
user  0m1.300s
sys 0m0.485s

$ python secret.py l33t
You got the secret!
&lt;/pre&gt;
&lt;p&gt;You'll need a working Python installation and probably a shell of some kind.
I'm on CentOS Linux but any *nix system will &lt;em&gt;probably&lt;/em&gt; work.
With some fiddling you can probably get it to work on Windows ;-)&lt;/p&gt;
&lt;blockquote&gt;
This isn't a real threat!
You exaggerated the problem!&lt;/blockquote&gt;
&lt;p&gt;Hush now.
It demonstrates the principles of the attack.
Besides, the post is over.
We've only got time for the conclusion and then you're off to bed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="constant-time-blogpost"&gt;
&lt;h2&gt;Constant-time blogpost&lt;/h2&gt;
&lt;p&gt;This topic has been a break from the theory/math-heavy term thus far.
Honestly I'm jazzed about it.&lt;/p&gt;
&lt;p&gt;We learned that something as small as a comparison (a &lt;em&gt;comparison&lt;/em&gt;!) can leak information to an adversary.
Your algorithm might be secure, but if you're not careful you can leak information in the most menial code.&lt;/p&gt;
&lt;p&gt;This isn't a lost cause.
We don't need to throw this &lt;em&gt;security&lt;/em&gt; thing out the window.
If we're aware of the gotchas we can craft code that solves these problems.
It's hard work but the peace of mind should make it worth it.&lt;/p&gt;
&lt;p&gt;Learning about this seemingly obscure (&lt;em&gt;terrifying&lt;/em&gt;) exploit in algorithmically secure code is just the kind of headache I enjoy in Computer Science.
Although I don't feel like I did Remote Timing Attacks justice, I could probably spend weeks on it, I had to call it quits.
I could keep working on this for &lt;em&gt;another 10 weeks&lt;/em&gt;, but it's over.
Just walk away.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="annotated-bibliography"&gt;
&lt;h2&gt;Annotated Bibliography&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;BearSSL &lt;a class="footnote-reference" href="#id22" id="id12"&gt;[1]&lt;/a&gt; &lt;a class="footnote-reference" href="#id23" id="id13"&gt;[2]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;BearSSL is a project which aims to make an architecture-independent constant-time implementation of various Crypto Libraries, largely mirroring compatibility with OpenSSL and related Open Source crypro libraries.
Not only is the project interesting but a handful of blogposts and analysis are posted on the website covering topics like how to implement RSA in constant-time to the compatibility of various CPU models with assumptions about constant-time operations (e.g., multiplication).&lt;/dd&gt;
&lt;dt&gt;Remote Timing Attacks are Practical &lt;a class="footnote-reference" href="#id24" id="id14"&gt;[3]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This paper was very easy to read for an academic article and covered the creation of various timing attacks in practical conditions (e.g., hacking an RSA private key across a network).&lt;/dd&gt;
&lt;dt&gt;Beginner focused blogs &lt;a class="footnote-reference" href="#id25" id="id15"&gt;[4]&lt;/a&gt; &lt;a class="footnote-reference" href="#id29" id="id16"&gt;[8]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;These were two blogposts which laid out what timing attack, why they were viable, and how you can avoid them.
Protip: never assume a library you're using is constant-time.&lt;/dd&gt;
&lt;dt&gt;Adam Langley's blog &lt;a class="footnote-reference" href="#id30" id="id17"&gt;[9]&lt;/a&gt; &lt;a class="footnote-reference" href="#id32" id="id18"&gt;[11]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Adam Langley has great Intermediate-level blogposts about the Lucky13 attack and analyzing code for constant-time execution.
These aren't for the weak of heart, but are much more accessible than a lot of academic articles on similar topics.&lt;/dd&gt;
&lt;dt&gt;CryptoCoding.net Coding Rules &lt;a class="footnote-reference" href="#id26" id="id19"&gt;[5]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This wiki outlines some common pitfalls when writing constant-time code and how to avoid it.
It assumes you're writing C code, but many of the principles carry to more exotic languages.&lt;/dd&gt;
&lt;dt&gt;Constant Time Testing Papers &lt;a class="footnote-reference" href="#id28" id="id20"&gt;[7]&lt;/a&gt; &lt;a class="footnote-reference" href="#id31" id="id21"&gt;[10]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;These academic papers outline tools developed for studying how constant-time a program is and analyzes various programs with these tools.
They're a great (surprisingly recent) survey of this topic.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="errata"&gt;
&lt;h2&gt;Errata&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id22" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id5"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id12"&gt;2&lt;/a&gt;)&lt;/em&gt; BearSSL: Constant Time Multiplication
&lt;a class="reference external" href="https://bearssl.org/ctmul.html"&gt;https://bearssl.org/ctmul.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id23" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id13"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;BearSSL: Why Consant-Time Crypto?
&lt;a class="reference external" href="https://bearssl.org/constanttime.html"&gt;https://bearssl.org/constanttime.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id24" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[3]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;, &lt;a class="fn-backref" href="#id14"&gt;3&lt;/a&gt;)&lt;/em&gt; Remote Timing Attacks are Pratical;
David Brumley, Dan Boneh; &lt;a class="reference external" href="http://crypto.stanford.edu/~dabo/pubs/papers/ssl-timing.pdf"&gt;http://crypto.stanford.edu/~dabo/pubs/papers/ssl-timing.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id25" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[4]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id3"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id7"&gt;2&lt;/a&gt;, &lt;a class="fn-backref" href="#id15"&gt;3&lt;/a&gt;)&lt;/em&gt; Chosen Plaintext: A beginner's guide to contant-time cryptography;
&lt;a class="reference external" href="https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html"&gt;https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id26" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[5]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id6"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id19"&gt;2&lt;/a&gt;)&lt;/em&gt; Cryptography Coding Standards: Coding rules;
&lt;a class="reference external" href="https://cryptocoding.net/index.php/Coding_rules"&gt;https://cryptocoding.net/index.php/Coding_rules&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id27" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As Sonic the Hedgehog always says, Gotta Go Fast!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id28" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[7]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id10"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id20"&gt;2&lt;/a&gt;)&lt;/em&gt; Veryfying Constnat-Time Implementations, via Usenix;
&lt;a class="reference external" href="http://haslab.uminho.pt/jba/files/16usenix.pdf"&gt;http://haslab.uminho.pt/jba/files/16usenix.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id29" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id16"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;A Lesson In Timing Attacks (or, Don't use &lt;tt class="docutils literal"&gt;MessageDigest.isEquals&lt;/tt&gt;);
Coda Hale; &lt;a class="reference external" href="https://codahale.com/a-lesson-in-timing-attacks/"&gt;https://codahale.com/a-lesson-in-timing-attacks/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id30" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id17"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Checking that functions are constant-time with Valgrind;
Adam langley via ImperialViolet;
&lt;a class="reference external" href="https://www.imperialviolet.org/2010/04/01/ctgrind.html"&gt;https://www.imperialviolet.org/2010/04/01/ctgrind.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id31" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[10]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id9"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id21"&gt;2&lt;/a&gt;)&lt;/em&gt; Dude, is my code constant-time?
Oscar Reparaz, josep Balasch, Ingrid Vebauwhede;
&lt;a class="reference external" href="https://eprint.iacr.org/2016/1123.pdf"&gt;https://eprint.iacr.org/2016/1123.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id32" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[11]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id11"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id18"&gt;2&lt;/a&gt;)&lt;/em&gt; Lucky Thirteen attack on TLS CBC
Adam langley via ImperialViolet;
&lt;a class="reference external" href="https://www.imperialviolet.org/2013/02/04/luckythirteen.html"&gt;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="ctlibs" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[CTLibs]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://golang.org/pkg/crypto/subtle/"&gt;https://golang.org/pkg/crypto/subtle/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://cryptography.io/en/latest/hazmat/primitives/constant-time/"&gt;https://cryptography.io/en/latest/hazmat/primitives/constant-time/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/isislovecruft/subtle"&gt;https://github.com/isislovecruft/subtle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Crytpo"></category><category term="Independent Crypto"></category></entry><entry><title>Garbled Circuits</title><link href="/crypto/garbled-circuits" rel="alternate"></link><published>2017-10-30T00:00:00-07:00</published><updated>2017-10-30T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2017-10-30:/crypto/garbled-circuits</id><summary type="html">&lt;p class="first last"&gt;I know those words seperately but...&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is a part of a series of blog posts I wrote for an Independent Study on cryptography at Oregon State University.
To read all of the posts, check out the 'Independent Crypto' tag.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let's imagine you are a billionaire.
You want to know if you have more money than your billionaire friend Bob, but for some reason it's &lt;em&gt;very&lt;/em&gt; faux pas to let anybody how much money you have, even your good friend Bob.&lt;/p&gt;
&lt;p&gt;But you're a billionaire!
You're not used to the phrase &amp;quot;that isn't possible&amp;quot;.
In your frustration you try to figure out if you can use some of your billions to find a solution.&lt;/p&gt;
&lt;p&gt;The first solution you come up with is Trusty Tina.
You tell Tina how much you make, Bob tells Tina how much he makes, and then Tina tells both of you who makes more.&lt;/p&gt;
&lt;p&gt;The only problem is that Tina isn't &lt;em&gt;that&lt;/em&gt; trustworthy, her parent's just named her that.
Like... you wouldn't trust her with your life or anything.
You could pay her to keep your assets secret but Bob might pay her a bit more reveal your number to him.
Tina reminds you of this so you have to pay her &lt;em&gt;more&lt;/em&gt; to keep the secret, and eventually you have an arms-race type situation at hand.
With your cunning accountant skills you can already tell that Tina might be more trouble than she's worth.&lt;/p&gt;
&lt;p&gt;If you won't tell Bob directly, and you can't depend on Manipulative Tina, is there &lt;em&gt;any&lt;/em&gt; way to determine out who has more money?&lt;/p&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;div class="section" id="party-secure-function-evaluation"&gt;
&lt;h2&gt;2-Party Secure Function Evaluation&lt;/h2&gt;
&lt;p&gt;The problem above is the Millionaires problem &lt;a class="footnote-reference" href="#id20" id="id1"&gt;[9]&lt;/a&gt; and it is solved by the use of 2-party secure function evaluation (SFE).
The general idea &lt;a class="footnote-reference" href="#id18" id="id2"&gt;[4]&lt;/a&gt; is that you have a function &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; which takes as input &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;y&lt;/tt&gt;.
This function is garbled by one of the two parties into &lt;tt class="docutils literal"&gt;f'&lt;/tt&gt; and the inputs are garbled into &lt;tt class="docutils literal"&gt;x'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;y'&lt;/tt&gt; by each of the parties.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f'(x',&lt;/span&gt; y') == f(x,y)&lt;/tt&gt; but does not leak any of the inputs, because &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; were obfuscated.&lt;/p&gt;
&lt;p&gt;In other words...&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Alice and Bob agree on a function (i.e., circuit) &lt;tt class="docutils literal"&gt;f(a,b)&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Alice garbles the function (&lt;em&gt;cough&lt;/em&gt; circuit) &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; and her input &lt;tt class="docutils literal"&gt;a&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Alice sends &lt;tt class="docutils literal"&gt;f'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;a'&lt;/tt&gt; to Bob.&lt;/li&gt;
&lt;li&gt;Bob gets his input &lt;tt class="docutils literal"&gt;b&lt;/tt&gt; garbled into &lt;tt class="docutils literal"&gt;b'&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Bob evaluates &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f'(a',&lt;/span&gt; b')&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;This reveals the result of &lt;tt class="docutils literal"&gt;f(a,b)&lt;/tt&gt; to Bob, but does not reveal Alice's input.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The first half of this post focuses on honest garbled circuit uses, meaning both parties are acting honestly (and don't pull any fast-ones).&lt;/p&gt;
&lt;p class="last"&gt;The latter portion focuses on problems with that 'vanilla' garbled circuit implementation and potential solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="garbling-a-gate"&gt;
&lt;h2&gt;Garbling a gate&lt;/h2&gt;
&lt;p&gt;How does Alice actually... 'garble' a circuit?
It sounds kinda dirty.&lt;/p&gt;
&lt;p&gt;Each gate (OR, AND, XOR, etc) has two inputs.
Sick with me.
Each input is encrypted.
Keeping up?
So you need a &lt;em&gt;key&lt;/em&gt; to use &lt;em&gt;each gate&lt;/em&gt;.
It gets better.
But if you have the keys, you don't know which key corresponds with a &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; or a &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; so you can compute a function without knowing the actual values you put in.
Whoa.&lt;/p&gt;
&lt;p&gt;Let's use the OR gate as an example.&lt;/p&gt;
&lt;p&gt;Remember truth-tables for OR?
Here's a reminder:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="45%" /&gt;
&lt;col width="27%" /&gt;
&lt;col width="27%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;OR&lt;/th&gt;
&lt;th class="head"&gt;0&lt;/th&gt;
&lt;th class="head"&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This table is going to be important for Alice's part of this dance.&lt;/p&gt;
&lt;div class="section" id="alice-s-circuit-input"&gt;
&lt;h3&gt;Alice's circuit &amp;amp; input&lt;/h3&gt;
&lt;p&gt;Alice definitely does the heavy lifting in this transaction.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Alice generates 4 keys &lt;tt class="docutils literal"&gt;Kx0&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Kx1&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Ky0&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Ky1&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Alice creates four variables corresponding with the four values in the OR table:&lt;/li&gt;
&lt;/ol&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="19%" /&gt;
&lt;col width="41%" /&gt;
&lt;col width="41%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;OR&lt;/th&gt;
&lt;th class="head"&gt;0&lt;/th&gt;
&lt;th class="head"&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;B00&lt;/tt&gt; = 0&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;B01&lt;/tt&gt; = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;B10&lt;/tt&gt; = 1&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;B11&lt;/tt&gt; = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Each box is encrypted with the two keys:&lt;/li&gt;
&lt;/ol&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="11%" /&gt;
&lt;col width="43%" /&gt;
&lt;col width="46%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;OR&lt;/th&gt;
&lt;th class="head"&gt;0&lt;/th&gt;
&lt;th class="head"&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;E(Kx0||Ky0,&lt;/span&gt; B00)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;E(Kx0||Ky1,&lt;/span&gt; B01)&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;E(Kx1||Ky0,&lt;/span&gt; B10)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;E(Kx1||Ky1,&lt;/span&gt; B11)&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Alice sends these ciphertexts (unordered) to Bob.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="bob-s-input"&gt;
&lt;h3&gt;Bob's input&lt;/h3&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Bob gets Alice's input, key &lt;tt class="docutils literal"&gt;KxA&lt;/tt&gt;, from Alice.&lt;/li&gt;
&lt;li&gt;Bob uses oblivious transfer &lt;a class="footnote-reference" href="#id19" id="id3"&gt;[5]&lt;/a&gt; to get his input &lt;tt class="docutils literal"&gt;KyB&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;With these two keys Bob is able to process the circuit (an OR gate).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bob has enough information to get one of the four possible outputs of the circuit, but doesn't know if Alice's input is a 1 or a 0.&lt;/p&gt;
&lt;p&gt;Importantly, while Bob can share the output of the circuit, he should &lt;strong&gt;not&lt;/strong&gt; share his input.
That would make using OT (step 6) obtuse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extending-the-garbled-gate"&gt;
&lt;h3&gt;Extending the garbled gate&lt;/h3&gt;
&lt;img alt="Garbled circuit example diagram." class="align-center" src="/assets/images/independent-crypto/garbled-circuit.jpg" style="width: 100%;" /&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The UTF-8 Padlock symbol doesn't render on my browser because I seem to have gone back in the time to the late 90s.
Being stuck in the past, we have to comprmise.
The ⛨ symbol is meant to represent a lock and the ⚿ represents a key.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Multiple gates can be connected together to build more complicated circuits.
One important difference is that while each intermediate circuit still has four cipher-texts, for the four outcomes of a truth-table, those decrypt to a &lt;em&gt;key&lt;/em&gt; and not a 1 or 0.
The only gates which decrypt to a plain-text of 0 or 1 are output gates, not the intermediate gates.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;&lt;em&gt;PSST&lt;/em&gt; Check out the end of this post for a &lt;strong&gt;GAME&lt;/strong&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="problems-with-garbled-circuits"&gt;
&lt;h2&gt;Problems with garbled circuits&lt;/h2&gt;
&lt;p&gt;There are a few important flaws in the &lt;em&gt;security&lt;/em&gt; of garbled circuits as they have been described.
The first is that although Alice and Bob agree on a circuit to garble there is no guarantee that the circuit one is evaluating (if you're Bob) is the circuit you agreed upon.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Alice and Bob 'agree' on a function &lt;tt class="docutils literal"&gt;f(a,b)&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Alice creates her own function &lt;tt class="docutils literal"&gt;g(a,b)&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Alice garbles &lt;tt class="docutils literal"&gt;g&lt;/tt&gt; and her input &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; and sends it to Bob as &lt;tt class="docutils literal"&gt;f'&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;a'&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Bob evaluates &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;g'(a',b')&lt;/span&gt;&lt;/tt&gt; and reveals the output to Alice. Alice now knows something other than than Bob agreed to.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="improvements-on-garbled-circuit-security"&gt;
&lt;h2&gt;Improvements on garbled circuit security&lt;/h2&gt;
&lt;p&gt;To prevent the above adversarial attack we do something called &amp;quot;Cut-and-Choose&amp;quot;.
This is when Bob checks Alice's work to make sure she's not cheating.&lt;/p&gt;
&lt;p&gt;Remember that Alice and Bob agreed on a given circuit.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Alice generates M garbled circuits for the agreed upon function where M &amp;gt; 1.&lt;/li&gt;
&lt;li&gt;All secrets for a randomly chosen N circuits are revealed where 1 ≤ N &amp;lt; M, the circuits are &amp;quot;opened&amp;quot;.&lt;/li&gt;
&lt;li&gt;Bob selects one of the remaining M-N circuits to evaluate as outlined earlier.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This ensures that Alice is not nefarious to some statistical certainty.
She had control over how the circuits were garbled but she does not have control over which are revealed or evaluated.
If she made one (or two or three...) nefarious circuits that bad behavior is &lt;em&gt;probably&lt;/em&gt; revealed in step 2, if all the checked circuits are good Alice is &lt;em&gt;probably&lt;/em&gt; being honest.&lt;/p&gt;
&lt;p&gt;This doesn't break garbled circuits for the following reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;While Alice reveals the secrets of the N circuits, she doesn't reveal anything about her input. We are only un-garbling the circuit not the inputs (revealing all possible inputs, not Alice's).&lt;/li&gt;
&lt;li&gt;We're not un-garbling the M-N circuits which may be evaluated, so those are still secret.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As M grows and N approaches M this method gets more secure at the cost of computation cycles and bandwidth in transferring the garbled circuits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-free-xor-optimization"&gt;
&lt;h2&gt;The &amp;quot;Free XOR&amp;quot; Optimization&lt;/h2&gt;
&lt;p&gt;I'm definitely not a circuits person.
You can show me a circuit diagram and I'll say &amp;quot;Yep, that's a circuit. What's it do?&amp;quot;
I couldn't even even identify which gate is which without Wikipedia.&lt;/p&gt;
&lt;p&gt;I was told during my research for this post that XOR gates are very popular with garbled circuit design, and more broadly circuit design in general.
This was shared to me in the form of a cryptic hint so I figured I'd investigate and share my findings here.&lt;/p&gt;
&lt;p&gt;As it turns out the Wikipedia page notes that this XOR optimization exists and even cites the original paper published on the topic. &lt;a class="footnote-reference" href="#id15" id="id4"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The jist of this optimization is that one can very efficiently garble an XOR gate such that the output of the gate is encoded as the XOR of the keys used to unlock the gate and some known global constant.
This is in contrast with the implementations discussed in the beginning where each gate had to be decrypted with two cipher-texts and revealed another key.&lt;/p&gt;
&lt;p&gt;Basically using XOR, which is pretty fast, we can avoid generating four keys per gate and instead craft 1 key which is produced as the result of 'unlocking' a gate.&lt;/p&gt;
&lt;p&gt;Put a bit more formally:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a gate G with input wires A and B and output wire C and a random string R, the garbled gate is obtained by XORing the garbled gates inputs C&lt;sup&gt;1&lt;/sup&gt; = C&lt;sup&gt;0&lt;/sup&gt; ⊕ R:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;C&lt;sup&gt;0&lt;/sup&gt; = A&lt;sup&gt;0&lt;/sup&gt; ⊕ B&lt;sup&gt;0&lt;/sup&gt; = (A&lt;sup&gt;0&lt;/sup&gt; ⊕ R ) ⊕ (B&lt;sup&gt;0&lt;/sup&gt; ⊕ R) = A&lt;sup&gt;1&lt;/sup&gt; ⊕ B&lt;sup&gt;1&lt;/sup&gt;&lt;/div&gt;
&lt;div class="line"&gt;C&lt;sup&gt;1&lt;/sup&gt; = C&lt;sup&gt;0&lt;/sup&gt; ⊕ R = A&lt;sup&gt;0&lt;/sup&gt; (B&lt;sup&gt;0&lt;/sup&gt; ⊕ R ) = A&lt;sup&gt;0&lt;/sup&gt; ⊕ B&lt;sup&gt;1&lt;/sup&gt; = (A&lt;sup&gt;0&lt;/sup&gt; ⊕ R) ⊕ B&lt;sup&gt;0&lt;/sup&gt; = A&lt;sup&gt;1&lt;/sup&gt; ⊕ B&lt;sup&gt;0&lt;/sup&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;LETTER&lt;sup&gt;{0,1}&lt;/sup&gt; is short-hand for the True or False output of the given gate.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This isn't super intuitive, and honestly I just put those equations up there to prove that I read a paper about this.&lt;/p&gt;
&lt;p&gt;The main takeaway is that 'free XOR' saves us computation generating and processing cryptographic keys by simply performing the XOR operation.
This optimization is so powerful that using &lt;em&gt;mostly&lt;/em&gt; XOR gates makes garbled circuits notably faster and more useful for secure computation. &lt;a class="footnote-reference" href="#id17" id="id5"&gt;[8]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="annotated-bibliography"&gt;
&lt;h2&gt;Annotated Bibliography&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Foundations of Garbled Circuits &lt;a class="footnote-reference" href="#id13" id="id6"&gt;[2]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This is by far the most thorough academic source I have.
If I had a better foundation in academic reading this might be the perfect paper but most of it went way over my head.
That said the overview of each section was fairly human-readable and gave me a good rough overview for many of the topics covered in this post.&lt;/dd&gt;
&lt;dt&gt;A Brief History of Practical Garbled Circuits &lt;a class="footnote-reference" href="#id17" id="id7"&gt;[8]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;This was the first source I checked out to get a feel for how difficult garbled circuits are as a topic.
It quickly glanced at the basics of garbled circuits and then quickly went into the optimizations on garbled circuits.
This was overwhelming, but as I started to learn more about garbled circuits and filled in the knowledge gaps it gained significant value.&lt;/p&gt;
&lt;p class="last"&gt;It's a great talk about Garbled Circuits which wasn't ideal for beginners, but did give me a good breadth of the topic and what I could dive into.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Improved garbled Circuit: Free XOR Gates and Applications &lt;a class="footnote-reference" href="#id15" id="id8"&gt;[6]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This paper was useful in giving me an academic preview of the XOR optimization in Garbled Circuits.
I quickly started looking at the many other papers referenced by this one, kind of like following down the Wikipedia wormhole, but with more PDFs and less pictures.&lt;/dd&gt;
&lt;dt&gt;SFE: Yao's Garbled Circuit &lt;a class="footnote-reference" href="#id12" id="id9"&gt;[1]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This slide-deck was very useful as a reference for basic GCs and securing GC's with cut-and-choose.
It wasn't a great initial source for this material, but it was useful &lt;em&gt;after&lt;/em&gt; I had a basic understanding of a topic to solidify it with pretty pictures and Comic Sans.&lt;/dd&gt;
&lt;dt&gt;Mike Rosulek on Stack Exchange &lt;a class="footnote-reference" href="#id14" id="id10"&gt;[3]&lt;/a&gt; &lt;a class="footnote-reference" href="#id16" id="id11"&gt;[7]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This is more of a shout-out than a citation.
Mike Rosulek's posts on crypto.stackexchange.com were very helpful in breaking down core concepts like what garbled circuits are and why XOR is &amp;quot;free&amp;quot;.
They also provided a good list of further reading which was helpful in addition to the resources provided in the syllabus.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="errata"&gt;
&lt;h2&gt;Errata&lt;/h2&gt;
&lt;iframe src="/garbled-circuits-game.html" height="400px" width="100%"&gt;&lt;/iframe&gt;&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Yes, the name is a misnomer.
The goal is to &lt;em&gt;evaluate&lt;/em&gt; a garbled circuit, but that just doesn't roll off the tongue the same.&lt;/p&gt;
&lt;/div&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;SFE: Yao's Garbled Circuit,
Published by engr.illinois.edu,
for the course CS 598, Fall 2009.
&lt;a class="reference external" href="https://courses.engr.illinois.edu/cs598man/fa2009/slides/ac-f09-lect16-yao.pdf"&gt;https://courses.engr.illinois.edu/cs598man/fa2009/slides/ac-f09-lect16-yao.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Foundations of Garbled Circuits,
Written by Mihir Bellare, Viet tung Hoang, and Phillip Rogaway,
Published October, 2012.
&lt;a class="reference external" href="https://eprint.iacr.org/2012/265.pdf"&gt;https://eprint.iacr.org/2012/265.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id10"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;What exactly is a &amp;quot;garbled circuit&amp;quot;?
Asked by user Ella Rose,
Answered by user Mikero on on July 27, 2016.
&lt;a class="reference external" href="https://crypto.stackexchange.com/a/37993"&gt;https://crypto.stackexchange.com/a/37993&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[6]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id4"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id8"&gt;2&lt;/a&gt;)&lt;/em&gt; Improved garbled Circuit: Free XOR Gates and Applications,
Written by Vladimir Kolesnikov and Thomas Shneider,
Published July 2008.
&lt;a class="reference external" href="http://www.cs.toronto.edu/~vlad/papers/XOR_ICALP08.pdf"&gt;http://www.cs.toronto.edu/~vlad/papers/XOR_ICALP08.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id11"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Why XOR and NOT is free in garbled circuits
Asked by user Jason,
Answered by user Mikero on February 28, 2017.
&lt;a class="reference external" href="https://crypto.stackexchange.com/a/44278"&gt;https://crypto.stackexchange.com/a/44278&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[8]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id5"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id7"&gt;2&lt;/a&gt;)&lt;/em&gt; A Brief History of Practical Garbled Circuit Optimizations,
Presented by Mike Rosulek,
Published by the Simons Institute,
June 15, 2015.
&lt;a class="reference external" href="https://youtu.be/FTxh908u9y8"&gt;https://youtu.be/FTxh908u9y8&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id18" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;To completely level with you, it's been anecdotally proven that there is at least 1 definition of Garbled Circuits for each paper on the topic.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id19" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class="first"&gt;Oblivious Transfer has been described to me as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Alice sends two possible options to a box labeled OT.&lt;/li&gt;
&lt;li&gt;Bob sends a choice to the box labeled OT.&lt;/li&gt;
&lt;li&gt;Bob gets back one of the two options, without knowledge of the other.&lt;/li&gt;
&lt;li&gt;Alice does not know which option Bob got.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="last"&gt;This is a cryptographic primitive which is very useful for tasks like generating Bob's input to the garbled circuit &lt;tt class="docutils literal"&gt;f'&lt;/tt&gt;.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id20" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The original problem was developed in the 80's.
This post adjusts the scenario for inflation.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- garbled circuits are kinda like monads.
When everybody hears about them they write a blogpost (paper) explaining them in their own unique 'intuitive' way. --&gt;
&lt;!-- Honestly, Yao got out of this pretty easy.
He said "Here's a thing, but I'm just gonna say it, not prove it" and everybody was like "Oh shit that could be a thing."
If he was wrong somebody would just say "Oh that's not really a thing." and inevitably *not* publish because that's boring.
If he's right (he is) he's like Euler; jotting things down in the margins for other people to prove.
At least that's the story I'm reading. --&gt;
&lt;/div&gt;
</content><category term="Crytpo"></category><category term="Independent Crypto"></category></entry><entry><title>Memory Hard Functions</title><link href="/crypto/memory-hard-functions" rel="alternate"></link><published>2017-10-17T00:00:00-07:00</published><updated>2017-10-17T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2017-10-17:/crypto/memory-hard-functions</id><summary type="html">&lt;p class="first last"&gt;Harder than regular functions.&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is a part of a series of blog posts I wrote for an Independent Study on cryptography at Oregon State University.
To read all of the posts, check out the 'Independent Crypto' tag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-storing-passwords-is-hard"&gt;
&lt;h2&gt;Problem: storing passwords is hard&lt;/h2&gt;
&lt;p&gt;You're a system administrator and -- oh no!
A hacker stole your database!&lt;/p&gt;
&lt;p&gt;Well, not yet... but they &lt;em&gt;could&lt;/em&gt;.
Once you get popular enough it's bound to happen. &lt;a class="footnote-reference" href="#id19" id="id1"&gt;[9]&lt;/a&gt;
Can you make sure your users data is safe &lt;strong&gt;when&lt;/strong&gt; that happens?&lt;/p&gt;
&lt;p&gt;When you store passwords in a database you never store them in plain text.
Instead, you store a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hash_function"&gt;hash&lt;/a&gt; of that password.
For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Password: 12345678
sha256sum (hash): 2634c3097f98e36865f0c572009c4ffd73316bc8b88ccfe8d196af35f46e2394
&lt;/pre&gt;
&lt;p&gt;The hash is generated when the user tries to login.
The &lt;em&gt;hash&lt;/em&gt; of the password the user sends at login is compared against the corresponding password hash for that user.
If it matches that means the user sent the right password and so they are authenticated.&lt;/p&gt;
&lt;p&gt;What happens if the hacker pre-computes a bunch of popular passwords?
This might sound crazy, but there are lots of people that re-use passwords, like &lt;tt class="docutils literal"&gt;123456&lt;/tt&gt;.
The hacker can pre-compute the hash for the 1,000,000 most popular passwords and more or less reverse-search for any user's password once they have a database dump.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-1-add-salt"&gt;
&lt;h2&gt;Solution 1: add salt&lt;/h2&gt;
&lt;p&gt;Our first naive solution to solve this problem is to make the adversary's life harder by adding &lt;em&gt;salt&lt;/em&gt; to our passwords.
This is a piece of known information which is added to the password so adversaries can't pre-compute a hash-table, they have to compute this after they have the database and figure out the salt.
For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Password: 12345678
Salt: cryptoHeckYeah!
New Password: 12345678cryptoHeckYeah!
sha256sum: 6e8a7780df48a0b687e9e272e8d082f5f4c0c3a8c43b63461c3f62618b111e9d
&lt;/pre&gt;
&lt;p&gt;Unfortunately we live in 2017 and Graphics processors and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application-specific_integrated_circuit"&gt;ASICs&lt;/a&gt; are cheap and can compute sha256sums &lt;strong&gt;super fast&lt;/strong&gt; for &lt;strong&gt;really cheap&lt;/strong&gt;.
This means that it might be more of a pain, but the adversary can still crack a password with relative ease and efficiency because they've got a computer &lt;em&gt;designed&lt;/em&gt; to generate lots of hashes.
Curses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-2-h-h-h-x"&gt;
&lt;h2&gt;Solution 2: H(H(..H(x)..)&lt;/h2&gt;
&lt;p&gt;Computing a single sha256sum is easy, but what if the hacker had to compute like... 1000 sha256sums for each password!
That sounds pretty hard... right?
If we compute the hash of the hash of the hash (etc) it would take like... 1000x longer to compute each user's password.
Something like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
p = '12345678cryptoHeckYeah!'
for x in 1..1000
  p = sha256sum( p )
end
return p

Result: 47c76630def739ede9c05fd974065b1200d4712aa2421eefb1f6b241a1ca6bea
Time: 0m1.547s
&lt;/pre&gt;
&lt;p&gt;Unfortunately this hurts more than it helps.&lt;/p&gt;
&lt;p&gt;In bash on non-specialized hardware, this took about 1.6 seconds.
On specialized hardware, written in a systems programming language, and implemented in parallel it'd be much less costly for an adversary to crack passwords hashed this way.&lt;/p&gt;
&lt;p&gt;Worst of all, this is &lt;em&gt;easier for an adversary to compute than it is for the the &amp;quot;good guys&amp;quot;&lt;/em&gt; because the non-malicious actor is using generalized hardware and the adversary is using specialized hardware to compute the hashes.
It's like trying to beat a Roadster in a drag race when you're behind the wheel of a Minivan; the Minivan (&amp;quot;good guys&amp;quot;) &lt;em&gt;can't win&lt;/em&gt; because they weren't built for drag races.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-3-memory-hard-functions"&gt;
&lt;h2&gt;Solution 3: Memory Hard Functions&lt;/h2&gt;
&lt;p&gt;The big problem we have is that CPUs can be specialized to crack passwords &lt;em&gt;very quickly&lt;/em&gt;.
No matter how fast your AWS EC2 instance is, or even that top of the line IBM server you just bought, it will &lt;em&gt;never&lt;/em&gt; be faster than a cheap custom designed ASIC.
At around 3000$/box it won't break the adversary's bank to break into yours. &lt;a class="footnote-reference" href="#id20" id="id2"&gt;[10]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While there specialized hash-cracking CPUs &lt;strong&gt;do&lt;/strong&gt; exist, specialized hash-cracking &lt;em&gt;memory&lt;/em&gt; does &lt;strong&gt;not&lt;/strong&gt; exist. &lt;a class="footnote-reference" href="#id17" id="id3"&gt;[7]&lt;/a&gt;
If we were to create an algorithm which depends on lots of memory, instead of lots of CPU cycles, we could &amp;quot;level the playing field&amp;quot;.
This should help stop adversaries from reversing passwords as fast as they currently can.&lt;/p&gt;
&lt;p&gt;This theoretical hash-function is called a Memory Hard Function (MHF).
These are difficult to perform unless you have a certain threshold of memory.
As a result non-malicious actors can perform a hash in M seconds and it will take a malicious actor &lt;em&gt;at least&lt;/em&gt; M seconds to perform the same hash.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;TLDR: We want a hash function that takes as long for an adversary to compute as it does for the &amp;quot;good guys&amp;quot; to compute.
Since nobody has specialized hash-cracking RAM we should be able to create a hash function which is memory-intensive and fits our criteria.
If we have a function that fits this we will have got a &lt;em&gt;Memory hard Function&lt;/em&gt; (MHF).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="scrypt-a-wild-mhf"&gt;
&lt;h2&gt;scrypt: a wild MHF&lt;/h2&gt;
&lt;p&gt;scrpyt is a key derivation function &lt;a class="reference external" href="http://www.tarsnap.com/scrypt.html"&gt;developed for the Tarsnap project&lt;/a&gt;.
It was designed explicitly to solve this problem and has some pretty impressive results.
Some especially impressive results include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;scrypt is about 2&lt;sup&gt;5&lt;/sup&gt; times more expensive to attack for logins than bcrypt.&lt;/li&gt;
&lt;li&gt;scrypt is about 2&lt;sup&gt;15&lt;/sup&gt; times more espensive to attack for logins than MD5 CRYPT.&lt;/li&gt;
&lt;li&gt;scrypt is about 2&lt;sup&gt;37&lt;/sup&gt; times more expensive to attack for file encryption than MD5.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;scrypt also happens to be a MHF.
Yay we found one!&lt;/p&gt;
&lt;p&gt;So... how does it work?&lt;/p&gt;
&lt;p&gt;Given a hash function H, an input B, and an integer N, compute:&lt;/p&gt;
&lt;blockquote&gt;
V&lt;sub&gt;i&lt;/sub&gt; = H&lt;sup&gt;i&lt;/sup&gt;(B), given 0 ≤ i &amp;lt; N,&lt;/blockquote&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;blockquote&gt;
X = H&lt;sup&gt;N&lt;/sup&gt;(B)&lt;/blockquote&gt;
&lt;p&gt;then iterate&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;j &amp;lt;- Integrify(X) mod N&lt;/li&gt;
&lt;li&gt;X &amp;lt;- H(X ⊕ V&lt;sub&gt;j&lt;/sub&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;N times; and output X&lt;/p&gt;
&lt;p&gt;The function Integrify can be any bijection &lt;a class="footnote-reference" href="#id18" id="id4"&gt;[8]&lt;/a&gt; from {0,1}&lt;sup&gt;k&lt;/sup&gt; to {0...2&lt;sup&gt;k&lt;/sup&gt; - 1}.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Breaking that down a bit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The function is given a different hash function (H), an input to compute the hash of (B), and a modulus (N).&lt;/li&gt;
&lt;li&gt;N hashes are generated with variations of H and the input B called V&lt;sub&gt;0..N&lt;/sub&gt;.&lt;/li&gt;
&lt;li&gt;X is initialized with a hash value and a loop begins:&lt;ol class="arabic"&gt;
&lt;li&gt;j is set to a psuedo-random integer mod N.&lt;/li&gt;
&lt;li&gt;X is set to the hash of the existing X value xor'd with one of the V values.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Loop N times and output the final X.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the biggest gripes with scrypt is that it has a very predictable runtime.
This means that the running of the function is predictable based on the user's input and so can be victim to a cache-timing side-channel attack.
We won't be able to get into what this attack means, but basically you can say &amp;quot;scrypt is good, but not perfect&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-independent-mhfs-imhfs"&gt;
&lt;h2&gt;Data-independent MHFs (iMHFs)&lt;/h2&gt;
&lt;img alt="A directed acyclic graph map." class="align-center" src="/assets/images/independent-crypto/DAG.gif" style="width: 100%;" /&gt;
&lt;p&gt;iMHFs are supposed to solve the problem that scrypt has (side-channel attacks) by have unpredictable runtimes which still result in the same output.&lt;/p&gt;
&lt;p&gt;iMHFs can be thought of as Directed Acyclic Graphs (DAGs) which are traversed during runtime.&lt;/p&gt;
&lt;p&gt;Some specifics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The function depends on a random oracle H: {0,1}&lt;sup&gt;2k&lt;/sup&gt; -&amp;gt; {0,1}&lt;sup&gt;k&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;The function provides a Directed Acyclic Graph Directed Acyclic Graph (DAG) G used to encode data-dependencies&lt;/li&gt;
&lt;li&gt;The initial input is a password and a salt.&lt;/li&gt;
&lt;li&gt;Each other node is labeled with the hash of it's parent nodes.&lt;/li&gt;
&lt;li&gt;The output is the hash of the value of the last node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As mentioned before, a very nice feature of iMHFs is that their memory usage pattern does not depend on the user's input (password) and so is not vulnerable to side-channel attacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pebbling-a-directed-acyclic-graph-dag"&gt;
&lt;h2&gt;Pebbling a Directed Acyclic Graph (DAG)&lt;/h2&gt;
&lt;img alt="A directed acyclic graph traversal." class="align-center" src="/assets/images/independent-crypto/dag-animated.gif" style="width: 100%;" /&gt;
&lt;p&gt;We can think of the process of computing the output of an iMHF as pebbling a graph where:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Computing the value of a node is to pebble it.&lt;/li&gt;
&lt;li&gt;There are rules about which nodes can be pebbled at any time.&lt;/li&gt;
&lt;li&gt;When a pebble is removed from a node it is freed from memory.&lt;/li&gt;
&lt;li&gt;Our goal is to pebble the last node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rules:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We can only place a pebble on a node if we have pebbles on all of it's parents nodes.&lt;/li&gt;
&lt;li&gt;Our goal is to get to the sink node (exit node).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The naive pebbling algorithm, the one the 'good guy' user would utilize is as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Only one pebble can be placed per time-step.&lt;/li&gt;
&lt;li&gt;The graph is pebbled in in topological order.&lt;/li&gt;
&lt;li&gt;Pebbles (calculated nodes) are never discarded until the end of the function.&lt;/li&gt;
&lt;li&gt;Expected cost: scales with n&lt;sup&gt;2&lt;/sup&gt; where n is the number of nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This does take up considerable resources, but it isn't prohibitive for users on commodity hardware.
This means it won't take &lt;em&gt;too long&lt;/em&gt; to get your account authenticated.
More importantly, it will take about as long for the bad guys to calculate a token as it took you to calculate a token, as opposed to a small fraction it would take if this was a &amp;quot;normal&amp;quot; hash function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attacks-on-imhfs"&gt;
&lt;h2&gt;Attacks on iMHFs&lt;/h2&gt;
&lt;p&gt;An attack is defined as when cost of calculating a hash from an iMHF is lower than via the nieve approach.&lt;/p&gt;
&lt;p&gt;The general idea of an iMHF attack is that it has two phases: light phase and balloon phase.&lt;/p&gt;
&lt;div class="section" id="light-phase"&gt;
&lt;h3&gt;Light Phase&lt;/h3&gt;
&lt;p&gt;In the light phase the algorithm races through the DAG discarding as many pebbles as possible, essentially performing a breadth first search for the end of the graph, computing nodes in parallel when possible.
Once a node is computed and it isn't immediately needed it is discarded.&lt;/p&gt;
&lt;p&gt;If the DAG were a straight line from beginning to end this would be fairly memory efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="balloon-phase"&gt;
&lt;h3&gt;Balloon Phase&lt;/h3&gt;
&lt;p&gt;In the balloon phase the algorithm has 'hit a wall' and back-computes the nodes it needs to compute the next node whose parent's have already been discarded.
This causes a slow-down.&lt;/p&gt;
&lt;p&gt;An attack described like this has the following complexity:&lt;/p&gt;
&lt;blockquote&gt;
E&lt;sub&gt;R&lt;/sub&gt;(A) = O(en + √(n&lt;sup&gt;3&lt;/sup&gt;d))&lt;/blockquote&gt;
&lt;p&gt;For small values of e and d this results in an attack as:&lt;/p&gt;
&lt;blockquote&gt;
E&lt;sub&gt;R&lt;/sub&gt;(A) = O(n&lt;sup&gt;2&lt;/sup&gt;) for e,d = O(n)&lt;/blockquote&gt;
&lt;p&gt;Preventing against this type of attack is where much of the research into iMHF's is focused.
An ideal iMHF DAG minimize the disparity between the attackers compute time and the &amp;quot;good guy's&amp;quot; compute time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This has been a rough overview of Memory Hard functions, how they work, and how variations of MHFs differ.&lt;/p&gt;
&lt;p&gt;MHFs are functions which remove the advantage that adversaries have to crack passwords by depending heavily on memory.
This reduces the adversary's advantage if they have an ASIC or GPU processor(s) to brute-force a password crack and ought to make it very difficult (ideally &lt;em&gt;impractical&lt;/em&gt;) for adversaries to crack a password hashed with an MHF.&lt;/p&gt;
&lt;p&gt;Some existing MHFs, like scrypt, are vulnerable to side-channel attacks so iMHFs have been theorized which do not have a predictable runtime and so are not vulnerable to side-channel attacks.
No iMHFs exist yet, however many functions have been developed with get &lt;em&gt;close&lt;/em&gt; and offer many of the benefits of iMFHs.
Some of these include Argon2i, Catena, and Balloon hashing, which we did not cover in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="annotated-bibliography"&gt;
&lt;h2&gt;Annotated Bibliography&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Conference Presentations by Jeremiah Blocki &lt;a class="footnote-reference" href="#id11" id="id5"&gt;[1]&lt;/a&gt; &lt;a class="footnote-reference" href="#id12" id="id6"&gt;[2]&lt;/a&gt; &lt;a class="footnote-reference" href="#id13" id="id7"&gt;[3]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;The video presentations online by Jeremiah were a very important resource for getting a grasp on what MHFs are, and more specifically what iMHFS and how they worked.
The three videos cited in this post cover largely the same content and present the material, including the problem, naive solution, MHF solution, iMFH solution, and possible attacks against iMHFs in about 30 minutes.
I like to think I'm pretty good at public speaking, but this material was very complicated and presented in a very digestible format.&lt;/p&gt;
&lt;p class="last"&gt;I cannot stress enough how useful these videos were.
I learned an incredible amount from these videos and referenced them for the majority of this content.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Strict Memory Hard Hashing Functions &lt;a class="footnote-reference" href="#id14" id="id8"&gt;[4]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This paper was very short and presented some essential knowledge to discuss the differences between MHFs and iMHFs.
I didn't directly use or reference this content, however it did present an easily understandable academic definition and comparison of iMHF compared to MHFs.&lt;/dd&gt;
&lt;dt&gt;Practical Graphs for Optimal Side-Channel Resistant Memory-Hard Functions &lt;a class="footnote-reference" href="#id15" id="id9"&gt;[5]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This paper was used in the writing of this post, however it was very long and dense, so it was never directly cited.&lt;/dd&gt;
&lt;dt&gt;scrypt: A new key derivation function &lt;a class="footnote-reference" href="#id16" id="id10"&gt;[6]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;This was the soul reference for the scrypt section of this post.
There is an academic paper published too, but the slides were simple and presented all of the same knowledge (I think) sans any proofs.&lt;/p&gt;
&lt;p class="last"&gt;If I feel an existential hole in my heart I might read the proofs, but in the interest of time I chose not to right now.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="errata"&gt;
&lt;h2&gt;Errata&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Efficiently Computing Data Independent Memory Hard Functions (Video)
Joël Alwen and Jeremiah Blocki, Crypto 2016,
September 26, 2016,
&lt;a class="reference external" href="https://youtu.be/ujpvPtn_N5Y"&gt;https://youtu.be/ujpvPtn_N5Y&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Towards a Theory of Data-Independent Memory Hard Functions (Video),
Jeremiah Blocki with Joel Alwen, Krzysztof Pietrzak 2017,
Real World Crypto conference,
February 1, 2017,
&lt;a class="reference external" href="https://youtu.be/YtfVLzUkwME"&gt;https://youtu.be/YtfVLzUkwME&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Memory Hard Functions and Password Hashings (Video),
CERIAS Symposium 2017 - TechTalk,
Jeremiah M. Blocki - Assistant Professor, Computer Science - Purdue University,
May 1, 2017,
&lt;a class="reference external" href="https://youtu.be/9yX4v89m5oo"&gt;https://youtu.be/9yX4v89m5oo&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Strict Memory Hard Hashing Functions,
Sergio Demian Lerner,
(Preliminary v0.3, 01-19-14),
&lt;a class="reference external" href="http://www.hashcash.org/papers/memohash.pdf"&gt;http://www.hashcash.org/papers/memohash.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Practical Graphs for Optimal Side-Channel Resistant Memory-Hard Functions
Joel Alwen, Jeremiah Blocki, Ben Harsha
IACR Cryptography ePrint Archive, 2017,
&lt;a class="reference external" href="https://eprint.iacr.org/2017/443.pdf"&gt;https://eprint.iacr.org/2017/443.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id10"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;scrypt: A new key derivation function (variable subtitles)
Colin Percival,
May 9, 2009,
&lt;a class="reference external" href="http://www.tarsnap.com/scrypt/scrypt-slides.pdf"&gt;http://www.tarsnap.com/scrypt/scrypt-slides.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yet.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id18" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Bijection: A function which creates a 1-to-1 relationship between inputs and outputs.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id19" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[9]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://haveibeenpwned.com/PwnedWebsites"&gt;https://haveibeenpwned.com/PwnedWebsites&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id20" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[10]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Antminer &amp;quot;Bitcoin Miner&amp;quot; &lt;a class="reference external" href="http://a.co/2E20HW8"&gt;http://a.co/2E20HW8&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Crytpo"></category><category term="Independent Crypto"></category></entry><entry><title>Elliptic Curve Cryptography</title><link href="/crypto/elliptic-curve-cryptography" rel="alternate"></link><published>2017-10-04T00:00:00-07:00</published><updated>2017-10-04T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2017-10-04:/crypto/elliptic-curve-cryptography</id><summary type="html">&lt;p class="first last"&gt;The low-down on Elliptic Curve Cryptography.&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is a part of a series of blog posts I wrote for an Independent Study on cryptography at Oregon State University.
To read all of the posts, check out the 'Independent Crypto' tag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;This post is jumps around a bit.
We'll start by showing how Elliptic Curve Cryptography works at a high level, then create a list of questions about how/why Elliptic Curve Cryptography works and how it is useful to cryptogrpahy.
Once those questions are answered we will end with a recap.
Hopefully we will zero in on what Elliptic Curves are and what Elliptic Curve Cryptography is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diffie-hellman-key-exchange"&gt;
&lt;h2&gt;Diffie-Hellman key exchange ++&lt;/h2&gt;
&lt;p&gt;You find yourself day-dreaming during a walk around campus wondering if there is an alternative cryptography system to the very popular RSA.
You want something that has improved computational and network efficiency.
You want smaller keys that are harder to crack.
Could such a system exist?&lt;/p&gt;
&lt;p&gt;You share this fantasy with a friend, you share all of your crypto fantasies with this friend, and they tell you that Elliptic Curve Cryptography is promising and it perfectly fits your needs.
... but how does it work?&lt;/p&gt;
&lt;div class="section" id="diffie-hellman-key-exchange-a-recap"&gt;
&lt;h3&gt;Diffie-Hellman key exchange (a recap)&lt;/h3&gt;
&lt;p&gt;To create a useful crypto out of Elliptic Curves we need to implement &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"&gt;Diffie–Hellman key exchange&lt;/a&gt; (DHKE).
Once we have DHKE we more or less have a valid crypto system which we can build upon to encrypt and decrypt private information.&lt;/p&gt;
&lt;p&gt;The reader (you) is assumed to be familiar with DHKE.
While DHKE is fairly simple, it is not unforgettable, so here is quick reminder:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Alice and Bob agree on a public modulus (p) and a base (g).&lt;/li&gt;
&lt;li&gt;Alice and Bob both choose secret integers (a and b).&lt;/li&gt;
&lt;li&gt;Alice sends Bob g&lt;sup&gt;a&lt;/sup&gt; (mod p) (we call it A) and Bob sends Alice g&lt;sup&gt;b&lt;/sup&gt; (mod p) (we call it B).&lt;/li&gt;
&lt;li&gt;Alice computes B&lt;sup&gt;a&lt;/sup&gt; (mod p) and Bob computes A&lt;sup&gt;b&lt;/sup&gt; (mod p). These are equivalent (mod p). This is Alice and Bob's shared secret.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How do we use Elliptic Curves get a similar 'shared secret'?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="elliptic-diffie-hellman-key-exchange"&gt;
&lt;h3&gt;Elliptic Diffie-Hellman key exchange&lt;/h3&gt;
&lt;p&gt;At a (very) high level the algorithm is as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Alice and Bob agree to use a given Elliptic Curve over a finite field, E(F&lt;sub&gt;p&lt;/sub&gt;), and a public point P ∈ E(F&lt;sub&gt;p&lt;/sub&gt;).&lt;/li&gt;
&lt;li&gt;Alice chooses a secret integer n&lt;sub&gt;A&lt;/sub&gt; and Bob choose secret integers n&lt;sub&gt;B&lt;/sub&gt;.&lt;/li&gt;
&lt;li&gt;Alice computes Q&lt;sub&gt;A&lt;/sub&gt; = n&lt;sub&gt;A&lt;/sub&gt;P and Bob computes Q&lt;sub&gt;B&lt;/sub&gt; = n&lt;sub&gt;B&lt;/sub&gt;P. These are the &amp;quot;Public Keys&amp;quot;&lt;/li&gt;
&lt;li&gt;Alice sends Bob her public key, Bob send Alice his public key.&lt;/li&gt;
&lt;li&gt;Alice computes n&lt;sub&gt;A&lt;/sub&gt;Q&lt;sub&gt;B&lt;/sub&gt;, Bob computes n&lt;sub&gt;B&lt;/sub&gt;Q&lt;sub&gt;A&lt;/sub&gt;.&lt;/li&gt;
&lt;li&gt;The shared secret value is n&lt;sub&gt;A&lt;/sub&gt;Q&lt;sub&gt;B&lt;/sub&gt; = n&lt;sub&gt;A&lt;/sub&gt;(n&lt;sub&gt;B&lt;/sub&gt;P) = n&lt;sub&gt;B&lt;/sub&gt;(n&lt;sub&gt;A&lt;/sub&gt;P) = n&lt;sub&gt;B&lt;/sub&gt;Q&lt;sub&gt;A&lt;/sub&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It looks similar to the given DHKE algorithm, and seems promising, but... how does it work?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ecs-and-ecc-q-a"&gt;
&lt;h2&gt;Elliptic Curves and Elliptic Curve Cryptography Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;To answer that we are going to answer the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What are Elliptic Curves?&lt;/li&gt;
&lt;li&gt;What does an Elliptic Curve look like?&lt;/li&gt;
&lt;li&gt;What does it mean to multiply P by n?&lt;/li&gt;
&lt;li&gt;What about a finite field?&lt;/li&gt;
&lt;li&gt;How are the pubic keys used? Why are these a shared secret?&lt;/li&gt;
&lt;li&gt;Why is Elliptic Curve Cryptography useful?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="what-are-ecs"&gt;
&lt;h3&gt;What are Elliptic Curves?&lt;/h3&gt;
&lt;p&gt;A Elliptic Curve is the set of solutions to an equation of the form&lt;/p&gt;
&lt;blockquote&gt;
Y&lt;sup&gt;2&lt;/sup&gt; = X&lt;sup&gt;3&lt;/sup&gt; + AX + B&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="what-does-an-ec-look-like"&gt;
&lt;h3&gt;What does an Elliptic Curve look like?&lt;/h3&gt;
&lt;p&gt;Two examples of Elliptic Curves are as follows:&lt;/p&gt;
&lt;img alt="A simple Elliptic Curve" class="align-center" src="/assets/images/independent-crypto/ecc-1.png" style="width: 100%;" /&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;img alt="Another simple Elliptic Curve" class="align-center" src="/assets/images/independent-crypto/ecc-2.png" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-p-and-q"&gt;
&lt;h3&gt;Adding P and Q&lt;/h3&gt;
&lt;p&gt;Multiplication is &lt;em&gt;just&lt;/em&gt; repeated addition.
Oh shoot we haven't said how &amp;quot;addition&amp;quot; happens on an Elliptic Curve.
Let's do that.&lt;/p&gt;
&lt;p&gt;Addition is the process of drawing a line L between P and Q.
The third point that the line L intersects is point R.
When R is reflected over the X axis we call this R'.
The result of P ⊕ Q (read: P 'plus' Q) is R'.&lt;/p&gt;
&lt;p&gt;We can enumerate these steps as:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Take two points P and Q on the Elliptic Curve E.&lt;/li&gt;
&lt;li&gt;Draw a line L which passes through these two points.&lt;/li&gt;
&lt;li&gt;L should ultimately pass through &lt;em&gt;three&lt;/em&gt; points: P, Q, and R.&lt;/li&gt;
&lt;li&gt;Multiply the Y coordinate of R by -1, this is R'.&lt;/li&gt;
&lt;li&gt;P ⊕ Q = R'.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's a visualization of straight forward addition.&lt;/p&gt;
&lt;img alt="Annotated curve E with points P, Q, R, R' and line L labeled." class="align-center" src="/assets/images/independent-crypto/ecc-3.png" style="width: 100%;" /&gt;
&lt;p&gt;You might think &amp;quot;What happens when P is tangent a point on E?&amp;quot;
In that case we say P = Q, so R = P ⊕ P, or R = 2P.
It looks like this:&lt;/p&gt;
&lt;img alt="Annotated curve E with points P, R, R' and line L labeled. P is tangent to the curve." class="align-center" src="/assets/images/independent-crypto/ecc-4.png" style="width: 100%;" /&gt;
&lt;p&gt;Wait a second, 2P looks like n*P which was one of the questions we had!
Don't worry, we'll get there soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="that-thing-about-finite-fields"&gt;
&lt;h3&gt;That thing about Finite Fields&lt;/h3&gt;
&lt;p&gt;In practice we bound the curve over a field F&lt;sub&gt;p&lt;/sub&gt; with p ≥ 3.
We input {1, 2, ..., p-1} as the value of X in E and select the results which are squares modulo 13.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;E : Y&lt;sup&gt;2&lt;/sup&gt; = X&lt;sup&gt;3&lt;/sup&gt; + 3X + 8 over F&lt;sub&gt;13&lt;/sub&gt;&lt;/div&gt;
&lt;div class="line"&gt;X = 1&lt;/div&gt;
&lt;div class="line"&gt;1 + 3 + 8 = 12&lt;/div&gt;
&lt;div class="line"&gt;12 is a square (mod 13)&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Repeating this gives us the set of points in E(F&lt;sub&gt;13&lt;/sub&gt;):&lt;/p&gt;
&lt;blockquote&gt;
E(F&lt;sub&gt;13&lt;/sub&gt;) = {O, (1,5), (1,8), (2,3), (2,10), (9,6), (9,7), (12,2), (12,11)}&lt;/blockquote&gt;
&lt;p&gt;In practice this bounds the graph of E and forces us to draw a strange modulus graph shown below:&lt;/p&gt;
&lt;img alt="Elliptic Curves illustrated where each point is a valid coordinate. There are no curves." class="align-center" src="/assets/images/independent-crypto/ecc-5.gif" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;Image source: A (relatively easy to understand) primer on elliptic curve cryptography&lt;/em&gt; &lt;a class="footnote-reference" href="#id7" id="id1"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multiplying-p-by-an-integer-with-the-double-and-add-algorithm"&gt;
&lt;h3&gt;Multiplying P by an integer with The Double-and-Add Algorithm&lt;/h3&gt;
&lt;p&gt;To &amp;quot;multiply&amp;quot; P by n we need to use the Double-and-Add Algorithm.
Here's how that looks:&lt;/p&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;Take a point P ∈ E(F&lt;sub&gt;p&lt;/sub&gt;) and an integer n ≥ 1.&lt;/li&gt;
&lt;li&gt;Set Q = P and R = O.&lt;/li&gt;
&lt;li&gt;Loop while n &amp;gt; 0.&lt;ol class="arabic" start="3"&gt;
&lt;li&gt;If n ≡ 1 (mod 2), set R = R + Q&lt;/li&gt;
&lt;li&gt;Set Q = 2Q and n = floor(n/2).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Return the point R, which equals nP.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Recall that the algorithm for finding point 2Q was covered in the above section&lt;/em&gt; &lt;a class="reference internal" href="#adding-p-and-q"&gt;Adding P and Q&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-the-shared-secret"&gt;
&lt;h3&gt;What &lt;em&gt;is&lt;/em&gt; the shared secret?&lt;/h3&gt;
&lt;p&gt;Let's review.
The shared secret is the second point n&lt;sub&gt;A&lt;/sub&gt;n&lt;sub&gt;B&lt;/sub&gt;P, which is a point on the public curve E(F&lt;sub&gt;p&lt;/sub&gt;).
This point can be used to encrypt information as it is a shared secret (necessary for DHKE).
How exactly it is used to encrypt information is left as an exercise for readers in charge of cryptographic implementation standards.&lt;/p&gt;
&lt;p&gt;The reason this is a shared secret is because an adversary needs to solve the following Elliptic Curve Discrete Logarithm Problem&lt;/p&gt;
&lt;blockquote&gt;
nP = Q&lt;sub&gt;A&lt;/sub&gt;&lt;/blockquote&gt;
&lt;p&gt;Which is a very hard problem, as mentioned in the next section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="an-example-of-ecc"&gt;
&lt;h2&gt;An example of Elliptic Curve Cryptography&lt;/h2&gt;
&lt;p&gt;This sounds good in theory, but let's give it a test drive.&lt;/p&gt;
&lt;p&gt;Alice and Bob are given the following shared information:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;p = 3851, E: Y&lt;sup&gt;2&lt;/sup&gt; = X&lt;sup&gt;3&lt;/sup&gt; + 324X + 1287, P = (920, 303) ∈ E(F&lt;sub&gt;3851&lt;/sub&gt;)&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alice and Bob choose their secret integers:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;n&lt;sub&gt;A&lt;/sub&gt; = 1194&lt;/div&gt;
&lt;div class="line"&gt;n&lt;sub&gt;B&lt;/sub&gt; = 1759&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alice and Bob then compute their public keys:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Alice computes Q&lt;sub&gt;A&lt;/sub&gt; = 1194P = (2067, 2178) ∈ E(F&lt;sub&gt;3851&lt;/sub&gt;)&lt;/div&gt;
&lt;div class="line"&gt;Bob computes Q&lt;sub&gt;B&lt;/sub&gt; = 1759P = (3684, 3125) ∈ E(F&lt;sub&gt;3851&lt;/sub&gt;)&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Remember that we use the Double-and-Add algorithm to compute Q&lt;sub&gt;A&lt;/sub&gt; and Q&lt;sub&gt;B&lt;/sub&gt;.
This invloves iteratively computing the tangent line at a point, the intersection with E at that intersection, and reflecting that point over the X axis.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Alice and Bob trade public keys and calculate their shared secret:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Alice computes n&lt;sub&gt;A&lt;/sub&gt;Q&lt;sub&gt;B&lt;/sub&gt; = 1194(3684, 3125) = (3347, 1242) ∈ E(F&lt;sub&gt;3851&lt;/sub&gt;)&lt;/div&gt;
&lt;div class="line"&gt;Bob computes n&lt;sub&gt;B&lt;/sub&gt;Q&lt;sub&gt;A&lt;/sub&gt; = 1759(2067, 2178) = (3347, 1242) ∈ E(F&lt;sub&gt;3851&lt;/sub&gt;)&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Therefore (3347, 1242) is the shared secret.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-ecc-is-useful"&gt;
&lt;h2&gt;Why Elliptic Curve Cryptography is useful&lt;/h2&gt;
&lt;p&gt;While it is harder than simply multiplying mod p for Alice to compute her shared secret (which is the case in RSA), it is &lt;em&gt;even harder&lt;/em&gt; for a malicious actor to figure out that same shared secret.
This point is best put by the source &lt;em&gt;A (relatively easy to understand) primer on elliptic curve cryptography&lt;/em&gt; &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
You can compute how much energy is needed to break a cryptographic algorithm and compare that with how much water that energy could boil.
This is a kind of a cryptographic carbon footprint.
By this measure, breaking a 228-bit RSA key requires less energy than it takes to boil a teaspoon of water.
Comparatively, breaking a 228-bit elliptic curve key requires enough energy to boil all the water on earth.
For this level of security with RSA, you'd need a key with 2,380 bits.&lt;/blockquote&gt;
&lt;p&gt;So an Elliptic Curve Cryptography key can be one magnitude smaller in size and offer the same level of security as RSA.&lt;/p&gt;
&lt;p&gt;We can put this in more concrete terms: the fastest algorithm to solve the Elliptic Curve Discrete Logarithm Problem, which Elliptic DHKE security is built upon, in E(F&lt;sub&gt;p&lt;/sub&gt;) takes √p steps.
This is much more difficult than the 'vanilla' Discrete Logarithm Problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes-and-edge-cases"&gt;
&lt;h2&gt;Notes and edge cases&lt;/h2&gt;
&lt;p&gt;Elliptic Curve Cryptography, much like the rest of Cryptography, deals heavily with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Number_theory"&gt;Number Theory&lt;/a&gt;.
Despite my best efforts most of the nitty-gritty Number Theory in this topic went &lt;em&gt;way&lt;/em&gt; over my head.
As a result I didn't include much of that kind of stuff and instead focused on the things I &lt;em&gt;could&lt;/em&gt; share and sound smart about.&lt;/p&gt;
&lt;p&gt;Here are some other things about Elliptic Curve Cryptography I didn't cover that deserve more air time:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Elliptic Curve chosen must meet a special set of criteria; any old Elliptic Curve won't do. This was the cause of a cryptographic breach with Elliptic Curve Cryptography a few years ago that triggered doubts about Elliptic Curve Cryptography as a whole.&lt;/li&gt;
&lt;li&gt;Some primes cause solving the Elliptic Curve Discrete Logarithm Problem for E(F&lt;sub&gt;p&lt;/sub&gt;) to be easier than the Discrete Logarithm Problem, these primes can be computed and should be avoided.&lt;/li&gt;
&lt;li&gt;If you want a deeper understanding of the theory of Elliptic Curves (addition of points on these curves, etc) you should look into &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Algebraic_geometry"&gt;algebraic geometry&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="annotated-bibliography"&gt;
&lt;h2&gt;Annotated Bibliography&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;An Introduction to Mathematical Cryptography &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[1]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;The chapter in this textbook on Elliptic Curves in Cryptography established the bedrock understanding of the topic of Elliptic Curve Cryptography.
This ended up being the main resource for this post and offered a great median between &amp;quot;Regular Joe's guide to Elliptic Curve Cryptography&amp;quot; and &amp;quot;The graduate student's guide to Elliptic Curve Cryptography&amp;quot; which were my other two resources.
It was also the source of all examples, which were very useful in gaining an intuitive understanding of the material.&lt;/dd&gt;
&lt;dt&gt;A (relatively easy to understand) primer on elliptic curve cryptography &lt;a class="footnote-reference" href="#id7" id="id4"&gt;[2]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This blog post was my &lt;em&gt;second&lt;/em&gt; source and did a good job of taking the proofs and dense material in Intro to Math Cyrpto (above) and boiled it down to the important stuff.
It drastically improved further readings of the original textbook and provided that great animated image of adding P ⊕ Q in E(F&lt;sub&gt;p&lt;/sub&gt;).
It didn't cover any of the Number Theory, but explained the historical context of Elliptic Curve Cryptography, roughly how/why it works, and did a good job of describing it's impact in our world today.&lt;/dd&gt;
&lt;dt&gt;Cryptography: An Introduction &lt;a class="footnote-reference" href="#id8" id="id5"&gt;[3]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;This wasn't a resource I actually &lt;em&gt;used&lt;/em&gt;, but I did read the chapter on Elliptic Curve Cryptography (chapter 2!).
It gave me an appreciation for the previous two sources and some exposure to the other ways Elliptic Curves can be taught.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="errata"&gt;
&lt;h2&gt;Errata&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;An Introduction to Mathematical Cryptography, 2008,
Jeffery Hoffstein, Jill Pipher, Joseph H. Silverman,
Springer Publishing, ISBN 978-0-387-77993-5&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;, &lt;a class="fn-backref" href="#id4"&gt;3&lt;/a&gt;)&lt;/em&gt; A (relatively easy to understand) primer on elliptic curve cryptography,
October 24, 2013, Nick Sullivan,
Cloudflare blog, reposted on Ars Technica,
&lt;a class="reference external" href="https://arstechnica.com/information-technology/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/"&gt;https://arstechnica.com/information-technology/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Cryptography: An Introduction
(Third Edition), May 19, 2016, Nigel Smart,
&lt;a class="reference external" href="https://www.cs.umd.edu/~waa/414-F11/IntroToCrypto.pdf"&gt;https://www.cs.umd.edu/~waa/414-F11/IntroToCrypto.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- ∀ --&gt;
&lt;/div&gt;
</content><category term="Crytpo"></category><category term="Independent Crypto"></category></entry><entry><title>Independent Crypto Course syllabus</title><link href="/crypto/independent-crypto-course-syllabus" rel="alternate"></link><published>2017-07-10T00:00:00-07:00</published><updated>2017-07-10T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2017-07-10:/crypto/independent-crypto-course-syllabus</id><summary type="html">&lt;p class="first last"&gt;Independent Crypto landing page.&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is a part of a series of blog posts I wrote for an Independent Study on cryptography at Oregon State University.
To read all of the posts, check out the 'Independent Crypto' tag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;This syllabus was written by an Oregon State University undergraduate student and not by an Oregon State University staff member.
This should explain any irregularities in the structure and substance of the document.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The purpose of this course (&amp;quot;Independent Crypto&amp;quot;) is to give students an opportunity to dive deeper into interesting topics of Cryptography.&lt;/p&gt;
&lt;p&gt;By the end of this course you should &lt;em&gt;grok&lt;/em&gt; the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Elliptic curve cryptography&lt;/li&gt;
&lt;li&gt;Memory hard functions&lt;/li&gt;
&lt;li&gt;Garbled circuits&lt;/li&gt;
&lt;li&gt;An topic of your choosing (get creative!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these should take about 40 hours of work to complete.
An overview of what that means is outlined below.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This course is designed to be a 4 credit hour independent study.&lt;/p&gt;
&lt;p class="last"&gt;As is standard Oregon State University policy, this corresponds with 160 hours of work over a 10 week period.
Plan accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Each topic ought to take about 40 hours of work to complete over the course of a 10 week term.
If you schedule your time well this will be a piece of cake at just 16 hours per week.
That's 2.28 hours per day, 3.2 hours per week-day, or 16 hours the day before your check-in is due!&lt;/p&gt;
&lt;p&gt;The basic structure is as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Research a topic. Read papers, watch informative videos, ask questions and learn as much as you can about a given topic.&lt;/li&gt;
&lt;li&gt;Maintain an &lt;em&gt;annotated bibliography&lt;/em&gt;. This should include materials found while studying a given topic, a summary of each of the materials, and a final summary of the topic as a whole.&lt;/li&gt;
&lt;li&gt;Meet weekly with the mentoring professor.&lt;/li&gt;
&lt;li&gt;Repeat.&lt;/li&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;li&gt;Profit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The end goal, in addition to learning about a breadth of topics in modern security, is to produce an annotated bibliography.
This will exercise the student's ability to read and process academic topics, journals, and videos.&lt;/p&gt;
&lt;p&gt;Of course if you are particularly passionate about a topic you are encouraged to go further: implementing things of interest, investigating new questions, and generally 'digging deeper' as you gain interest in different topics.&lt;/p&gt;
&lt;p&gt;The following topics do not &lt;em&gt;need&lt;/em&gt; to be completed in order, however doing so will result in an optimal 'difficulty curve' as the kids say.
The kids do still say that right?&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Included are a few resources grabbed in a quick internet search.
These are meant to be starting places for each topic, generating questions and providing external resources.
You will need to find additional resources for each topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="elliptic-curve-cryptography"&gt;
&lt;h2&gt;Elliptic Curve Cryptography&lt;/h2&gt;
&lt;p&gt;Weeks 0-2 will be dedicated to Elliptic Curve Cryptography.&lt;/p&gt;
&lt;div class="section" id="kickoff-resources"&gt;
&lt;h3&gt;Kickoff Resources&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A (relatively easy to understand) primer on Elliptic Curve Cryptography: &lt;a class="reference external" href="https://arstechnica.com/security/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/"&gt;https://arstechnica.com/security/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elliptic Curve Cryptography in Practice: &lt;a class="reference external" href="https://eprint.iacr.org/2013/734.pdf"&gt;https://eprint.iacr.org/2013/734.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elliptic Curve Cryptography, a gentle introduction: &lt;a class="reference external" href="http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/"&gt;http://andrea.corbellini.name/2015/05/17/elliptic-curve-cryptography-a-gentle-introduction/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="kickoff-questions"&gt;
&lt;h3&gt;Kickoff Questions&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What are elliptic curves?&lt;/li&gt;
&lt;li&gt;How do elliptic curves relate to cryptography?&lt;/li&gt;
&lt;li&gt;How are Elliptic Curve Cryptography functions different from similar ones like RSA?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="memory-hard-functions"&gt;
&lt;h2&gt;Memory-hard functions&lt;/h2&gt;
&lt;p&gt;Weeks 3 and 4 of the course should be dedicated to the topic of Memory Hard Functions.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Kickoff Resources&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Memory-hard functions and tradeoff cryptanalysis with applications to password hashing, cryptocurrencies, and white-box cryptography: &lt;a class="reference external" href="https://www.cryptolux.org/images/d/d1/Tradeoff-slides.pdf"&gt;https://www.cryptolux.org/images/d/d1/Tradeoff-slides.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Strict Memory Hard Hashing Functions: &lt;a class="reference external" href="http://www.hashcash.org/papers/memohash.pdf"&gt;http://www.hashcash.org/papers/memohash.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Kickoff Questions&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What are Memory-hard functions?&lt;/li&gt;
&lt;li&gt;What purposes are Memory-hard functions used for?&lt;/li&gt;
&lt;li&gt;What are some examples of Memory-hard functions and how do they work?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="garbled-circuits"&gt;
&lt;h2&gt;Garbled circuits&lt;/h2&gt;
&lt;p&gt;Weeks 5-7 should be dedicated to garbled circuits.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Kickoff Resources&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Garbled Circuits: &lt;a class="reference external" href="https://youtu.be/TxCu1L_tzlU"&gt;https://youtu.be/TxCu1L_tzlU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Foundations of Garbled Circuits: &lt;a class="reference external" href="https://eprint.iacr.org/2012/265.pdf"&gt;https://eprint.iacr.org/2012/265.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Faster Secure Two-Party Computation Using Garbled Circuits: &lt;a class="reference external" href="https://www.usenix.org/legacy/event/sec11/tech/full_papers/Huang.pdf"&gt;https://www.usenix.org/legacy/event/sec11/tech/full_papers/Huang.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SFE: Yao’s Garbled Circuit: &lt;a class="reference external" href="https://courses.engr.illinois.edu/cs598man/fa2009/slides/ac-f09-lect16-yao.pdf"&gt;https://courses.engr.illinois.edu/cs598man/fa2009/slides/ac-f09-lect16-yao.pdf&lt;/a&gt; (bonus points if you find the talk for these slides).&lt;/li&gt;
&lt;li&gt;Garbled Circuts, Cryptowiki, &lt;a class="reference external" href="http://cryptowiki.net/index.php?title=Garbled_circuits"&gt;http://cryptowiki.net/index.php?title=Garbled_circuits&lt;/a&gt; (probably don't cite this one in a paper)&lt;/li&gt;
&lt;li&gt;Amortizing Garbled Circuits: &lt;a class="reference external" href="https://eprint.iacr.org/2015/081.pdf"&gt;https://eprint.iacr.org/2015/081.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- - A Survey of Garbled Circuit Techniques, Ben Terner (I have a copy of this PDF if you want) --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="independent-study"&gt;
&lt;h2&gt;Independent study&lt;/h2&gt;
&lt;p&gt;In the last seven or so weeks you've learned a lot.
You've read papers, watch informative lectures, and had insightful conversations with peers and mentors.
Many of these probably sparked your attention in a particular topic.
Use these last few weeks to investigate one of those sparks that you've been itching to learn more about.&lt;/p&gt;
&lt;p&gt;If you truly feel uninspired you can use this time to learn about Private Set Intersection.&lt;/p&gt;
&lt;div class="section" id="kickoff-resources-for-private-set-intersection"&gt;
&lt;h3&gt;Kickoff Resources for Private Set Intersection&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BIU Winter School on Cryptography on Youtube.&lt;/li&gt;
&lt;li&gt;CSCI E-127, Introduction to Cryptography &lt;a class="reference external" href="http://cm.dce.harvard.edu/2014/01/14301/publicationListing.shtml"&gt;http://cm.dce.harvard.edu/2014/01/14301/publicationListing.shtml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="generic-kickoff-questions"&gt;
&lt;h3&gt;Generic Kickoff Questions&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What topic are you investigating?&lt;/li&gt;
&lt;li&gt;How does this relate to Cryptography?&lt;/li&gt;
&lt;li&gt;How would you explain this topic to your friends or parents?&lt;/li&gt;
&lt;li&gt;Why is this topic important?&lt;/li&gt;
&lt;li&gt;What interests you about this topic?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-resources"&gt;
&lt;h2&gt;Additional resources&lt;/h2&gt;
&lt;p&gt;OSU Professor &lt;a class="reference external" href="http://web.engr.oregonstate.edu/~rosulekm/"&gt;Mike Rosulek&lt;/a&gt; volunteered the following additional resources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Scrypt is maximally memory-hard, &lt;a class="reference external" href="http://www.cs.bu.edu/fac/reyzin/papers/BostonCryptoDayTalk-Leo.pptx"&gt;http://www.cs.bu.edu/fac/reyzin/papers/BostonCryptoDayTalk-Leo.pptx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Practical Graphs for Optimal Side-Channel Resistant Memory-Hard Functions, &lt;a class="reference external" href="https://eprint.iacr.org/2017/443.pdf"&gt;https://eprint.iacr.org/2017/443.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Efficiently Computing Data Independent Memory Hard Functions, &lt;a class="reference external" href="https://youtu.be/ujpvPtn_N5Y"&gt;https://youtu.be/ujpvPtn_N5Y&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Memory hard Functions and Password Hashing, &lt;a class="reference external" href="https://youtu.be/9yX4v89m5oo"&gt;https://youtu.be/9yX4v89m5oo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Towards a Theory of Data-Independent Memory Hard Functions, &lt;a class="reference external" href="https://youtu.be/YtfVLzUkwME"&gt;https://youtu.be/YtfVLzUkwME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Depth-Robust Graphs and Their Cumulative Memory Complexity, &lt;a class="reference external" href="https://eprint.iacr.org/2016/875.pdf"&gt;https://eprint.iacr.org/2016/875.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Practical Garbled Circuit Optimizations, &lt;a class="reference external" href="http://web.engr.oregonstate.edu/~rosulekm/pubs/gc-survey-talk.pdf"&gt;http://web.engr.oregonstate.edu/~rosulekm/pubs/gc-survey-talk.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pratical Garbled Circuit Optimizations, &lt;a class="reference external" href="https://youtu.be/FTxh908u9y8"&gt;https://youtu.be/FTxh908u9y8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cache-timing attacks on AES, &lt;a class="reference external" href="http://cr.yp.to/antiforgery/cachetiming-20050414.pdf"&gt;http://cr.yp.to/antiforgery/cachetiming-20050414.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lucky Thirteen attack on TLS CBC, &lt;a class="reference external" href="https://www.imperialviolet.org/2013/02/04/luckythirteen.html"&gt;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Crytpo"></category><category term="Independent Crypto"></category></entry><entry><title>Deploying Buildbot on Kubernetes</title><link href="/tech/buildbot-on-kubernetes" rel="alternate"></link><published>2016-12-12T00:00:00-08:00</published><updated>2016-12-12T00:00:00-08:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-12-12:/tech/buildbot-on-kubernetes</id><summary type="html">&lt;p class="first last"&gt;An adventure where we learn [Kubernetes] by doing [a very straight forward project]; documenting every success, failure, and quip along the way.&lt;/p&gt;
</summary><content type="html">&lt;hr class="docutils" /&gt;
&lt;blockquote&gt;
&lt;strong&gt;TLDR:&lt;/strong&gt; If you just want to see the end-result of this post, the results can be found at this GitHub Repository: &lt;a class="reference external" href="https://github.com/ElijahCaine/buildbot-on-kubernetes"&gt;https://github.com/ElijahCaine/buildbot-on-kubernetes&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="section" id="preamble"&gt;
&lt;h2&gt;Preamble&lt;/h2&gt;
&lt;p&gt;I'm learning Kubernetes (K8s) for work and decided to try my hand at deploying Buildbot with K8s because we all know the universal law discovered made by Science McSmartyPants in the 1758 which stated: &lt;strong&gt;doing cool shit &amp;gt; reading docs&lt;/strong&gt; &lt;a class="citation-reference" href="#docs-should" id="id1"&gt;[docs-should]&lt;/a&gt;.
I would describe K8s and Buildbot, but they each already did that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Buildbot is an open-source framework for automating software build, test, and release processes.&amp;quot;&lt;/p&gt;
&lt;p&gt;- &lt;a class="reference external" href="http://buildbot.net/"&gt;Buildbot.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.&lt;/p&gt;
&lt;p&gt;- &lt;a class="reference external" href="http://kubernetes.io/"&gt;Kubernetes.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;If that still didn't make sense, don't worry you should keep reading.
This is a fun post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; As you read this post keep in mind: &lt;em&gt;it might walk like a tutorial, quack like a tutorial, and even read like a tutorial, but I promise you that it is in fact&lt;/em&gt; &lt;strong&gt;not&lt;/strong&gt; &lt;em&gt;a tutorial.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This post is an adventure.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="squad-goals"&gt;
&lt;h3&gt;Squad Goals&lt;/h3&gt;
&lt;p&gt;Here's a quick rundown of what I want to achieve:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deploy an instance of Buildbot on K8s.&lt;/li&gt;
&lt;li&gt;Have that instance scale it's number of workers automagically depending on the amount of work being asked of it.&lt;/li&gt;
&lt;li&gt;Share all relevant storage between replicated containers (e.g., databases, builds, etc).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="why"&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;I have never deployed Buildbot ever for anything.
I have also not really worked with K8s until starting my recent jorb at &lt;a class="reference external" href="https://coreos.com"&gt;CoreOS&lt;/a&gt;.
Why Buildbot and why K8s?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I have to learn K8s sooner or later for work.&lt;/li&gt;
&lt;li&gt;I want to deploy something a little more complicated than Nginx.
As fun as that is, every K8s tutorial uses that as an example and it's getting &lt;em&gt;oooooold&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Buildbot seems like a good K8s challenge b/c:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last loweralpha"&gt;
&lt;li&gt;It has 3 moving parts (master, worker, database)&lt;/li&gt;
&lt;li&gt;It could benefit from the fancy-dancy auto-scaling features built into K8s (e.g., high workload -&amp;gt; add more workers)&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Anyway, let's get started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-sick-rig"&gt;
&lt;h3&gt;My sick rig&lt;/h3&gt;
&lt;p&gt;I'm using the latest version of K8s and &lt;a class="reference external" href="https://github.com/kubernetes/minikube#minikube"&gt;Minikube&lt;/a&gt;, which is backed by Virtualbox on a 2014 MacBook Pro running OSX.&lt;/p&gt;
&lt;p&gt;Minikube version and associated OS:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ minikube version
minikube version: v0.13.1
$ minikube ssh
...
Boot2Docker version 1.11.1, build master : 901340f - Fri Jul  1 22:52:19 UTC 2016
Docker version 1.11.1, build 5604cbe
docker&amp;#64;minikube:~$
&lt;/pre&gt;
&lt;p&gt;There's some Minikube-specific semantics in this post, but you can probably get by with whatever K8s back-end you want/have lying around.&lt;/p&gt;
&lt;p&gt;Kubernetes version:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl version
Client Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;4&amp;quot;, GitVersion:&amp;quot;v1.4.6&amp;quot;, GitCommit:&amp;quot;e569a27d02001e343cb68086bc06d47804f62af6&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2016-11-12T05:22:15Z&amp;quot;, GoVersion:&amp;quot;go1.7.1&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;darwin/amd64&amp;quot;}
Server Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;4&amp;quot;, GitVersion:&amp;quot;v1.4.6&amp;quot;, GitCommit:&amp;quot;e569a27d02001e343cb68086bc06d47804f62af6&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;1970-01-01T00:00:00Z&amp;quot;, GoVersion:&amp;quot;go1.7.1&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;linux/amd64&amp;quot;}
&lt;/pre&gt;
&lt;p&gt;Between finishing editing and pushing this post the above versions will probably be out of date.
&lt;em&gt;SHRUG&lt;/em&gt;.
What are you gonna do.
Software, amirite?&lt;/p&gt;
&lt;p&gt;Virtualbox version:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ virtualbox --help
Oracle VM VirtualBox Manager 5.1.6
...
&lt;/pre&gt;
&lt;p&gt;OSX Version and hardware:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sw_vers
ProductName:    Mac OS X
ProductVersion: 10.10.5
BuildVersion:   14F1912
$ system_profiler
...
    Hardware Overview:
      Model Name: MacBook Pro
      Model Identifier: MacBookPro11,1
      Processor Name: Intel Core i5
      Processor Speed: 2.6 GHz
      Number of Processors: 1
      Total Number of Cores: 2
      ...
      Memory: 16 GB
      ...
...
&lt;/pre&gt;
&lt;p&gt;The hardware and Virtualbox versions are a little less important, but might as well be included for completeness.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="first-pass"&gt;
&lt;h2&gt;First Pass&lt;/h2&gt;
&lt;p&gt;The Buildbot project is nice enough to provide &lt;a class="reference external" href="https://docs.buildbot.net/current/tutorial/docker.html"&gt;some Buidlbot Docker infrastructure&lt;/a&gt; to start working with.
It uses a &lt;a class="reference external" href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; YAML file to deploy one worker container, one master service, and one PostgreSQL service, each of which is linked together and &lt;em&gt;just works™&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Great!
In theory &lt;a class="citation-reference" href="#theory-vs-practice" id="id2"&gt;[theory-vs-practice]&lt;/a&gt; we can just translate the options in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;docker-compose.yml&lt;/span&gt;&lt;/tt&gt; to K8s options to get a simple cluster up and running.
Which, to clarify, isn't an established &lt;strong&gt;thing&lt;/strong&gt;, it's just a process I'm guessing should work based on the fact that Docker Compose  and K8s are both orchestration tools.
One is &lt;strong&gt;way&lt;/strong&gt; more complicated and robust, but At least &lt;strong&gt;some&lt;/strong&gt; of their features should over-lap in that Venn diagram.&lt;/p&gt;
&lt;p&gt;Once we've got a nieve translated-docker-compose k8s setup running then we can (hopefully) tweak some knobs and get persistent storage and auto-scaling working &lt;a class="citation-reference" href="#id11" id="id3"&gt;[why]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="throw-some-containers-at-the-wall-and-see-what-sticks"&gt;
&lt;h3&gt;Throw some containers at the wall and see what sticks&lt;/h3&gt;
&lt;p&gt;Let's start really basic and just try to get something running with &lt;tt class="docutils literal"&gt;kubectl run&lt;/tt&gt;.
We'll use K8s to deploy a Buildbot &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; container mentioned in that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;docker-compose.yml&lt;/span&gt;&lt;/tt&gt; with translated configuration options from that file.
Remember, we're just mapping a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;docker-compose.yml&lt;/span&gt;&lt;/tt&gt; into a K8s setup to begin.
Nothing fancy, no pre-emptive optimizations, just this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl run master \
    --image=buildbot/buildbot-master:master \
    --env=&amp;quot;BUILDBOT_CONFIG_DIR=config&amp;quot; \
    --env=&amp;quot;BUILDBOT_CONFIG_URL=https://github.com/buildbot/buildbot-docker-example-config/archive/master.tar.gz&amp;quot; \
    --env=&amp;quot;BUILDBOT_WORKER_PORT=9989&amp;quot; \
    --env=&amp;quot;BUILDBOT_WEB_URL=http://localhost:8080/&amp;quot; \
    --env=&amp;quot;BUILDBOT_WEB_PORT=8080&amp;quot; \
    --port=8080
&lt;/pre&gt;
&lt;p&gt;Some reading later and I can tell you that command started a &lt;em&gt;Deployment&lt;/em&gt; of &lt;em&gt;Pods&lt;/em&gt;.
To see if it worked, let's run &lt;tt class="docutils literal"&gt;kubect get pods&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get pods
NAME                               READY     STATUS             RESTARTS   AGE
master-4259088255-afsfk            1/1       Running            1          10s
&lt;/pre&gt;
&lt;p&gt;This looks pretty good...&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get pods
NAME                               READY     STATUS             RESTARTS   AGE
master-4259088255-afsfk            0/1       CrashLoopBackOff   2          1m
&lt;/pre&gt;
&lt;p&gt;... nooo!
The thing was at 1/1 and now it's at 0/1 &lt;strong&gt;and&lt;/strong&gt; it says &lt;strong&gt;CrashLoopBackOff&lt;/strong&gt;.
Numbers going down when they're supposed to stay the same is never a good sign, and crashing is almost never what you want.&lt;/p&gt;
&lt;p&gt;If I've learned &lt;em&gt;anything&lt;/em&gt; about fixing stuff that's broke it's &lt;em&gt;always check the logs&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl logs po/master-4259088255-afsfk
[...]
2016-12-09 22:31:42+0000 [-] Setting up database with URL 'sqlite:'
2016-12-09 22:31:42+0000 [-] The Buildmaster database needs to be upgraded before this version of
[...]
2016-12-09 22:31:42+0000 [-] BuildMaster startup failed
2016-12-09 22:31:42+0000 [-] BuildMaster is stopped
2016-12-09 22:31:42+0000 [-] Main loop terminated.
2016-12-09 22:31:42+0000 [-] Server Shut Down.
&lt;/pre&gt;
&lt;p&gt;Gross, but probably useful. How? Good question:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I saw the word &lt;tt class="docutils literal"&gt;database&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;em&gt;didn't&lt;/em&gt; deploy a database.&lt;/li&gt;
&lt;li&gt;QED let's do that.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="add-one-cup-of-postgres-to-the-mix"&gt;
&lt;h3&gt;Add one cup of Postgres to the mix&lt;/h3&gt;
&lt;p&gt;Just like with the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; container, we're just going to use CLI arguments to get a database running.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl run postgres \
    --image=postgres:9.4\
    --env=&amp;quot;POSTGRES_PASSWORD=change_me&amp;quot; \
    --env=&amp;quot;POSTGRES_USER=buildbot&amp;quot; \
    --env=&amp;quot;POSTGRES_DB=buildbot&amp;quot; \
    --env=&amp;quot;BUILDBOT_DB_URL=postgresql+psycopg2://{POSTGRES_USER}:{POSTGRES_PASSWORD}&amp;#64;db/{POSTGRES_DB}&amp;quot;\
    --port=5432
&lt;/pre&gt;
&lt;p&gt;Cross fingers aaand...&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get pods
NAME                               READY     STATUS             RESTARTS   AGE
master-4259088255-afsfk            0/1       CrashLoopBackOff   6          9m
postgres-2443857112-3ermh          0/1       ContainerCreating  0          15s
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;/me holds breath&lt;/em&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get pods
NAME                               READY     STATUS             RESTARTS   AGE
master-4259088255-afsfk            0/1       CrashLoopBackOff   6          9m
postgres-2443857112-3ermh          1/1       Running            0          54s
&lt;/pre&gt;
&lt;p&gt;Yuss! Wait, for real?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl logs postgres-2443857112-3ermh
[... hey look a bunch of useful Postgres garbage ...]
PostgreSQL init process complete; ready for start up.
[... some more useful Postgres garbage ...]
&lt;/pre&gt;
&lt;p&gt;Good 'nuff.
Now how does this database plug into the master container?&lt;/p&gt;
&lt;p&gt;Well, in the Docker Compose world, containers talked to one-another on a private network with the &lt;tt class="docutils literal"&gt;link&lt;/tt&gt; directive.
There's probably some way to do we do that with K8s right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="welcome-yaml-config-files-to-the-class"&gt;
&lt;h3&gt;Welcome YAML config files to the class&lt;/h3&gt;
&lt;p&gt;Running Command-Line Interface (CLI) commands is fun, but the easiest way to get this system running seems to be with configuration files.
I'm sure I &lt;em&gt;can&lt;/em&gt; use CLI commands to orchestrate this entire project, but... honestly all the tutorials talk about how to do things in YAML so we're doing it in YAML now.&lt;/p&gt;
&lt;p&gt;Some research later it looks like declaring a &lt;a class="reference external" href="http://kubernetes.io/docs/user-guide/pods/"&gt;Pod&lt;/a&gt; is the way to go?
For context, here's where I got the idea from the K8s docs:&lt;/p&gt;
&lt;blockquote&gt;
A pod (as in a pod of whales or pea pod) is a group of one or more containers (such as Docker containers), the shared storage for those containers, and options about how to run the containers.&lt;/blockquote&gt;
&lt;p&gt;Well that sounds &lt;em&gt;roughly&lt;/em&gt; like what we're doing.
I've got some containers, I want them to be able to talk to each other, and they're all logically connected to one another.
Let's go down this rabbit hole.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://wifflegif.com/gifs/272040-alice-in-wonderland-adventure-time-gif"&gt;&lt;img alt="Alice down the rabbit hole..." class="align-center" src="/assets/images/buildbot-on-k8s/alice-down.gif" style="width: 100%;" /&gt;&lt;/a&gt;
&lt;p&gt;Here I have Frankensteined this config &lt;tt class="docutils literal"&gt;buildbot.yaml&lt;/tt&gt; from examples in the configs:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'v1'&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Pod'&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'buildbot'&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'buildbot'&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'master'&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'buildbot/buildbot-master:master'&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;8080&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'BUILDBOT_CONFIG_DIR'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'config'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'BUILDBOT_CONFIG_URL'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://github.com/buildbot/buildbot-docker-example-config/archive/master.tar.gz'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'BUILDBOT_WORKER_PORT'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'9989'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'BUILDBOT_WEB_URL'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'http://localhost:8080/'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'BUILDBOT_WEB_PORT'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'8080'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'POSTGRES_PASSWORD'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'change_me'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'POSTGRES_USER'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'buildbot'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'POSTGRES_DB'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'buildbot'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'BUILDBOT_DB_URL'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'postgresql+psycopg2://{POSTGRES_USER}:{POSTGRES_PASSWORD}&amp;#64;db/{POSTGRES_DB}'&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'postgres'&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'postgres:9.4'&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;5432&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'POSTGRES_PASSWORD'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'change_me'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'POSTGRES_USER'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'buildbot'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'POSTGRES_DB'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'buildbot'&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'BUILDBOT_DB_URL'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'postgresql+psycopg2://{POSTGRES_USER}:{POSTGRES_PASSWORD}&amp;#64;db/{POSTGRES_DB}'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What happens when we run it?&lt;/p&gt;
&lt;p&gt;Well first we need to clean up that CLI-created garbage we were doing earlier.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl delete deployment master postgres
deployment &amp;quot;master&amp;quot; deleted
deployment &amp;quot;postgres&amp;quot; deleted
&lt;/pre&gt;
&lt;p&gt;Then deploy the new pod:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl create -f buildbot.yaml
pod &amp;quot;buildbot&amp;quot; created
&lt;/pre&gt;
&lt;p&gt;Aaaand:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get pods
buildbot   2/2       Running   0          23s
&lt;/pre&gt;
&lt;p&gt;I'm suspicious...&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl logs po/buildbot master
checking basedir
/usr/lib/python2.7/site-packages/buildbot/config.py:85: ConfigWarning: [0.9.0 and later] `buildbotNetUsageData` is not configured and defaults to basic
[...]
Failure: sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not translate host name &amp;quot;db&amp;quot; to address: Try again
[...]
problem while upgrading!:
Traceback (most recent call last):
[... python traceback ...]
OperationalError: (psycopg2.OperationalError) could not translate host name &amp;quot;db&amp;quot; to address: Try again
&lt;/pre&gt;
&lt;p&gt;Whelp let's play 'Where do I fix &lt;em&gt;that&lt;/em&gt;?'&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Is the problem in:&lt;/dt&gt;
&lt;dd&gt;&lt;ol class="first last loweralpha simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;buildbot-master&lt;/span&gt;&lt;/tt&gt; image&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;postgres&lt;/tt&gt; image&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;buildbot.yml&lt;/tt&gt; file&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;If you guessed &lt;strong&gt;c&lt;/strong&gt; you would be right so let's start in &lt;tt class="docutils literal"&gt;buildbot.yaml&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Based on my experience with databases, specifically the startup time of database containers like Postgres and MariaDB, I'd &lt;em&gt;guess&lt;/em&gt; that the database was taking too long to start.
After some digging around, I found out that Pods were the entirely wrong way to go.
Here's how that discovery went:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: Does K8s have anything like docker-compose's &lt;tt class="docutils literal"&gt;depends_on:&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: No.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: Okay, so how... actually, is there anything like what I'm doing already out there?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: ... Where?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/tree/master/examples/mysql-wordpress-pd"&gt;https://github.com/kubernetes/kubernetes/tree/master/examples/mysql-wordpress-pd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: Noice. So the &lt;em&gt;Pods&lt;/em&gt; thing was the wrong rabbit hole to go down?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Right.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: Right like correct or right like...?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Stop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="yay-examples"&gt;
&lt;h3&gt;Yay examples&lt;/h3&gt;
&lt;p&gt;So let's run that example to make sure it all works fine.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Clone repo&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; to example&lt;/li&gt;
&lt;li&gt;Follow README instructions&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl create -f local-volumes.yaml
persistentvolume &amp;quot;local-pv-1&amp;quot; created
persistentvolume &amp;quot;local-pv-2&amp;quot; created
$ kubectl create -f mysql-deployment.yaml
service &amp;quot;wordpress-mysql&amp;quot; created
persistentvolumeclaim &amp;quot;mysql-pv-claim&amp;quot; created
deployment &amp;quot;wordpress-mysql&amp;quot; created
$ kubectl create -f wordpress-deployment.yaml
service &amp;quot;wordpress&amp;quot; created
persistentvolumeclaim &amp;quot;wp-pv-claim&amp;quot; created
deployment &amp;quot;wordpress&amp;quot; created
$ kubectl get all
NAME                  CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE
svc/kubernetes        10.0.0.1     &amp;lt;none&amp;gt;        443/TCP    2h
svc/wordpress         10.0.0.28    &amp;lt;pending&amp;gt;     80/TCP     5s
svc/wordpress-mysql   None         &amp;lt;none&amp;gt;        3306/TCP   17s
NAME                                  READY     STATUS              RESTARTS   AGE
po/buildbot                           2/2       Running             0          8m
po/wordpress-1618093523-4if9k         0/1       ContainerCreating   0          5s
po/wordpress-mysql-2379610080-mqvll   0/1       ContainerCreating   0          17s
NAME                 STATUS    VOLUME       CAPACITY   ACCESSMODES   AGE
pvc/mysql-pv-claim   Bound     local-pv-1   20Gi       RWO           17s
pvc/wp-pv-claim      Bound     local-pv-2   20Gi       RWO           5s
&lt;/pre&gt;
&lt;p&gt;And I can go to the site?&lt;/p&gt;
&lt;img alt="Wordpress working correctly." class="align-center" src="/assets/images/buildbot-on-k8s/wordpress-working.png" style="width: 100%;" /&gt;
&lt;p&gt;Great.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="now-use-the-example"&gt;
&lt;h3&gt;Now Use the example&lt;/h3&gt;
&lt;p&gt;Now we need to morph &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wordpress-deployment.yaml&lt;/span&gt;&lt;/tt&gt; into &lt;tt class="docutils literal"&gt;postgres.yaml&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wordpress-deployment.yaml&lt;/span&gt;&lt;/tt&gt; into &lt;tt class="docutils literal"&gt;master.yaml&lt;/tt&gt;
Also, let's ignore &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;local-volumes.yaml&lt;/span&gt;&lt;/tt&gt; for now, just to be safe.
Don't forget: we're not doing anything fancy yet.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;master.yaml&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;8080&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;frontend&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;tier&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;NodePort&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Deployment&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;strategy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Recreate&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;tier&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot/buildbot-master:master&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;BUILDBOT_CONFIG_DIR&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;config&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;BUILDBOT_CONFIG_URL&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://raw.githubusercontent.com/buildbot/buildbot-docker-example-config/master/master.cfg'&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;BUILDBOT_WORKER_PORT&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'9989'&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;BUILDBOT_WEB_URL&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'http://localhost:8080/'&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;BUILDBOT_WEB_PORT&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'8080'&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;POSTGRES_PASSWORD&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;change_me&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;POSTGRES_USER&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;POSTGRES_DB&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;POSTGRES_DB_HOST&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;BUILDBOT_DB_URL&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'postgresql+psycopg2://{POSTGRES_USER}:{POSTGRES_PASSWORD}&amp;#64;{POSTGRES_DB_HOST}/{POSTGRES_DB}'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;8080&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;frontend&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;postgres.yaml:&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;5432&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;tier&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;clusterIP&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;None&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Deployment&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;strategy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Recreate&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;tier&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres:9.4&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;POSTGRES_PASSWORD&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;change_me&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;POSTGRES_USER&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;POSTGRES_DB&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;POSTGRES_DB_HOST&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;BUILDBOT_DB_URL&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'postgresql+psycopg2://{POSTGRES_USER}:{POSTGRES_PASSWORD}&amp;#64;{POSTGRES_DB_HOST}/{POSTGRES_DB}'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;5432&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;postgres&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And with a flick of my wand:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl delete pods,deployment,service --all  # cleanup the old stuff
pod &amp;quot;buildbot&amp;quot; deleted
pod &amp;quot;wordpress-1618093523-4if9k&amp;quot; deleted
pod &amp;quot;wordpress-mysql-2379610080-mqvll&amp;quot; deleted
deployment &amp;quot;wordpress&amp;quot; deleted
deployment &amp;quot;wordpress-mysql&amp;quot; deleted
service &amp;quot;kubernetes&amp;quot; deleted
service &amp;quot;wordpress&amp;quot; deleted
service &amp;quot;wordpress-mysql&amp;quot; deleted
$ kubectl create -f postrges.yml
service &amp;quot;postgres&amp;quot; created
deployment &amp;quot;postgres&amp;quot; created
$ kubectl create -f master.yml
service &amp;quot;master&amp;quot; created
deployment &amp;quot;master&amp;quot; created
$ minikube service master
&lt;/pre&gt;
&lt;p&gt;Opens up this wonderful site:&lt;/p&gt;
&lt;img alt="Buildbot working." class="align-center" src="/assets/images/buildbot-on-k8s/buildbot-working.png" style="width: 100%;" /&gt;
&lt;p&gt;Great, they can talk &lt;a class="citation-reference" href="#same-app-note" id="id4"&gt;[same-app-note]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hire-a-worker"&gt;
&lt;h3&gt;Hire a worker&lt;/h3&gt;
&lt;p&gt;So we've got a website and a database, but we're not actually running any builds yet.
Let's fix that.&lt;/p&gt;
&lt;p&gt;Based on what the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;docker-compose.yml&lt;/span&gt;&lt;/tt&gt; says we should be able to throw this together and have it work:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;worker.yaml&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;worker&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;9989&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;worker&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;tier&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;worker&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;clusterIP&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;None&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Deployment&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;worker&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;strategy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Recreate&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;buildbot&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;tier&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;worker&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buildbot/buildbot-worker:master&amp;quot;&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;worker&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;BUILDMASTER&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;master&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;BUILDMASTER_PORT&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'9989'&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;WORKERNAME&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;example-worker&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;WORKERPASS&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pass&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;WORKER_ENVIRONMENT_BLACKLIST&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;value&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'DOCKER_BUILDBOT*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;BUILDBOT_ENV_*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;BUILDBOT_1*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;WORKER_ENVIRONMENT_BLACKLIST'&lt;/span&gt;
        &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;9989&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;worker&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl create -f worker.yaml
service &amp;quot;worker&amp;quot; created
deployment &amp;quot;worker&amp;quot; created
$ kubectl get -f worker.yaml
NAME                  CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE
svc/worker            None         &amp;lt;none&amp;gt;        9989/TCP   44s
NAME                     DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
deploy/worker            1         1         1            0           44s
&lt;/pre&gt;
&lt;p&gt;Looks promising...&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get pods -l tier=worker
NAME                               READY     STATUS    RESTARTS   AGE
worker-3607067131-qdpfd   1/1       Running   0          1m
$ kubectl logs worker-3607067131-ke4zb -f
2016-11-21 19:46:45+0000 [-] Loading buildbot.tac...
2016-11-21 19:46:45+0000 [-] Loaded.
2016-11-21 19:46:45+0000 [-] twistd 16.5.0 (/usr/bin/python 2.7.12) starting up.
2016-11-21 19:46:45+0000 [-] reactor class: twisted.internet.epollreactor.EPollReactor.  2016-11-21 19:46:45+0000 [-] Starting Worker -- version: latest
2016-11-21 19:46:45+0000 [-] recording hostname in twistd.hostname
2016-11-21 19:46:45+0000 [-] Starting factory &amp;lt;buildbot_worker.pb.BotFactory instance at 0x7fd8c2339cf8&amp;gt;
2016-11-21 19:46:45+0000 [-] Connecting to buildbot:9989
2016-11-21 19:46:56+0000 [Uninitialized] Connection to buildbot:9989 failed: Connection Refused
2016-11-21 19:46:56+0000 [Uninitialized] &amp;lt;twisted.internet.tcp.Connector instance at 0x7fd8c233a170&amp;gt; will retry in 2 seconds
2016-11-21 19:46:56+0000 [-] Stopping factory &amp;lt;buildbot_worker.pb.BotFactory instance at 0x7fd8c2339cf8&amp;gt;
2016-11-21 19:46:59+0000 [-] Starting factory &amp;lt;buildbot_worker.pb.BotFactory instance at 0x7fd8c2339cf8&amp;gt;
2016-11-21 19:46:59+0000 [-] Connecting to buildbot:9989
2016-11-21 19:47:29+0000 [-] Connection to buildbot:9989 failed: [Failure instance: Traceback (failure with no frames): &amp;lt;class 'twisted.internet.error.TimeoutError'&amp;gt;: User timeout caused connection failure.
    ]
2016-11-21 19:47:29+0000 [-] &amp;lt;twisted.internet.tcp.Connector instance at 0x7fd8c233a170&amp;gt; will retry in 5 seconds
2016-11-21 19:47:29+0000 [-] Stopping factory &amp;lt;buildbot_worker.pb.BotFactory instance at 0x7fd8c2339cf8&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Khaaaaaan!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connection-issues"&gt;
&lt;h3&gt;Connection issues&lt;/h3&gt;
&lt;p&gt;Fine, let's get to work debugging.
First we'll login to the worker pod and try to ping the &lt;tt class="docutils literal"&gt;buildbot&lt;/tt&gt; pod since the output makes it seem like there was a timeout between the host and the worker.
This usually means they can't reach each other.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl exec -it worker-3607067131-qdpfd bash
buildbot&amp;#64;worker-3607067131-qdpfd:/buildbot$ ping master
bash: ping: command not found
&lt;/pre&gt;
&lt;p&gt;Uhh...&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
buildbot&amp;#64;worker-3607067131-ke4zb:/buildbot$ curl http://master:8080
&amp;lt;!DOCTYPE html&amp;gt;[... definitely actually a webpage ...]
&lt;/pre&gt;
&lt;p&gt;So the worker can reach the master, but can the master reach the worker?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get pods -l tier=master
NAME                                 READY     STATUS    RESTARTS   AGE
master-2152810066-9ip8b              1/1       Running   0          21m
$ kubectl exec -it master-2152810066-9ip8b sh
/var/lib/buildbot # ping worker
PING worker (172.17.0.6): 56 data bytes
64 bytes from 172.17.0.6: seq=0 ttl=64 time=0.083 ms
64 bytes from 172.17.0.6: seq=1 ttl=64 time=0.101 ms
^C
--- worker ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 0.083/0.092/0.101 ms
&lt;/pre&gt;
&lt;p&gt;Okay, so they can connect to one-another.
What's the problem then?
My best guess is that the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; pod needs to have it's special worker port (&lt;tt class="docutils literal"&gt;9989&lt;/tt&gt;) exposed.
So let's add those lines to &lt;tt class="docutils literal"&gt;master.yaml&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
&lt;span class="gd"&gt;--- a/blogpost/updated-master.yaml
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/blogpost/updated-master.yaml
&lt;/span&gt;&lt;span class="gu"&gt;&amp;#64;&amp;#64; -8,6 +8,8 &amp;#64;&amp;#64; spec:
&lt;/span&gt;   ports:
     - port: 8080
       name: frontend
&lt;span class="gi"&gt;+    - port: 9989
+      name: worker
&lt;/span&gt;   selector:
     app: buildbot
     tier: master
&lt;span class="gu"&gt;&amp;#64;&amp;#64; -55,3 +57,5 &amp;#64;&amp;#64; spec:
&lt;/span&gt;         ports:
         - containerPort: 8080
           name: frontend
&lt;span class="gi"&gt;+        - containerPort: 9989
+          name: worker&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And after tearing everything down and bringing it back up:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get pods -l tier=worker
NAME                               READY     STATUS    RESTARTS   AGE
worker-2552724660-l4kmv            1/1       Running   0          12s
$ kubectl logs worker-2552724660-l4kmv
[... logs logs logs ...]
2016-12-09 23:30:18+0000 [-] Connecting to master:9989
2016-12-09 23:30:18+0000 [HangCheckProtocol,client] message from master: attached
2016-12-09 23:30:18+0000 [HangCheckProtocol,client] message from master: attached
2016-12-09 23:30:18+0000 [HangCheckProtocol,client] Connected to master:9989; worker is ready
2016-12-09 23:30:18+0000 [HangCheckProtocol,client] sending application-level keepalives every 600 seconds
&lt;/pre&gt;
&lt;p&gt;Hey that looks like success to me!
How does the front-end look?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get pods -l tier=master
NAME                               READY     STATUS    RESTARTS   AGE
master-3038604518-jim6q            1/1       Running   0          2m
$ kubectl port-forward master-3038604518-jim6q 8080
&lt;/pre&gt;
&lt;p&gt;And in a browser:&lt;/p&gt;
&lt;img alt="Buildbot still working." class="align-center" src="/assets/images/buildbot-on-k8s/build-success.png" style="width: 100%;" /&gt;
&lt;p&gt;You may now do a happy dance.&lt;/p&gt;
&lt;img alt="Happy Dance .gif" class="align-center" src="/assets/images/buildbot-on-k8s/happy-dance.gif" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="storage"&gt;
&lt;h2&gt;Storage&lt;/h2&gt;
&lt;p&gt;We've got the three core moving parts of our system, next on our list is adding some persistent storage.
Thankfully, we can recycle the MySQL+Wordpress example we used before.
Yay examples.&lt;/p&gt;
&lt;p&gt;So let's add the storage bits back in that we ignored before. This results in configs that look like so (abbreviated for your scrollbar's convenience):&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;volumes.yaml&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;PersistentVolume&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;local-pv-1&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;local&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;capacity&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;storage&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;1Gi&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;accessModes&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;persistentVolumeReclaimPolicy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Recycle&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;hostPath&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;path&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/data/pv-1&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;PersistentVolume&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;local-pv-2&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;local&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;capacity&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;storage&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;5Gi&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;accessModes&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;persistentVolumeReclaimPolicy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Recycle&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;hostPath&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;path&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/data/pv-2&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;PersistentVolume&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;local-pv-3&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;local&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;capacity&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;storage&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;5Gi&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;accessModes&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;persistentVolumeReclaimPolicy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Recycle&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;hostPath&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;path&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/data/pv-3&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;master.yaml&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
&lt;span class="gh"&gt;diff --git a/blogpost/volumes-master.yaml b/blogpost/volumes-master.yaml
index 7cbffd7..c7479e3 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/blogpost/volumes-master.yaml
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/blogpost/volumes-master.yaml
&lt;/span&gt;&lt;span class="gu"&gt;&amp;#64;&amp;#64; -15,6 +15,19 &amp;#64;&amp;#64; spec:
&lt;/span&gt;     tier: master
   type: NodePort
 ---
&lt;span class="gi"&gt;+apiVersion: v1
+kind: PersistentVolumeClaim
+metadata:
+  name: master-pv-claim
+  labels:
+    app: buildbot
+spec:
+  accessModes:
+    - ReadWriteOnce
+  resources:
+    requests:
+      storage: 1Gi
+---
&lt;/span&gt; apiVersion: extensions/v1beta1
 kind: Deployment
 metadata:
&lt;span class="gu"&gt;&amp;#64;&amp;#64; -37,7 +50,7 &amp;#64;&amp;#64; spec:
&lt;/span&gt;         - name: BUILDBOT_CONFIG_DIR
           value: config
         - name: BUILDBOT_CONFIG_URL
&lt;span class="gd"&gt;-          value: 'https://raw.githubusercontent.com/buildbot/buildbot-docker-example-config/master/master.cfg'
&lt;/span&gt;&lt;span class="gi"&gt;+          value: 'https://raw.githubusercontent.com/ElijahCaine/buildbot-on-kubernetes/master/simple/master.cfg'
&lt;/span&gt;         - name: BUILDBOT_WORKER_PORT
           value: '9989'
         - name: BUILDBOT_WEB_URL
&lt;span class="gu"&gt;&amp;#64;&amp;#64; -59,3 +72,10 &amp;#64;&amp;#64; spec:
&lt;/span&gt;           name: frontend
         - containerPort: 9989
           name: worker
&lt;span class="gi"&gt;+        volumeMounts:
+        - name: master-persistent-storage
+          mountPath: /var/lib/buildbot/builds
+      volumes:
+      - name: master-persistent-storage
+        persistentVolumeClaim:
+          claimName: master-pv-claim&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;postgres.yaml&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
&lt;span class="gd"&gt;--- a/blogpost/volumes-postgres.yaml
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/blogpost/volumes-postgres.yaml
&lt;/span&gt;&lt;span class="gu"&gt;&amp;#64;&amp;#64; -13,6 +13,19 &amp;#64;&amp;#64; spec:
&lt;/span&gt;     tier: postgres
   clusterIP: None
 ---
&lt;span class="gi"&gt;+apiVersion: v1
+kind: PersistentVolumeClaim
+metadata:
+  name: postgres-pv-claim
+  labels:
+    app: buildbot
+spec:
+  accessModes:
+    - ReadWriteOnce
+  resources:
+    requests:
+      storage: 5Gi
+---
&lt;/span&gt; apiVersion: extensions/v1beta1
 kind: Deployment
 metadata:
&lt;span class="gu"&gt;&amp;#64;&amp;#64; -45,3 +58,10 &amp;#64;&amp;#64; spec:
&lt;/span&gt;         ports:
         - containerPort: 5432
           name: postgres
&lt;span class="gi"&gt;+        volumeMounts:
+        - name: postgres-persistent-storage
+          mountPath: /var/lib/postgresql
+      volumes:
+      - name: postgres-persistent-storage
+        persistentVolumeClaim:
+          claimName: postgres-pv-claim&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;worker.yaml&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
&lt;span class="gd"&gt;--- a/blogpost/volumes-worker.yaml
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/blogpost/volumes-worker.yaml
&lt;/span&gt;&lt;span class="gu"&gt;&amp;#64;&amp;#64; -13,6 +13,19 &amp;#64;&amp;#64; spec:
&lt;/span&gt;     tier: worker
   clusterIP: None
 ---
&lt;span class="gi"&gt;+apiVersion: v1
+kind: PersistentVolumeClaim
+metadata:
+  name: worker-pv-claim
+  labels:
+    app: buidlbot
+spec:
+  accessModes:
+    - ReadWriteOnce
+  resources:
+    requests:
+      storage: 5Gi
+---
&lt;/span&gt; apiVersion: extensions/v1beta1
 kind: Deployment
 metadata:
&lt;span class="gu"&gt;&amp;#64;&amp;#64; -45,3 +58,10 &amp;#64;&amp;#64; spec:
&lt;/span&gt;         ports:
         - containerPort: 9989
           name: worker
&lt;span class="gi"&gt;+        volumeMounts:
+        - name: worker-persistent-storage
+          mountPath: /buildbot/builds
+      volumes:
+      - name: worker-persistent-storage
+        persistentVolumeClaim:
+          claimName: worker-pv-claim&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And of lastly we edit the Buildbot &lt;tt class="docutils literal"&gt;master.cfg&lt;/tt&gt; to use our custom paths for storing and carrying out builds:&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
&lt;span class="gh"&gt;diff --git a/blogpost/volumes-master.cfg b/blogpost/volumes-master.cfg
index 06ad65b..36212ea 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/blogpost/volumes-master.cfg
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/blogpost/volumes-master.cfg
&lt;/span&gt;&lt;span class="gu"&gt;&amp;#64;&amp;#64; -78,7 +78,9 &amp;#64;&amp;#64; c['builders'] = []
&lt;/span&gt; c['builders'].append(
     util.BuilderConfig(name=&amp;quot;runtests&amp;quot;,
       workernames=[&amp;quot;example-worker&amp;quot;],
&lt;span class="gd"&gt;-      factory=factory))
&lt;/span&gt;&lt;span class="gi"&gt;+      factory=factory,
+      builddir='builds',
+      workerbuilddir='builds'))
&lt;/span&gt;
 ####### STATUS TARGETS
&lt;/pre&gt;
&lt;p&gt;This is just an edited version of the original &lt;tt class="docutils literal"&gt;master.cfg&lt;/tt&gt; you can find in the original Buildbot docker-compose example repository.&lt;/p&gt;
&lt;p&gt;So this &lt;em&gt;should&lt;/em&gt; just work, right?
We request a volume of a given size, the volume exists and is the correct size, badda bing badda boom, do the thing like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl delete service,deployment,pods --all
service &amp;quot;master&amp;quot; deleted
service &amp;quot;postgres&amp;quot; deleted
service &amp;quot;worker&amp;quot; deleted
service &amp;quot;kubernetes&amp;quot; deleted
deployment &amp;quot;master&amp;quot; deleted
deployment &amp;quot;postgres&amp;quot; deleted
deployment &amp;quot;worker&amp;quot; deleted
$ kubectl create -f volumes.yaml
persistentvolume &amp;quot;local-pv-1&amp;quot; created
persistentvolume &amp;quot;local-pv-2&amp;quot; created
persistentvolume &amp;quot;local-pv-3&amp;quot; created
$ kubectl create -f postgres.yaml
service &amp;quot;postgres&amp;quot; created
persistentvolumeclaim &amp;quot;postgres-pv-claim&amp;quot; created
deployment &amp;quot;postgres&amp;quot; created
$ kubectl create -f master.yaml
service &amp;quot;master&amp;quot; created
persistentvolumeclaim &amp;quot;master-pv-claim&amp;quot; created
deployment &amp;quot;master&amp;quot; created
$ kubectl create -f worker.yaml
service &amp;quot;-worker&amp;quot; created
persistentvolumeclaim &amp;quot;worker-pv-claim&amp;quot; created
deployment &amp;quot;worker&amp;quot; created
$ kubectl get pods -l tier=master
NAME                        READY     STATUS    RESTARTS   AGE
master-3176013930-gvy2i   1/1       Running   0          1m
$ kubectl port-forward master-3176013930-gvy2i 8080
Forwarding from 127.0.0.1:8080 -&amp;gt; 8080
Forwarding from [::1]:8080 -&amp;gt; 8080
&lt;/pre&gt;
&lt;p&gt;That kinda works, but it kept getting weird arbitrary errors which looked suspicious.&lt;/p&gt;
&lt;img alt="Permissions fail in buildbot" class="align-center" src="/assets/images/buildbot-on-k8s/permissions-build-fail.png" style="width: 100%;" /&gt;
&lt;p&gt;Since the only thing that had really changed was the volumes I figured I might as well login to the host and investigate.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ minikube ssh
docker&amp;#64;minikube:~$ ls -alh /data/
total 20
drwxr-xr-x    5 root     root        4.0K Dec 11 02:21 ./
drwxr-xr-x    6 root     root        4.0K Dec 11 01:48 ../
drwxr-xr-x    2 root     root        4.0K Dec 11 02:20 pv-1/
drwxr-xr-x    2 root     root        4.0K Dec 11 02:33 pv-2/
drwxr-xr-x    3 root     root        4.0K Dec 11 02:33 pv-3/
&lt;/pre&gt;
&lt;p&gt;Ahah!
That's the problem, root owns everything but the builds are run by the &lt;tt class="docutils literal"&gt;buildbot&lt;/tt&gt; user (&lt;tt class="docutils literal"&gt;uid: 1000&lt;/tt&gt;)
&lt;em&gt;/me shakes fist at permissions errors.&lt;/em&gt;
The last first place you think to look.&lt;/p&gt;
&lt;p&gt;So is there any way to change the permissions of a volume as you claim it (i.e., in &lt;tt class="docutils literal"&gt;volumes.yaml&lt;/tt&gt;)?
We can both go through this journey together or I can share with you a quote from my coworker Barak Michener, the BAMF that works on &lt;a class="reference external" href="https://github.com/coreos/torus"&gt;Torus&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;Barak Michener&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;yeah, hostPath is completely hands-off from k8s perspective&lt;/div&gt;
&lt;div class="line"&gt;so you just chmod the underlying dir&lt;/div&gt;
&lt;div class="line"&gt;to whatever uid you're using inside the pod&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Turns out the problem was with my &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; of storage in &lt;tt class="docutils literal"&gt;volumes.yaml&lt;/tt&gt;.
As of yet there is no type-agnostic way to assign permissions for mounted volumes.
Storage, why you gotta be like that?&lt;/p&gt;
&lt;p&gt;So after digging around and asking Barak I finally concluded that I had to had to login to my host and set the correct permissions on the directories being reserved.
Here's how you do that on Minikube:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ minikube ssh
docker&amp;#64;minikube$ sudo chown -R 1000:1000 /data/pv*
&lt;/pre&gt;
&lt;p&gt;In this case we could just chown the one volume that's going to be used by the &lt;tt class="docutils literal"&gt;worker&lt;/tt&gt; pod, since the other ones run their services as &lt;tt class="docutils literal"&gt;root&lt;/tt&gt;, but much like Debra from accounting, &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; doesn't give a fuck.
Might as well.&lt;/p&gt;
&lt;p&gt;So if we try the build again with the correct permissions, what happens?&lt;/p&gt;
&lt;img alt="Buildbot with permissions fixed." class="align-center" src="/assets/images/buildbot-on-k8s/build-success-perms.png" style="width: 100%;" /&gt;
&lt;p&gt;Huzah&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="autoscaling"&gt;
&lt;h2&gt;Autoscaling&lt;/h2&gt;
&lt;p&gt;At last we have what I suspect will be the &lt;em&gt;hardest&lt;/em&gt; part of the project: autoscaling.
Here's what we want in a perfect world:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When a lot of builds get requested, spin up more &lt;tt class="docutils literal"&gt;worker&lt;/tt&gt; nodes.&lt;/li&gt;
&lt;li&gt;When fewer builds are requested, destroy those extra &lt;tt class="docutils literal"&gt;worker&lt;/tt&gt; nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="asking-the-question"&gt;
&lt;h3&gt;Asking the question&lt;/h3&gt;
&lt;p&gt;This task is actually a pretty tough cookie to crack.
We want enough workers to each deal with 1/N requests in a queue of N builds, essentially scaling the building service to deal with usage spikes.
It sounds straight forward enough, but how do we test it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-a-test-case"&gt;
&lt;h3&gt;Creating a test-case&lt;/h3&gt;
&lt;p&gt;For this we need to add a few projects to our instance of Buildbot, each of which will have a hefty workload.
To do this we need to host a Buildbot &lt;tt class="docutils literal"&gt;master.cfg&lt;/tt&gt; config file at some public location and refer to this in the &lt;tt class="docutils literal"&gt;master.yaml&lt;/tt&gt; config file.
I used the GitHub repo that accompanies this blogpost &lt;a class="citation-reference" href="#accompanying-repo" id="id5"&gt;[accompanying-repo]&lt;/a&gt;, but you could use GitHub Gists or a pastebin; just make sure you're referring to the &lt;strong&gt;raw&lt;/strong&gt; file or a &lt;tt class="docutils literal"&gt;.tar.gz&lt;/tt&gt; with the &lt;tt class="docutils literal"&gt;master.cfg&lt;/tt&gt; file at the base of the tarball.&lt;/p&gt;
&lt;p&gt;So let's pull a project out of a hat that takes a while to build, how about... &lt;a class="reference external" href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt;.
Any objections?
Great, let's roll.&lt;/p&gt;
&lt;p&gt;To get started we'll need a custom &lt;tt class="docutils literal"&gt;worker&lt;/tt&gt; container can build Cargo.
A small adventure later and we have this Dockerfile which has all of the dependencies to build what we want:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
FROM buildbot/buildbot-worker:master

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly
RUN echo 'PATH=$PATH:$HOME/.cargo/bin' &amp;gt;&amp;gt; $HOME/.bashrc

USER root
RUN apt update -y
RUN apt install -y cmake pkg-config

USER buildbot
&lt;/pre&gt;
&lt;p&gt;I set this to auto-build on &lt;a class="reference external" href="https://quay.io/"&gt;quay.io&lt;/a&gt;, hosted at the docker-pull url &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;quay.io/elijahcaine/buidlbot-rust-worker&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now that we have a capable worker container, we need to create an arbitrary workload.
To do that we'll use this Buildbot &lt;tt class="docutils literal"&gt;master.cfg&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
&lt;span class="gh"&gt;diff --git a/blogpost/robust-master.cfg b/blogpost/robust-master.cfg
index 06ad65b..892188b 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/blogpost/robust-master.cfg
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/blogpost/robust-master.cfg
&lt;/span&gt;&lt;span class="gu"&gt;&amp;#64;&amp;#64; -18,7 +18,7 &amp;#64;&amp;#64; c = BuildmasterConfig = {}
&lt;/span&gt; # a Worker object, specifying a unique worker name and password.  The same
 # worker name and password must be configured on the worker.

&lt;span class="gd"&gt;-c['workers'] = [worker.Worker(&amp;quot;example-worker&amp;quot;, 'pass')]
&lt;/span&gt;&lt;span class="gi"&gt;+c['workers'] = [worker.Worker(&amp;quot;rust-worker&amp;quot;, 'pass')]
&lt;/span&gt;
 if 'BUILDBOT_MQ_URL' in os.environ:
     c['mq'] = {
&lt;span class="gu"&gt;&amp;#64;&amp;#64; -43,7 +43,7 &amp;#64;&amp;#64; c['protocols'] = {'pb': {'port': os.environ.get(&amp;quot;BUILDBOT_WORKER_PORT&amp;quot;, 9989)}}
&lt;/span&gt;
 c['change_source'] = []
 c['change_source'].append(changes.GitPoller(
&lt;span class="gd"&gt;-        'git://github.com/buildbot/pyflakes.git',
&lt;/span&gt;&lt;span class="gi"&gt;+        'git://github.com/rust-lang/cargo.git',
&lt;/span&gt;         workdir='gitpoller-workdir', branch='master',
         pollinterval=300))

&lt;span class="gu"&gt;&amp;#64;&amp;#64; -57,10 +57,10 &amp;#64;&amp;#64; c['schedulers'].append(schedulers.SingleBranchScheduler(
&lt;/span&gt;                             name=&amp;quot;all&amp;quot;,
                             change_filter=util.ChangeFilter(branch='master'),
                             treeStableTimer=None,
&lt;span class="gd"&gt;-                            builderNames=[&amp;quot;runtests&amp;quot;]))
&lt;/span&gt;&lt;span class="gi"&gt;+                            builderNames=[&amp;quot;cargo1-runtests&amp;quot;, &amp;quot;cargo2-runtests&amp;quot;, &amp;quot;cargo3-runtests&amp;quot;]))
&lt;/span&gt; c['schedulers'].append(schedulers.ForceScheduler(
                             name=&amp;quot;force&amp;quot;,
&lt;span class="gd"&gt;-                            builderNames=[&amp;quot;runtests&amp;quot;]))
&lt;/span&gt;&lt;span class="gi"&gt;+                            builderNames=[&amp;quot;cargo1-runtests&amp;quot;, &amp;quot;cargo2-runtests&amp;quot;, &amp;quot;cargo3-runtests&amp;quot;]))
&lt;/span&gt;
 ####### BUILDERS

&lt;span class="gu"&gt;&amp;#64;&amp;#64; -68,17 +68,30 &amp;#64;&amp;#64; c['schedulers'].append(schedulers.ForceScheduler(
&lt;/span&gt; # what steps, and which workers can execute them.  Note that any particular build will
 # only take place on one worker.

&lt;span class="gd"&gt;-factory = util.BuildFactory()
-# check out the source
-factory.addStep(steps.Git(repourl='http://github.com/buildbot/pyflakes.git', mode='incremental'))
-# run the tests (note that this will require that 'trial' is installed)
-factory.addStep(steps.ShellCommand(command=[&amp;quot;trial&amp;quot;, &amp;quot;pyflakes&amp;quot;]))
&lt;/span&gt;&lt;span class="gi"&gt;+f = {}
+f['cargo'] = util.BuildFactory()
+f['cargo'].addStep(steps.Git(repourl='git://github.com/rust-lang/cargo.git', mode='full', method='fresh'))
+f['cargo'].addStep(steps.ShellCommand(command=[&amp;quot;/home/buildbot/.cargo/bin/cargo&amp;quot;, &amp;quot;build&amp;quot;, &amp;quot;--release&amp;quot;]))
&lt;/span&gt;
 c['builders'] = []
 c['builders'].append(
&lt;span class="gd"&gt;-    util.BuilderConfig(name=&amp;quot;runtests&amp;quot;,
-      workernames=[&amp;quot;example-worker&amp;quot;],
-      factory=factory))
&lt;/span&gt;&lt;span class="gi"&gt;+    util.BuilderConfig(name=&amp;quot;cargo1-runtests&amp;quot;,
+      workernames=[&amp;quot;rust-worker&amp;quot;],
+      factory=f['cargo'],
+      builddir='builds/cargo1',
+      workerbuilddir='builds/cargo1'))
+c['builders'].append(
+    util.BuilderConfig(name=&amp;quot;cargo2-runtests&amp;quot;,
+      workernames=[&amp;quot;rust-worker&amp;quot;],
+      factory=f['cargo'],
+      builddir='builds/cargo2',
+      workerbuilddir='builds/cargo2'))
+c['builders'].append(
+    util.BuilderConfig(name=&amp;quot;cargo3-runtests&amp;quot;,
+      workernames=[&amp;quot;rust-worker&amp;quot;],
+      factory=f['cargo'],
+      builddir='builds/cargo3',
+      workerbuilddir='builds/cargo3'))
&lt;/span&gt;
 ####### STATUS TARGETS

&lt;span class="gu"&gt;&amp;#64;&amp;#64; -93,8 +106,8 &amp;#64;&amp;#64; c['status'] = []
&lt;/span&gt; # the 'title' string will appear at the top of this buildbot installation's
 # home pages (linked to the 'titleURL').

&lt;span class="gd"&gt;-c['title'] = &amp;quot;Pyflakes&amp;quot;
-c['titleURL'] = &amp;quot;https://launchpad.net/pyflakes&amp;quot;
&lt;/span&gt;&lt;span class="gi"&gt;+c['title'] = &amp;quot;Rusty Stuffy&amp;quot;
+c['titleURL'] = &amp;quot;https://www.rust-lang.org/en-US/&amp;quot;
&lt;/span&gt;
 # the 'buildbotURL' string should point to the location where the buildbot's
 # internal web server is visible. This typically uses the port number set in
&lt;/pre&gt;
&lt;p&gt;And deploy it with this &lt;tt class="docutils literal"&gt;master.yaml&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
&lt;span class="gh"&gt;diff --git a/blogpost/robust-master.yaml b/blogpost/robust-master.yaml
index c7479e3..f75b4d6 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/blogpost/robust-master.yaml
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/blogpost/robust-master.yaml
&lt;/span&gt;&lt;span class="gu"&gt;&amp;#64;&amp;#64; -50,7 +50,7 &amp;#64;&amp;#64; spec:
&lt;/span&gt;         - name: BUILDBOT_CONFIG_DIR
           value: config
         - name: BUILDBOT_CONFIG_URL
&lt;span class="gd"&gt;-          value: 'https://raw.githubusercontent.com/ElijahCaine/buildbot-on-kubernetes/master/simple/master.cfg'
&lt;/span&gt;&lt;span class="gi"&gt;+          value: 'https://raw.githubusercontent.com/ElijahCaine/buildbot-on-kubernetes/master/robust/master.cfg'
&lt;/span&gt;         - name: BUILDBOT_WORKER_PORT
           value: '9989'
         - name: BUILDBOT_WEB_URL
&lt;/pre&gt;
&lt;p&gt;When we look at our setup in Buildbot it looks like this:&lt;/p&gt;
&lt;img alt="Buildbot with ample workload." class="align-center" src="/assets/images/buildbot-on-k8s/ample-workload.png" style="width: 100%;" /&gt;
&lt;p&gt;When each build is run it completely wipes away the old git clone and starts from scratch, which is &lt;em&gt;suuuper&lt;/em&gt; wasteful, but exactly what we want here.
The purpose of this test is to create a heavy workload for our nodes to perform, and with this each build will &lt;em&gt;definitely&lt;/em&gt; be heavy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kubectl-autoscale"&gt;
&lt;h3&gt;kubectl autoscale&lt;/h3&gt;
&lt;p&gt;Now to start scaling that build.
In a perfect world we'd get a request, that would start hogging our resources, and K8s would spin up a new worker instance to handle the next build in the queue.
Based on the output of &lt;tt class="docutils literal"&gt;kubectl &lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/tt&gt; it looks like &lt;tt class="docutils literal"&gt;kubectl autoscale deployment worker&lt;/tt&gt; is the command we want... so let's do that:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl autoscale deployment worker --max=5 --min=1 --cpu-percent=50
deployment &amp;quot;worker&amp;quot; autoscaled
$ kubectl describe hpa
Name:               worker
Namespace:          default
Labels:             &amp;lt;none&amp;gt;
Annotations:            &amp;lt;none&amp;gt;
CreationTimestamp:      Fri, 09 Dec 2016 11:13:15 -0800
Reference:          Deployment/worker
Target CPU utilization:     50%
Current CPU utilization:    &amp;lt;unset&amp;gt;
Min replicas:           1
Max replicas:           5
Events:
  FirstSeen LastSeen    Count   From                SubobjectPath   Type        Reason          Message
  --------- --------    -----   ----                -------------   --------    ------          -------
  37s       11s     6   {horizontal-pod-autoscaler }            Warning     FailedGetMetrics    failed to get CPU consumption and request: failed to get pods metrics: the server could not find the requested resource (get services http:heapster:)
  37s       11s     6   {horizontal-pod-autoscaler }            Warning     FailedComputeReplicas   failed to get CPU utilization: failed to get CPU consumption and request: failed to get pods metrics: the server could not find the requested resource (get services http:heapster:)
&lt;/pre&gt;
&lt;p&gt;Hmm... that output looks like things aren't working.
Let's look around the internet and see if we find anything useful.
I'll go East, you go West, and we'll meet back here in 20.&lt;/p&gt;
&lt;p&gt;Great, what did you find?
Me?
Oh I found a bunch of Github issues &lt;a class="citation-reference" href="#hpa-gh" id="id6"&gt;[hpa-gh]&lt;/a&gt; and Stack Overflow posts &lt;a class="citation-reference" href="#hpa-so" id="id7"&gt;[hpa-so]&lt;/a&gt;; lot of people mentioned this Heapster thing.
The &lt;a class="reference external" href="https://github.com/kubernetes/heapster"&gt;Heapster GitHub page&lt;/a&gt; says it does &lt;em&gt;Compute Resource Usage Analysis and Monitoring of Container Clusters&lt;/em&gt;, which sounds like what we want.
I also found the &lt;a class="reference external" href="http://kubernetes.io/docs/user-guide/horizontal-pod-autoscaling/"&gt;K8s Autoscaling&lt;/a&gt; docs that point to a &lt;a class="reference external" href="http://kubernetes.io/docs/user-guide/horizontal-pod-autoscaling/"&gt;K8s Autoscaling Tutorial&lt;/a&gt;.
That sounds super useful and confirms the suspicion that Heapster is useful.
&lt;strong&gt;TLDR&lt;/strong&gt; things are pointing toward setting up Heapster.&lt;/p&gt;
&lt;p&gt;As it turns out there is a &lt;a class="reference external" href="https://github.com/kubernetes/minikube/blob/master/README.md#add-ons"&gt;Heapster addon for Minikube&lt;/a&gt; &lt;a class="citation-reference" href="#heapster-release" id="id8"&gt;[heapster-release]&lt;/a&gt;, so let's get that setup.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ minikube addons enable heapster
heapster was successfully enabled
$ minikube addons open heapster
Opening kubernetes service kube-system/monitoring-grafana in default browser...
&lt;/pre&gt;
&lt;img alt="Heapster working" class="align-center" src="/assets/images/buildbot-on-k8s/hello-heapster.png" style="width: 100%;" /&gt;
&lt;p&gt;Neato!&lt;/p&gt;
&lt;p&gt;So now we've got Heapster running, what's next?&lt;/p&gt;
&lt;p&gt;Well the tutorial runs this line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl run php-apache --image=gcr.io/google_containers/hpa-example --requests=cpu=200m --expose --port=80
&lt;/pre&gt;
&lt;p&gt;Which we can appropriate to get some YAML to shove in our &lt;tt class="docutils literal"&gt;worker.yaml&lt;/tt&gt; to get a good template for our Buildbot worker Deployment.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl run test --image=busybox --requests=cpu=200m -o yaml
apiVersion: extensions/v1beta1
...
spec:
  ...
  template:
    ...
    spec:
      containers:
      - args:
        ...
        resources:
          requests:
            cpu: 200m
...
&lt;/pre&gt;
&lt;p&gt;So I added that section to &lt;tt class="docutils literal"&gt;worker.yaml&lt;/tt&gt;...&lt;/p&gt;
&lt;pre class="code diff literal-block"&gt;
&lt;span class="gh"&gt;diff --git a/blogpost/robust-worker.yaml b/blogpost/robust-worker.yaml
index e57db12..de52320 100644
&lt;/span&gt;&lt;span class="gd"&gt;--- a/blogpost/robust-worker.yaml
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/blogpost/robust-worker.yaml
&lt;/span&gt;&lt;span class="gu"&gt;&amp;#64;&amp;#64; -42,15 +42,18 &amp;#64;&amp;#64; spec:
&lt;/span&gt;         tier: worker
     spec:
       containers:
&lt;span class="gd"&gt;-      - image: &amp;quot;buildbot/buildbot-worker:master&amp;quot;
&lt;/span&gt;&lt;span class="gi"&gt;+      - image: &amp;quot;quay.io/elijahcaine/buildbot-rust-worker:master&amp;quot;
&lt;/span&gt;         name: worker
&lt;span class="gi"&gt;+        resources:
+          requests:
+            cpu: 200m
&lt;/span&gt;         env:
         - name: BUILDMASTER
           value: master
         - name: BUILDMASTER_PORT
           value: '9989'
         - name: WORKERNAME
&lt;span class="gd"&gt;-          value: example-worker
&lt;/span&gt;&lt;span class="gi"&gt;+          value: rust-worker
&lt;/span&gt;         - name: WORKERPASS
           value: pass
         - name: WORKER_ENVIRONMENT_BLACKLIST
&lt;/pre&gt;
&lt;p&gt;... and ran &lt;tt class="docutils literal"&gt;kubectl replace &lt;span class="pre"&gt;-f&lt;/span&gt; worker.yaml&lt;/tt&gt;, but did it work?
Well, if you're impatient like me you'll keep refreshing, it won't look like it's working, and then you'll pull your hair out.
If that happens to you, just wait.
Wait like... a minute.
Just get some tea, stare out the window for a second, &lt;em&gt;then&lt;/em&gt; see if it worked or not.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ kubectl get hpa worker
NAME              REFERENCE                    TARGET    CURRENT   MINPODS   MAXPODS   AGE
worker            Deployment/worker            50%       0%        1         5         2m
&lt;/pre&gt;
&lt;p&gt;There. That looks good. Let's throw some work at it!&lt;/p&gt;
&lt;p&gt;A few builds:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
NAME              REFERENCE                    TARGET    CURRENT   MINPODS   MAXPODS   AGE
worker            Deployment/worker            50%       536%      1         5         6m
&lt;/pre&gt;
&lt;p&gt;Great! Let's check up on Buildbot:&lt;/p&gt;
&lt;img alt="Replication failing." class="align-center" src="/assets/images/buildbot-on-k8s/replicas-didnt-work.png" style="width: 100%;" /&gt;
&lt;p&gt;Ruh-roh that's not good...&lt;/p&gt;
&lt;p&gt;Let's dig in a bit.&lt;/p&gt;
&lt;img alt="Replication failing -- zoom, enhance." class="align-center" src="/assets/images/buildbot-on-k8s/failed-build.png" style="width: 100%;" /&gt;
&lt;p&gt;That's not good...&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[... end of git pull ...]
75  security_updates_as_of=2016-10-07
76  using PTY: False
77  Cloning into '.'...
78
79  command interrupted, attempting to kill
80  process killed by signal 15
81  program finished with exit code -1
82  elapsedTime=2.051445
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
[... entirety of 'cancelled' logs ...]
0  no reason
&lt;/pre&gt;
&lt;p&gt;Well, it looks like that plan didn't work.&lt;/p&gt;
&lt;p&gt;I did a bit more digging and I can say with certainty that the approach I took to scaling the workload did &lt;em&gt;not&lt;/em&gt; work.
I can't say &lt;em&gt;why&lt;/em&gt; for sure, and I definitely can't say how to fix it, but honestly... it's late.
I'm tired and right now I'm okay with throwing in the towel for now.
Maybe we'll solve this in a &lt;strong&gt;Part 2&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="debrief"&gt;
&lt;h2&gt;Debrief&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;First: This blogpost has a repo associated with it: &lt;a class="reference external" href="https://github.com/elijahcaine/buildbot-on-kubernetes"&gt;https://github.com/elijahcaine/buildbot-on-kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please check that out, see what it has to offer, and make issues/pull requests.
Right now it's just a copy of the configs used in this project and a little bit of documentation.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm terrible at endings so I'm just gonna braindump some stuff here and let you, the beautiful and charming reader, find your own closure from all of this.&lt;/p&gt;
&lt;div class="section" id="failure-its-what-s-on-the-menu"&gt;
&lt;h3&gt;Failure: its what's on the menu&lt;/h3&gt;
&lt;p&gt;That's right, I didn't do what I set out to achieve.
Is that a bad thing?
&lt;strong&gt;Of course not!&lt;/strong&gt;
To quote the great Jake the Dog:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://www.reddit.com/r/QuotesPorn/comments/18a7m2/sucking_at_something_is_the_first_step_jake_the/"&gt;&lt;img alt="Sucking at something is just the first step to being kinda good at something..." class="align-center" src="/assets/images/buildbot-on-k8s/sucking-quote.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Sure we didn't get the &lt;em&gt;perfect&lt;/em&gt; BuildBot+K8s but we learned a ton and got &lt;em&gt;really&lt;/em&gt; close!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-stuff-we-learned"&gt;
&lt;h3&gt;Some stuff we learned&lt;/h3&gt;
&lt;p&gt;So what are some things we learned that we should probably write down?
This is a pretty open question and if you followed along you'll &lt;em&gt;probably&lt;/em&gt; get a drastically different list than I have.
Here's the big things I feel like I'm walking away with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;kubectl &amp;lt;command&amp;gt; --dry-run -o yaml&lt;/cite&gt; is very useful for file-izing your infrastructure.&lt;/li&gt;
&lt;li&gt;K8s is very well documented &lt;strong&gt;if&lt;/strong&gt; you are a very patient individual.&lt;/li&gt;
&lt;li&gt;Storage in K8s is still not a perfectly solved problem &lt;a class="citation-reference" href="#storage" id="id9"&gt;[storage]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;K8s applications share private networking.&lt;/li&gt;
&lt;li&gt;K8s Pods are really just containers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm sure there's a ton more I've internalized and can't recall.
I tried to take thorough notes during this entire experience to capture the failures as well as the successes, which is a harder skill than I expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="useful-resources"&gt;
&lt;h3&gt;Useful resources&lt;/h3&gt;
&lt;p&gt;Beyond searching for specific answers these are &lt;em&gt;honestly&lt;/em&gt; the websites I kept going back to throughout this project.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kubernetes.io/docs/"&gt;http://kubernetes.io/docs/&lt;/a&gt;
The main K8s docs.
A bit dense and sparse in key areas, a problem I'm actively I'm working on.
Includes API docs and user-guides which are useful for those patient enough to read them.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://k8s.info/"&gt;http://k8s.info/&lt;/a&gt;
A community-run resource with some useful links and a 'cheat sheet'.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/community"&gt;https://github.com/kubernetes/community&lt;/a&gt;
Includes a bunch of very useful design documentation.
I'm not usually the kind of person that enjoys reading design docs, but sometimes a feature is too new to have a usable user-guide.
When it's the best you've got, take it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As far as Buildbot-specific stuff I honestly just used the &lt;a class="reference external" href="https://docs.buildbot.net/current/"&gt;official Buildbot docs&lt;/a&gt; which were more than enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whats-next"&gt;
&lt;h3&gt;Whats next?&lt;/h3&gt;
&lt;p&gt;I'm sure I'll be posting more about K8s going forward.
It is a very useful tool because of/despite it's complexities.
As I use it I'll post more about it.&lt;/p&gt;
&lt;p&gt;If you have any feedback on this post feel free to get in contact with me &lt;a class="reference external" href="https://twitter.com/pastywhitenoise"&gt;&amp;#64;PastyWhiteNoise&lt;/a&gt; on Twitter, &lt;tt class="docutils literal"&gt;pop&lt;/tt&gt; on &lt;a class="reference external" href="https://webchat.freenode.net/"&gt;irc.freenode.net&lt;/a&gt; &lt;a class="citation-reference" href="#irc" id="id10"&gt;[irc]&lt;/a&gt;, you can make an issue on &lt;a class="reference external" href="https://github.com/elijahcaine/elijahcaine.github.io"&gt;this website's Github Repository&lt;/a&gt;, and of course I can be reached by Carrier Pigeon..&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="errata"&gt;
&lt;h2&gt;Errata&lt;/h2&gt;
&lt;table class="docutils citation" frame="void" id="docs-should" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[docs-should]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class="first"&gt;My job, at least a big part of it, is writing documentation.
Docs are a notable part of my identify, and I have a belief in the power of good documentation, but at the end of the day they &lt;strong&gt;are&lt;/strong&gt; just a means to an end.&lt;/p&gt;
&lt;p&gt;In a perfect world docs wouldn't &lt;em&gt;need&lt;/em&gt; to exist, so all docs should be enough to get whoever's readin them to the point where they can do cool shit on their own.
Just like a great cinematographer is so good you don't notice the camera in a movie, great docs should be so good you don't &lt;strong&gt;notice&lt;/strong&gt; how good they are.&lt;/p&gt;
&lt;p&gt;So that's why I like &lt;strong&gt;doing&lt;/strong&gt; cool shit over &lt;strong&gt;reading&lt;/strong&gt; about it.&lt;/p&gt;
&lt;p class="last"&gt;It's also fun to play with toys! Even if those toys are software.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="theory-vs-practice" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[theory-vs-practice]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If you read that and thought &amp;quot;You know what they say about theory versus practice!&amp;quot; then &lt;em&gt;yes&lt;/em&gt; -- but you're getting ahead of me.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="same-app-note" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[same-app-note]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class="first"&gt;It wasn't painfully obvious to me so it's worth elaborating that for K8s services to communicate with one-another they need to be part of the same &lt;tt class="docutils literal"&gt;app&lt;/tt&gt;.
In the example the &lt;tt class="docutils literal"&gt;postgres&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;worker&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; containers are all part of the same &lt;tt class="docutils literal"&gt;buildbot&lt;/tt&gt; app.&lt;/p&gt;
&lt;p class="last"&gt;It's not a terribly well documented &lt;strong&gt;key&lt;/strong&gt; piece of information so it seemed worth mentioning.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="hpa-gh" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[hpa-gh]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/openshift/origin/issues/6239"&gt;https://github.com/openshift/origin/issues/6239&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/issues/18652"&gt;https://github.com/kubernetes/kubernetes/issues/18652&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="hpa-so" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[hpa-so]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/38874145/autoscaling-hpa-failed-to-get-cpu-consumption-cannot-unmarshal-object-into-go"&gt;http://stackoverflow.com/questions/38874145/autoscaling-hpa-failed-to-get-cpu-consumption-cannot-unmarshal-object-into-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/37631008/kubernetes-hpa-cannot-get-cpu-consumption"&gt;http://stackoverflow.com/questions/37631008/kubernetes-hpa-cannot-get-cpu-consumption&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="heapster-release" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[heapster-release]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;div class="first last line-block"&gt;
&lt;div class="line"&gt;Authors Note:&lt;/div&gt;
&lt;div class="line"&gt;The heapster addon was added to Minikube &lt;strong&gt;during the writing of this post&lt;/strong&gt;.
How convenient!&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="accompanying-repo" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[accompanying-repo]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/ElijahCaine/buildbot-on-kubernetes"&gt;https://github.com/ElijahCaine/buildbot-on-kubernetes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="irc" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id10"&gt;[irc]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I usually hang out in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;#osu-lug&lt;/span&gt;&lt;/tt&gt; channel.
They're cool people, you should hang out with us!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[why]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class="first"&gt;Might as well clarify &lt;em&gt;why&lt;/em&gt; we want persistent storage and auto-scaling since these are usually desired features in an orchestrator but nobody explains &lt;em&gt;why&lt;/em&gt; they're desireable.&lt;/p&gt;
&lt;dl class="last docutils"&gt;
&lt;dt&gt;Autoscaling:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Autoscaling is important is because we've got a whole data-center (in theory) and we want to maximize how we use that data-center's computational abilities.
In a perfect world we would use exactly as much of the data-center as is demanded by users, but in practice this is super hard!&lt;/p&gt;
&lt;p&gt;Say your website gets linked on Hacker News, you get tons of requests pouring in, but your poor little 2004 server falls on it's face when you &lt;em&gt;look&lt;/em&gt; at it wrong, and &lt;strong&gt;that&lt;/strong&gt; is where the exact page was hosted.
If you don't &lt;strong&gt;know&lt;/strong&gt; that server fell down you'll never fix the problem or even &lt;strong&gt;know&lt;/strong&gt; about the problem.&lt;/p&gt;
&lt;p class="last"&gt;With an orchestrator we can (in theory) specify how much we want to utilize a our data-center's resources and under what conditions we want to use more or less resources.
If our service is creating a light load, only have one container up; if it's got a metric fuck-ton then spin up 20 containers across our entire cluster.
You say what you want and the load-balancer + scheduler + monitor take care of the rest.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Persistent Storage:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;The reason persistent storage is a useful feature is for two reasons&lt;/p&gt;
&lt;p&gt;The first is that containers are ephemeral.
They can be created, destroyed, and upgraded &lt;em&gt;all&lt;/em&gt; the time, basically making them the polar opposite of a 'Special Snowflake' service.&lt;/p&gt;
&lt;p&gt;This is nice, but what about state?
As nice as it'd be to make an entirely stateless data-center, cat pictures and builds aren't going to store themselves!&lt;/p&gt;
&lt;p&gt;The solution to this problem is -- well it's not solved, but there's a clear direction things are going in.
The TLDR is that we create some block device in the cloud and mount it to each identical container at the same mount-point, so each container (K8s 'Pod') shares some amount of state.
Sorta like... I'm bad at examples actually. I'll think of one eventually.&lt;/p&gt;
&lt;p&gt;Piggy-backing off of this, not only do we preserve state between container upgrades/deletes/additions, but we can also share state between scaled services (i.e., a set of identical containers across a datacenter).
Essentially we can have one worker pod carry out a build and another pod perform some action on that build (uploading it, verify it, archive it, etc).
When the first worker pod gets deleted the build lives on in the shared state.&lt;/p&gt;
&lt;p class="last"&gt;This allows us to treat our state the same way we treat computing resources in the world of GIFFEE &lt;a class="citation-reference" href="#gifee" id="id12"&gt;[GIFEE]&lt;/a&gt;.
Create some block device for the service, mount it to this point, and let your orchestrator take care of the rest.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="gifee" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id12"&gt;[GIFEE]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Google Infrastructure for Everyone Else&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="storge" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[storge]&lt;/td&gt;&lt;td&gt;But neither is storage in general so who can blame 'em?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="CoreOS"></category><category term="Kubernetes"></category><category term="Buildbot"></category><category term="Adventure"></category></entry><entry><title>Lady Wangle</title><link href="/creative-writing/lady-wangle" rel="alternate"></link><published>2016-09-14T00:00:00-07:00</published><updated>2016-09-14T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-09-14:/creative-writing/lady-wangle</id><summary type="html">&lt;p class="first last"&gt;A baroness looks at the Mona Lisa and sees her newborn baby in the background.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="prompt"&gt;
&lt;h2&gt;Prompt&lt;/h2&gt;
&lt;blockquote&gt;
A baroness looks at the Mona Lisa and sees her newborn baby in the
background. - &lt;a class="reference external" href="https://twitter.com/MagicRealismBot/status/768207599468634113"&gt;MagicRealismBot&lt;/a&gt;&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Lady Wangle (of the prestigious Canadian Royalty) flew to the Louvre for her
27th birthday.  In past visits she had always marveled at the beautiful marble
statutes, historic illustrations, and the grandiose building itself.  She
always loved the glass pyramid, even if she didn't really see how it fit with
the rest of the architecture.  The Louvre was a special place in her heart.&lt;/p&gt;
&lt;p&gt;She wanted to bring her newborn daughter &lt;em&gt;Anna&lt;/em&gt; with but her husband &lt;em&gt;Harold&lt;/em&gt;
was concerned about the baby flying only two months after being born.  L.W.
offered to cancel the trip but he insisted that she go saying &lt;em&gt;&amp;quot;Sweetie,
you've been taking care of this baby for nine months.  You can take a week
off.  You deserve it.&amp;quot;&lt;/em&gt;  L.W. wasn't one to fight over things like this so she
packed for a three-day trip and went off to Paris.&lt;/p&gt;
&lt;p&gt;As an early riser, or perhaps just a jet-lagged riser -- she always wanted to
be an early riser but it wasn't in her genes.  Regardless, she was up early.
She didn't like the dark of mid January mornings, but that animosity was more
or less evened out by her love of being alone in the quiet frigid winter air.
She saw that the museum wouldn't open for another two hours and so she
adventured toward the big Ferris Wheel East of the museum.  She ultimately
intended to walk by the riverfront but settled for seeing some sights first.
She hadn't been to Paris in many years and was curious to see how it had
changed.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;To her disappointment nothing had really changed in Paris.  She supposed that
was part of the charm; it was tastefully timeless.  One could come back year
after year and get the same Paris they'd gotten before.  Friends could visit
separately and talk about some hole-in-the-wall cafe they'd found independent
of one-another.  Any city built on a certain level of tourism &lt;strong&gt;had&lt;/strong&gt; to keep
the high-lights stable.&lt;/p&gt;
&lt;p&gt;The museum opened and a small line had started to form.  She got in line and
held idle chit-chat with a couple from Dallas, Texas.  Their names were
Jeffery and Matilda Almond. They were eager to share that this was their way
of celebrating their 30th Anniversary with &lt;em&gt;'the honeymoon they never had'&lt;/em&gt;.
L.W. asked who was partial to seeing the Louvre to which Jeff proudly
exclaimed &lt;em&gt;&amp;quot;It was all Matilda.  She got a degree in ART ya' know -- she's
real smart.  Most of this stuff goes way over my head but she's there to
explain it to me.&amp;quot;&lt;/em&gt;  Matilda blushed, she was the quiet one and Jeff was the
loud one of the pair, but she could tell they got along anyway.  L.W. smiled
at this and with that the conversation awkwardly petered out.&lt;/p&gt;
&lt;p&gt;L.W. always made a bee-line for the Mona Lisa when she went to the Louvre.
She made the mistake of meandering there on one of her trips but by the time
she got to it it was too crowded (&lt;em&gt;only two hours after opening!&lt;/em&gt;) to see it.
She raced all of the Asian tourist families with their massive &lt;em&gt;Canon DSLR&lt;/em&gt;
cameras and was one of the first pairs of eyes to see it that day.  She took
it all in, noting yet again how much smaller it looks in real-life.&lt;/p&gt;
&lt;p&gt;Wave after wave she took the piece in.  She knew there were better paintings
in the Louvre but something resonated with her about the &lt;em&gt;Mona Lisa&lt;/em&gt;.
Something was special, some connection... was that... was that Anna in the
background?  L.W.  peered at the piece and realized that an exact replication
of her daughter --&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;I'm sorry reader.  I can't do it.  I built this up too much and now... now the
... I'm not even sure what to call it. The punchline? It doesn't make any
sense.  I know the point of the MagicRealismBot stories isn't to make
something that &lt;em&gt;makes sense&lt;/em&gt; in a logical sense, but like... it should at
least be &lt;em&gt;consistent&lt;/em&gt; and actions should be justified.  I'm not trying to
write an &lt;strong&gt;'and then'&lt;/strong&gt; story I'm trying to write a &lt;strong&gt;'therefore, and so'&lt;/strong&gt;
story.&lt;/p&gt;
&lt;p&gt;I apologize.  This was just a bad story to begin with.  I avoided the prompt
for the majority of it anyway.  I even ignored that I had started this for
almost three weeks, hoping I'd come back and the story would magically &lt;em&gt;become
better&lt;/em&gt;.  I know that's not &lt;em&gt;necessarily&lt;/em&gt; a bad thing, but in this case it
wasn't a good sign -- delaying the inevitable usually means one is dread it.
That is kind of a necessity with these, take what you like from a prompt and
push the rest to the side, barely quantifying the thing as 'written from the
prompt'.&lt;/p&gt;
&lt;p&gt;Anyway, I'm rambling now.  Thank you for reading, it means a lot.  I'll try to
do something more -- I don't know --  &lt;strong&gt;more better&lt;/strong&gt; in the future.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Creative Writing"></category><category term="MagicRealismBot"></category></entry><entry><title>Paperweight on my shoulders</title><link href="/creative-writing/paperweight-on-my-shoulders" rel="alternate"></link><published>2016-08-30T00:00:00-07:00</published><updated>2016-08-30T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-08-30:/creative-writing/paperweight-on-my-shoulders</id><summary type="html">&lt;p class="first last"&gt;A paperweight whispers to a mathematician: &amp;quot;I feel so depressed.&amp;quot;&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="prompt"&gt;
&lt;h2&gt;Prompt&lt;/h2&gt;
&lt;blockquote&gt;
A paperweight whispers to a mathematician: &amp;quot;I feel so depressed.&amp;quot; -
&lt;a class="reference external" href="https://twitter.com/MagicRealismBot/status/770382059319595008"&gt;MagicRealismBot&lt;/a&gt;&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Fredrick Gustav was working well into the night as he was known to do in the
weeks preceding a publication of his work.  When he worked deep into the night
he took a drug called Caffeine in various forms from liquid to pill form to
stay awake.&lt;/p&gt;
&lt;p&gt;On the long nights he was also known to converse with furniture and inanimate
objects around the room which were up for a quick chat as he needed to rest.
If his 'people skills' were more astute (and there were people around to see
him) Fredrick might be embarrassed by his own behavior but the pros really did
outweigh the cons this late at night.  His bookshelf had many interesting
things to say but could sometimes overwhelm him.  His chair was also good to
talk with, but didn't get out much.&lt;/p&gt;
&lt;p&gt;Tonight Fredrick's paperweight decided to speak up.  It was a small manatee
Beanie Baby and it started the conversation similar to how his bottom drawer
tended to:&lt;/p&gt;
&lt;p&gt;&amp;quot;I feel so depressed.&amp;quot;&lt;/p&gt;
&lt;p&gt;Fredrick was shocked by the plush manatee.  It had never spoken up before and
quite frankly he wasn't sure it was able to until just now.  After the shock
subsided he responded.&lt;/p&gt;
&lt;p&gt;&amp;quot;Well you're a new voice.  What might your name be there beanie baby manatee?&amp;quot;&lt;/p&gt;
&lt;p&gt;BBM sighed and reflected on the question but was unable to answer.&lt;/p&gt;
&lt;p&gt;&amp;quot;Do you have a name?  You've been around this office for almost a year now, it
seems about time I learned what to call you.&amp;quot;&lt;/p&gt;
&lt;p&gt;BBM responded positively to this idea and so Fredrick began the search for a
name.&lt;/p&gt;
&lt;p&gt;&amp;quot;Well, it seems like &lt;em&gt;Snooty&lt;/em&gt; is a pretty famous manatee in Florida.  Mind if
I call you that?&amp;quot;&lt;/p&gt;
&lt;p&gt;BBM responded shyly &amp;quot;Yeah... that sounds okay...&amp;quot;&lt;/p&gt;
&lt;p&gt;Fredrick, not picking up on the hesitation in BBM's voice, carried on proud of
his naming abilities and ready for the rest of the night.&lt;/p&gt;
&lt;p&gt;&amp;quot;Wonderful.  So my next question is 'Why do you feel depressed Snooty?'&amp;quot;&lt;/p&gt;
&lt;p&gt;Snooty, who had not yet fully accepted the name, felt it was obvious why.  She
had been stuck in this office for over a year and why?  She was bought by a
mother and daughter and had &lt;em&gt;hoped&lt;/em&gt; that she would be adopted by them, but of
course she ended up being taken in by an old fart like Fredrick.  She couldn't
tell him that but it was how she felt.  Somehow she wanted to get out of here
and into the &lt;em&gt;real world&lt;/em&gt;.  She wanted to go to the park with a kid who named
her something infinitely more creative than 'Snooty'.  She wanted to go on
adventures and see wonders of the world outside people called &lt;em&gt;Cincinnati&lt;/em&gt;.
Despite her fear of his reaction she quickly mustered up the gumption to tell
Fredrick.&lt;/p&gt;
&lt;p&gt;&amp;quot;I'm depressed because... because I'm stuck in this office when I could be on
adventures with a kid.  Adventures like... like I'm supposed to be on.&amp;quot;&lt;/p&gt;
&lt;p&gt;Fredrick reflected on this for a while.  Glancing between her and the seventh
draft of his publication. He finally spoke up.&lt;/p&gt;
&lt;p&gt;&amp;quot;I understand.  If I were you I'd want to get out of this office too.  Maybe
my daughter can find a good home for you, she works with children.&amp;quot;&lt;/p&gt;
&lt;p&gt;Snooty was very excited at this prospect and if she could physically smile she
would have just then.&lt;/p&gt;
&lt;p&gt;A few hours later Fredrick called it a night, packed up his things, and went
home with Snooty in his briefcase.  He arrive home at almost 2:47am and left
Snooty in the keys bowl.  He felt sad sometimes, coming home late to an empty
house.  Even his paper weight didn't like him, how could expect his wife and
children to do the same.  But he got up the next morning and did it all again.
At least he'd have his office to keep him company.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Creative Writing"></category><category term="MagicRealismBot"></category></entry><entry><title>Self Censorship and the Social Justice Warrior</title><link href="/op-ed/self-censorship-and-social-justice" rel="alternate"></link><published>2016-08-24T00:00:00-07:00</published><updated>2016-08-24T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-08-24:/op-ed/self-censorship-and-social-justice</id><summary type="html">&lt;p class="first last"&gt;Thoughts and opinions about our relation with the media we consume. Or something like that...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This post is an articulation of &lt;em&gt;feelings&lt;/em&gt; I have been mulling over about
internet media and culture, a subject I have no academic qualification to speak
on but have strong feelings about.  I don't intend for this to be inflammatory
or contrarian but if it helps start a discussion I'll be happy. My only
intention is to contribute to an important conversation.  I appreciate you
taking the time to read it and hope you get something out of it.&lt;/p&gt;
&lt;div class="section" id="definition"&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;Wikipedia (I trust it, don't you?) has an entry on self-censorship which
starts:&lt;/p&gt;
&lt;blockquote&gt;
Self-censorship is the act of censoring or classifying one's own blog, book,
film, or other forms of media. This is done out of fear of, or deference to,
the sensibilities or preferences (actual or perceived) of others and without
overt pressure from any specific party or institution of authority.
Self-censorship is often practiced by film producers, film directors,
publishers, news anchors, journalists, musicians, and other kinds of authors
including individuals who use social media.&lt;/blockquote&gt;
&lt;p&gt;You're welcome to look at a few definitions which are more broad (&lt;a class="reference external" href="http://dictionary.cambridge.org/us/dictionary/english/self-censorship"&gt;Cambridge
def&lt;/a&gt;, &lt;a class="reference external" href="http://www.oxforddictionaries.com/definition/english/self-censorship"&gt;Oxford def&lt;/a&gt;). I actually like using the Wikipedia entry, so I'll be
using it in this piece.&lt;/p&gt;
&lt;p&gt;There are a few highlights of the Wiki entry that I want to point out:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Self-censorship can be caused by real or perceived sensibilities.&lt;/li&gt;
&lt;li&gt;It is done out of fear or deference (submission/respect for others wishes).&lt;/li&gt;
&lt;li&gt;It is mostly a voluntary action practiced by creators.&lt;/li&gt;
&lt;li&gt;It is practiced by individuals producing everything from &amp;quot;big media&amp;quot; to
social media.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like these four points because they set up a conflict I want to
explore: the Creator versus the Consumer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consumer"&gt;
&lt;h2&gt;Consumer&lt;/h2&gt;
&lt;p&gt;The consumer watches, reads, or listens to something and when they find a
discrepancy which does not fit their mental model for what &lt;em&gt;that media&lt;/em&gt; should
do, they have the option to point it out.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;This character is a crude portrayal of bi-sexuality.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;This line was offensive to the elderly.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;This scene triggered me because I was almost killed in a car accident.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The consumer points it out directly with the creator, to the creator publicly,
or to the public and not directly with the creator at all.  This archetype is
almost always acting in the interest of a racial, gendered, sexual, or social
minority and often they do so &lt;em&gt;on behalf&lt;/em&gt; of minorities which they themselves
are not apart of.&lt;/p&gt;
&lt;p&gt;As a feminist I agree with the consumer’s intentions and with each individual
consumer who voice their concerns.  Just like a writer doesn't improve without
feedback so to a content creator cannot mindfully make more respectful work
without being made aware of the mistakes they have made.  Each individual
consumer, with exceptions of course, is a good person doing the right thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creator"&gt;
&lt;h2&gt;Creator&lt;/h2&gt;
&lt;p&gt;The creator wants to share an idea with the world.  They have the burning urge
to write, blog, podcast, televise, film, tweet, tumblr, paint, compose, etc.
Their intentions are also (usually) good.  This archetype wants to create
something great and share it with the world, or at the very least some
sub-culture they identify with.&lt;/p&gt;
&lt;p&gt;When the creator &lt;em&gt;creates something&lt;/em&gt; they inevitably put a part of themselves
into &lt;em&gt;that thing&lt;/em&gt;.  When a consumer points out what &lt;em&gt;that something&lt;/em&gt; should
have done differently they are often a small voice in a hurricane of feedback.
This hurricane is often filled with positive feedback but the silent majority
that appreciate something often say nothing while the loud minority openly
share their thoughts and criticisms. Those who speak up are also known to
forget that a human being is going to read what they just hit &lt;strong&gt;send&lt;/strong&gt; on.
Even if the feedback is ultimately constructive the content creator is known
to only see the bad and fight to see the good. As a result of this personal
shit-storm for the creator, continuing to create becomes a fight against both
the creativity but also against their fans who care enough to &lt;em&gt;give them that
feedback&lt;/em&gt;, but deliver it in a hurtful or stressful way.  There have been many
stories in which a content creator who wanted to put themselves out there was
forced to pull back because of circumstances like these.&lt;/p&gt;
&lt;p&gt;This is best explained with an example, so here is an expert from an article
on The A.V. Club:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.avclub.com/article/steven-universe-writer-gets-hounded-twitter-fans-241092"&gt;Steven Universe writer gets hounded from Twitter by fans&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[...]&lt;/p&gt;
&lt;p&gt;The online backlash was apparently quick, powerful, and seemingly coming
from two different directions: â€™shippers, irritated and outraged by what
they saw as Zuke pushing the agenda of her preferred pairing, and others
who accused the Cartoon Network show of engaging in â€œqueer baiting.â€
Among other definitions, the term refers to TV and film producers
introducing perceived sexual tension between two same-sex characters with
no intent of ever bringing the relationship to fruition, and is decried by
critics as a manipulative use of sexuality in order to draw in viewers and
attention.&lt;/p&gt;
&lt;p&gt;The criticism and attackers were apparently strong and frequent enough that
Zuke decided to shut down her social media presence, and close herself off
to â€œthousands of people who think because I work on a TV show that I owe
them myself all the time.â€ Her account has since been deleted, but a
screenshot of her last tweets is currently making the rounds online.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this instance the writer of a very progressive kids show (which I proudly
watch with my other adult friends) was ridiculed for... what?  Not being
perfect?  Not flawlessly pushing every equality agenda at once?  Ultimately it
may have been held to a &lt;em&gt;higher standard&lt;/em&gt; but to what end?&lt;/p&gt;
&lt;p&gt;Modern creators are being pushed and prodded by tens to hundreds to thousands
of tiny voices saying &amp;quot;This isn't right, do this better.&amp;quot;  As a result both
new and experienced creators feel a pressure to craft something which is
&lt;em&gt;perfect&lt;/em&gt; and &lt;em&gt;devoid of that which can be critiqued and judged&lt;/em&gt;.  A whole
generation of writers, directors, and story tellers are afraid to say
&lt;em&gt;anything&lt;/em&gt; because it &lt;em&gt;might&lt;/em&gt; be panned for it's imperfections and/or
perceived agenda.  The unfortunate part is that many forget that your work
&lt;em&gt;will&lt;/em&gt; be critiqued no matter what you say.  In twenty years we'll be looking
back at 2016 and be flabbergasted by our ignorance about... I don't know --
laugh tracks.  The point being that we are not perfect creatures and so too
our creators are imperfect. We collectively acknowledge that, yet the creator
is punished harshly when they make a mistake, receiving a punishment which
does not match the crime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The main takeaway from all of this is that we should try to be mindful of the
creator's imperfections when pointing them out.  Time and time again the mass
of the internet is able to devastate the creators we have and scare the
creator's we don't.  We all say stupid things that we don't remember are
offensive or haven't yet been informed is offensive; whether somebody said an
offensive thing to an audience of millions or an audience of one  we shouldn't
criticize them just because we can.  A friend of mine put it pretty well when
he said '&lt;em&gt;On this road to social justice we're not all on the same page, let's
cut them some slack.&lt;/em&gt;'&lt;/p&gt;
&lt;p&gt;I understand that I am saying this to nobody in particular.  The problems,
fear, and &lt;em&gt;weight of the internet&lt;/em&gt; are not something I have &lt;em&gt;experience&lt;/em&gt; in;
they are a concern all the same.  I am not well known and I have not &lt;em&gt;created&lt;/em&gt;
nor been thrown into any &lt;em&gt;shit-storms&lt;/em&gt; I talk about.  Those close to me have
experienced this trauma and they warn others like an oracle warns adventurers
not to go into the dark forest.  I understand that self-censorship is not a new
problem by any means, but since the &lt;em&gt;dawn of time&lt;/em&gt; there have been
individuals scared of change for completely rational reasons.&lt;/p&gt;
&lt;p&gt;Be mindful of what you say and what you do not say on the internet.  As a fan
you have more influence than you think over the media you love.  Everything is
created by people &lt;em&gt;just like you&lt;/em&gt;.  Before you say something negative remember
that &lt;em&gt;a person will read it&lt;/em&gt;, so meditate on it before hitting &lt;em&gt;send&lt;/em&gt;.
Imagine reading it in the sea of everything else that person is dealing with.
Individuals should hold each other responsible but that doesn't mean you need
to &lt;em&gt;hurt&lt;/em&gt; them because they &lt;em&gt;offended&lt;/em&gt; you.  I wont advise you on when or how
to act because that is your responsibility.  If you find something truly
offensive of course you should tell the person who made it, but also remember
that you are in a unique position to be judge, jury, &lt;strong&gt;and&lt;/strong&gt; executioner, even
if it is only on a small scale.  Having this power, meter your response to
match the crime and &lt;em&gt;think&lt;/em&gt; before you &lt;em&gt;act&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We are all people.  We all want to do the right thing.  I don't mean to
discourage consumers from voicing their concerns, just to avoid &lt;em&gt;punishing&lt;/em&gt;
creators for imperfection.  In the world there is no good and bad only people
making the best of their situation with positive intentions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Internet Culture"></category><category term="Social Justice Warrior"></category><category term="Opinion"></category></entry><entry><title>Conceptual hurdles in programming</title><link href="/tech/programming-hurdles" rel="alternate"></link><published>2016-08-21T00:00:00-07:00</published><updated>2016-08-21T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-08-21:/tech/programming-hurdles</id><summary type="html">&lt;p class="first last"&gt;Sage advice for myself in Freshman year.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've been actively learning programming for almost five years now. I started
by taking a C++ class at Portland Community College.  That class was the best
thing to happen to my engineering career because it taught me that
&lt;em&gt;programming is very hard, and I am not naturally good at it&lt;/em&gt;, but it was also
very rewarding so I stuck with it.&lt;/p&gt;
&lt;p&gt;I'm not special either, most of us aren't very good at programming because
it's so abstract and hard to grasp, like Math and Infinite Jest. There are of
course the people that seem like &lt;em&gt;programming gods&lt;/em&gt;, but nine times out of ten
those people have been programming since they were eight and it's really not
fair to compare yourself to them.  That's like comparing your sporting
abilities to &lt;em&gt;any olympic athlete&lt;/em&gt;.  Don't be so hard on yourself.&lt;/p&gt;
&lt;p&gt;In learning to program, and now teaching others how to program, I've
identified a few &lt;strong&gt;hurdles&lt;/strong&gt; (mountains, cliffs, obstacles, w/e) that folks
tend to hit and have trouble crossing.  They always get past these hurdles
eventually (or they quit CS ☹), but not without a bit of unnecessary struggle.
Struggling builds character, and I don't want to cheat anybody out of that,
but I do want to help those that want it.&lt;/p&gt;
&lt;p&gt;This post will in no way guarantee your success in overcoming these obstacles
but it should at least give you a head start to help you understand what you're
learning and point you in the right direction when you want to ask a question.&lt;/p&gt;
&lt;div class="section" id="data-structures"&gt;
&lt;h2&gt;Data Structures&lt;/h2&gt;
&lt;p&gt;Understanding that &lt;strong&gt;a lot of programming is basically manipulating data to
fit a need&lt;/strong&gt; is pretty important.  A social network can be thought of as a
bunch of people's personal information plugged into a bunch of algorithms to
make connecting easier.  A word processor is really just a front-end for some
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Microsoft_Office_XML_formats"&gt;XML under the hood&lt;/a&gt;, which is itself &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;just a way to represent structured
data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When handling data try to keep in mind what you are trying to accomplish and
the best way to structure the data in the pursuit of that goal.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Array_data_structure"&gt;Arrays/Lists/Vectors&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;strong&gt;Arrays and Lists are an ordered data type&lt;/strong&gt;.  Use them when you need to
keep track of the order things happened in, like queuing an event.  Try to
keep them &lt;em&gt;relatively small&lt;/em&gt; since they are fast for retrieval but not
inherently space efficient.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hash_table"&gt;Hash-table/Key-Value/Dictionary&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;&lt;strong&gt;Hashes are useful for storing unordered data&lt;/strong&gt; with keys, like an address
book or a small database. We use them to access data quickly and easily
since data is retrieved using a key and always takes approximately the
same amount of time.  When you get data out of a dictionary you provide a
key and get back the associated data, just like (you guessed it) &lt;em&gt;a real
dictionary&lt;/em&gt; where provided the word you get back a definition.&lt;/p&gt;
&lt;p class="last"&gt;Hash-tables are useful tools but should only be used for &lt;em&gt;relatively
small&lt;/em&gt; amounts of data.  There is a bit of overhead in creating the table
for storing your data so if your data-set gets too big you'll run out of
memory.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Linked_list"&gt;Linked Lists/Sorted Trees&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Linked Lists and Sorted Trees aren't exactly the same thing but I'm
lumping them together because they both deal with a lot of the same
concepts and can be implemented in similar ways.  In learning about LL/ST
you'll probably deal with Structs, Nodes, Pointers, and dynamic memory
allocation, which if you're like me will totally break your brain and then
become second-nature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One advantage to these structures is that they can be implemented to
take up only the space they require&lt;/strong&gt;.  Where Hash-maps and lists are hard
to make the &lt;em&gt;right size&lt;/em&gt;, LL/ST can only take up exactly as much room as
they need.  The trade-off (a word you hear a lot when dealing choosing
data structures) is that they're not always the &lt;em&gt;fastest&lt;/em&gt; way to
store/retrieve data.  Just consider your use-case and think about what you
need for the task at hand.&lt;/p&gt;
&lt;p class="last"&gt;If you're interested in learning Rust though there's a great guide on
&lt;a class="reference external" href="http://cglab.ca/~abeinges/blah/too-many-lists/book/README.html"&gt;Learning Rust With Entirely Too Many Linked Lists&lt;/a&gt;. I do suggest it.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;strong&gt;These are all just the structures you're giving your data&lt;/strong&gt; (a series of
ones and zeros on disk and in memory).  Anybody that's done work with a
sufficiently complicated project (e.g., the Linux Kernel) can tell you that
one glob of data can be treated as a Linked List, Array, Hash -- or all three
at the same time!  The structure you give your data is just so &lt;em&gt;you&lt;/em&gt; can work
with it, the computer doesn't really care one way or another, so choose what
makes the most sense.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Speaking of data structures...&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objects-classes"&gt;
&lt;h2&gt;Objects/Classes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Objects are logical groupings of data (variables) and functions that act on
that data&lt;/strong&gt;.  They differ from structs in that they are (usually) private by
default, meaning that variables declared in an object are not accessible from
the &lt;em&gt;outside&lt;/em&gt; unless you explicitly say so. Variables are usually manipulated
via a method called a &lt;em&gt;getter&lt;/em&gt; and &lt;em&gt;setter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Well... what I've actually described so far is creating a &lt;strong&gt;class: aka a
blueprint for an object&lt;/strong&gt;.  This python is a pretty succinct way to describe
classes and objects:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
objects_example.py

Declare a class named BazClass.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BazClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
        The __init__ function sets class variables and sets up the object.
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
        a() acts on the object variables (accessed via `self`).
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Variable you set {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Variable set by class definition {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
Creating an instance of the class and call the `a()` function.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;foo_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BazClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;foo_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Objects are something that will &lt;em&gt;click&lt;/em&gt; after you use the for a while.
There's some nuances and implementation quirks depending on the language
you're using, but in the end they're just logical collections of private data
and functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-programming"&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Functional Programming&lt;/a&gt; (FP) was my first big paradigm shift in CS since
functions.  FP includes concepts of variable immutability (once it's set it's
set), callbacks (functions calling functions and propagating results up),
program state -- the list goes on.  Here's an example to get us started.&lt;/p&gt;
&lt;p&gt;Non-functional paradigm:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;average_evens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;avg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Functional Paradigm:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;average_evens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In the non-functional example one would create a variable, iterate with a
for-loop, and return a variable at the end.  In the functional example you
call functions which return data that you handle (callback) and that result is
added to or replaces the original data.  I'm honestly not doing this topic
justice but it's one of those things you either learn first or you learn the
hard way.&lt;/p&gt;
&lt;p&gt;This is just the tip of the ice-berg; many people prefer functional
programming. If you are even remotely interested you should find one of
those people and let them talk your ear off.&lt;/p&gt;
&lt;p&gt;If you're learning functional programming I suggest either &lt;a class="reference external" href="http://learnyouahaskell.com/chapters"&gt;Learn You a
Haskell for Great Good&lt;/a&gt; if you're interested in learning Haskell (which is
interesting an interesting language if nothing else) or &lt;a class="reference external" href="http://www.oreilly.com/programming/free/functional-programming-python.csp"&gt;Functional
Programming in Python&lt;/a&gt; for &lt;em&gt;pythonistas&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frameworks"&gt;
&lt;h2&gt;Frameworks&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Frameworks are a collection of libraries, methods, and tools to accomplish a
specific type of task&lt;/strong&gt;.  If you want to get something &lt;em&gt;complicated&lt;/em&gt; done
&lt;em&gt;fast&lt;/em&gt;, you'll use a framework.  Take for instance a web-app like Facebook or
Twitter: it needs to be able to &lt;em&gt;send/receive HTTP requests&lt;/em&gt;, &lt;em&gt;interface with
a database&lt;/em&gt; / &lt;em&gt;craft database queries&lt;/em&gt;, &lt;em&gt;render web-pages&lt;/em&gt;, &lt;em&gt;and&lt;/em&gt; whatever the
actual website is supposed to do.&lt;/p&gt;
&lt;p&gt;Frameworks can be very small or very large but they are always a big hurdle
for those of us that have never worked with one before.  A good starter
framework I suggest is &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; for Python-based web-apps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Testing is writing a program to test your program&lt;/strong&gt;.  There are many different
&lt;em&gt;kinds&lt;/em&gt; of tests from &lt;em&gt;unit tests&lt;/em&gt; (checking single functions), to
&lt;em&gt;integration tests&lt;/em&gt; (checking that your functions work &lt;em&gt;together&lt;/em&gt;), to &lt;em&gt;random
tests&lt;/em&gt; (trying to break your program by telling a computer to break your
functions by using they in weird ways).&lt;/p&gt;
&lt;p&gt;Remember that first program you wrote for class?  You wrote one that prompted
the user for data and then manipulated that input in some way?  Remember how
you tested that?  Probably in the most tedious way imaginable: &lt;strong&gt;by hand&lt;/strong&gt;.
Tests are much easier to write than your actual code and while they're a
tedious investment up-front it's a small commitment relative to the &lt;em&gt;hours&lt;/em&gt;
you'd spend checking your program every time you made a change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;The last thing isn't really about programming but about &lt;em&gt;fixing&lt;/em&gt; your
programming.  When you're learning a new paradigm, language, or framework
you're going to spend a lot of time &lt;em&gt;fixing&lt;/em&gt; what doesn't currently work much
more than you're going to actually be producing working code.  This skill can
also be summed up as 'How to Read Error Messages and Google well'.&lt;/p&gt;
&lt;p&gt;My troubleshooting advice is to &lt;em&gt;read&lt;/em&gt; the error message, don't give up,
and search for anything that looks meaningful.  Once you find an answer try to
&lt;em&gt;grok&lt;/em&gt; what the answer means so you can learn &lt;em&gt;why&lt;/em&gt; that worked instead of
knowing &lt;em&gt;if I type this in a certain way it will not fall down&lt;/em&gt;.  Future you
will appreciate the investment you put into &lt;em&gt;understanding&lt;/em&gt; the problem and
it's solution.&lt;/p&gt;
&lt;p&gt;Also don't be afraid to experiment. Make a copy of your program (or use
&lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;) and see if some crazy idea is exactly what you need.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;This list is far from complete but it still felt worth sharing.  If you think
I missed something, &lt;a class="reference external" href="/about/#contact"&gt;contact me&lt;/a&gt; and I might do a follow-up post.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Programming"></category><category term="Reference"></category></entry><entry><title>The MoonStone discovery</title><link href="/creative-writing/the-moonstone-discovery" rel="alternate"></link><published>2016-08-19T00:00:00-07:00</published><updated>2016-08-19T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-08-19:/creative-writing/the-moonstone-discovery</id><summary type="html">&lt;p class="first last"&gt;By looking at a fireplace, a medieval sorcerer can turn stone into moonstones.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="prompt"&gt;
&lt;h2&gt;Prompt&lt;/h2&gt;
&lt;blockquote&gt;
By looking at a fireplace, a medieval sorcerer can turn stone into
moonstones.  &lt;a class="reference external" href="https://twitter.com/MagicRealismBot/status/766606956295356420"&gt;MagicRealismBot&lt;/a&gt;&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Ellyn scrambled to take notes as fast as she could.  She had finally found a
way to produce &lt;strong&gt;MoonStone&lt;/strong&gt; and it would change &lt;em&gt;everything&lt;/em&gt;!  With
&lt;strong&gt;MoonStone&lt;/strong&gt; one could turn sand into gold, the living into the dead, and
countless other &lt;em&gt;theoretical&lt;/em&gt; properties she had read of.  Now that she was
able to produce that which had alluded sorcerers since the dawn of knowledge
the sky was the limit.&lt;/p&gt;
&lt;p&gt;She took her quill and parchment and wrote furiously.  She described in great
detail the position of the Sun in the Sky, the time of year, where she stood in
the room and where the room stood on Earth.  She knew every detail wouldn't be
important but every detail &lt;em&gt;could&lt;/em&gt; be so they all must be recorded.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;Standing my robes, staring intently at 12 BoilingRocks in the fireplace,
facing head-first at the display.&lt;/li&gt;
&lt;li&gt;The sun stands high in a Summer's fore-noon, just glancing through the
window unto the fireplace.&lt;/li&gt;
&lt;li&gt;After the duration of approximately three Hail Mary's the stones turned
white and fragile.&lt;/li&gt;
&lt;li&gt;The rocks no-doubt turned into &lt;strong&gt;MoonStones&lt;/strong&gt; as was theorized.  Their
shape and texture proves it so.&lt;ul&gt;
&lt;li&gt;The MoonStones glow faint white, matte and with hints of spiritual
aura.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;MoonStones&lt;/strong&gt; weigh substantially less than the BoilingRocks did,
perhaps losing mass in the process of transformation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;As she finished writing her findings she grabbed her wax and seal and marked
it to be delivered to her mentor Rowan.  He had spent the better part of his
long life (&lt;em&gt;76 years young!&lt;/em&gt;) attempting to find the secret to producing
&lt;strong&gt;MoonStone&lt;/strong&gt; from earthly materials but had come up empty-handed.  Ellyn felt
proud of her findings and was glad to be able to share it with Rowan.&lt;/p&gt;
&lt;p&gt;Moments later Ellyn sent off her findings with a sample of the &lt;strong&gt;MoonStone&lt;/strong&gt;
via the local carrier.  She told him to &lt;em&gt;take it with haste to Rowan&lt;/em&gt; and gave
the carrier an extra copper piece in hopes that he would.  The carrier ran off
down the road, the journey was almost a quarter day's travel so Ellyn returned
to her study.&lt;/p&gt;
&lt;p&gt;As she sat in wait studying the &lt;strong&gt;MoonStones&lt;/strong&gt;, she grew weary of her
findings.  Just a moment ago she was so sure of her discovery, but now that
she had sent off the finding she became... hesitant.  Was this &lt;strong&gt;MoonStone&lt;/strong&gt;
or perhaps the similar &lt;em&gt;SilverStone&lt;/em&gt;.  &lt;strong&gt;MoonStone&lt;/strong&gt; was only theoretical,
studied in the mind and never before in the hand; it had never been proven to
exist so what made her so sure that &lt;em&gt;this rock&lt;/em&gt; was what they had been
searching for.  She was, after all, just an apprentice sorcerer; what did she
know?  If Rowan determined her findings untrue what would stop him from
revoking his mentor ship?  Her years of study would be for naut.&lt;/p&gt;
&lt;p&gt;Ellyn had always been prone to worry. She took a deep breath and with nothing
else to do, she sat in wait.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Creative Writing"></category><category term="MagicRealismBot"></category></entry><entry><title>Git Does a Lot of Things</title><link href="/tech/git-does-a-lot-of-things" rel="alternate"></link><published>2016-07-27T00:00:00-07:00</published><updated>2016-07-27T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-07-27:/tech/git-does-a-lot-of-things</id><summary type="html">&lt;p class="first last"&gt;The title is really an understatement...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I should make a tool that extends &lt;tt class="docutils literal"&gt;git&lt;/tt&gt; to delete all of the files matched
by the &lt;tt class="docutils literal"&gt;.gitginore&lt;/tt&gt;.  I spend way too much time crafting &lt;tt class="docutils literal"&gt;find &lt;span class="pre"&gt;&amp;lt;...&amp;gt;&lt;/span&gt; |
xargs rm&lt;/tt&gt; commands.  I know, I'll call it &lt;tt class="docutils literal"&gt;git clean&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Well... before I get too far I'll just make sure it doesn't already exist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ man git clean

GIT-CLEAN(1)                  Git Manual                       GIT-CLEAN(1)

NAME
       git-clean - Remove untracked files from the working tree

SYNOPSIS
    git clean [-d] [-f] [-i] [-n] [-q] [-e &amp;lt;pattern&amp;gt;] [-x | -X] [--]
    &amp;lt;path&amp;gt;...

DESCRIPTION
    Cleans the working tree by recursively removing files that are not
    under version control, starting from the current directory.

    ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Huh... well I... that's pretty much exactly how I would have done it...&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;git&lt;/tt&gt; &lt;em&gt;tab tab&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;add                  filter-branch        relink
am                   format-patch         remote
annotate             fsck                 repack
apply                gc                   replace
archive              get-tar-commit-id    request-pull
bisect               grep                 reset
blame                help                 revert
branch               imap-send            review
bundle               init                 rm
checkout             instaweb             send-email
cherry               interpret-trailers   shortlog
cherry-pick          log                  show
clean                merge                show-branch
clone                mergetool            stage
column               mv                   stash
commit               name-rev             status
config               notes                submodule
credential           p4                   svn
describe             pull                 tag
diff                 push                 verify-commit
difftool             rebase               whatchanged
fetch                reflog               worktree
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ah, okay. I get it now. Git &lt;em&gt;does&lt;/em&gt; do a lot of things.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The above output is from &lt;cite&gt;git 2.8.2&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Git"></category><category term="Fun Facts"></category></entry><entry><title>Induction</title><link href="/comics/induction" rel="alternate"></link><published>2016-07-27T00:00:00-07:00</published><updated>2016-07-27T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-07-27:/comics/induction</id><summary type="html">&lt;p class="first last"&gt;This is literally all I know about proof by induction.&lt;/p&gt;
</summary><content type="html">&lt;span title="&amp;there4; Profit"&gt;&lt;img alt="Classic mathematics memes." class="align-center" src="/static/comics/induction.png" style="width: 100%;" /&gt;
&lt;/span&gt;</content><category term="Comic"></category><category term="Math"></category><category term="Induction"></category></entry><entry><title>Debra the ghoul</title><link href="/creative-writing/debra-the-ghoul" rel="alternate"></link><published>2016-07-02T00:00:00-07:00</published><updated>2016-07-02T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-07-02:/creative-writing/debra-the-ghoul</id><summary type="html">&lt;p class="first last"&gt;A ghoul and an archbishop are fighting over custody of their children.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="prompt"&gt;
&lt;h2&gt;Prompt&lt;/h2&gt;
&lt;blockquote&gt;
A ghoul and an archbishop are fighting over custody of their children.
&lt;a class="reference external" href="https://twitter.com/MagicRealismBot/status/749301833881915392"&gt;MagicRealismBot&lt;/a&gt;&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Just like every Friday night, Debra picked up her two daughters from her
ex-wife's house in Evanston and drove them downtown for the weekend.  As she
drove away in her red 2008 Corolla with them she got a text message from her
ex.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;From: Gwendolyn&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Debra,&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please bring Lilyan and Odell back by 9pm on Sunday.  They have school
Monday morning.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Debra became immediately filled with rage.  &lt;em&gt;'Of course they both have school
Monday morning!  I'm not stupid!  I've been doing this for four and a half
years goddammit.  How stupid does she think I am?  Christ she can be such a
--'&lt;/em&gt; and before she went down that rabbit hole she remembered what her
therapist said.&lt;/p&gt;
&lt;p&gt;&amp;quot;Just breath.  Everything is going to be okay.  This is just temporary.  Her
bitchy behavior only affects you if you let it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Debra drove a few more miles, her daughters in the back staying cautiously
silent.&lt;/p&gt;
&lt;p&gt;Eventually Lilyan spoke up. &amp;quot;Debora, why does mommy so mean to you?&amp;quot;
deliberately calling Debra (or &lt;strong&gt;Debora&lt;/strong&gt; in Lilyan's case) by her name and
Gwen by &lt;em&gt;'mommy'&lt;/em&gt;.  This used to bug Debra but she eventually became apathetic
toward the situation.  Gwendolyn had brainwashed the kids; she was honestly
just glad she was able to fight and keep her daughters on the weekends.&lt;/p&gt;
&lt;p&gt;&amp;quot;Why &lt;em&gt;is&lt;/em&gt; mommy so mean to me. And sweety, I'm a ghoul and that means that
&lt;em&gt;most&lt;/em&gt; people don't really like me.&amp;quot; Debra said matter-of-factly.&lt;/p&gt;
&lt;p&gt;&amp;quot;Like racism?&amp;quot; Lilyan asked.&lt;/p&gt;
&lt;p&gt;&amp;quot;Exactly like racism Lily.  And your mother is a Christian official called an
'Archbishop'.  For some reason, probably some squabble hundreds of years ago
[or maybe they've just always been biggots] none of your mother's bosses liked
that she was in a relationship me so she had to give it up.&amp;quot;&lt;/p&gt;
&lt;p&gt;There was a momentary pause as the girls thought this over.  Lilyan was six
and Odell was eight, neither of which were really prepared to fully process
what she was saying, but she wanted them to feel respected and independent so
she participated in their questions.  They were both technically Gwendolyn's
daughters with a donor, Debra would have had child if she was able to but
ghouls had a notorously difficult time doing anything related to &lt;em&gt;living&lt;/em&gt;,
creating life included.&lt;/p&gt;
&lt;p&gt;&amp;quot;But why does she not like you?&amp;quot; Lilyan finally asked.&lt;/p&gt;
&lt;p&gt;Debra sighed.  &amp;quot;Well, I think she doesn't like me because she wishes we could
still be together.  We had a very romantic fling in the beginning and we
really thought we could stay together but... well it wasn't meant to last.
She just thinks that this is the best way to deal with the situation.  Some
people would rather feel angry than sad.&amp;quot;&lt;/p&gt;
&lt;p&gt;Lilyan quickly followed up with the obvious &amp;quot;Do you feel sad Debora?&amp;quot;&lt;/p&gt;
&lt;p&gt;Debra thought for a moment. Lilyan asked again &amp;quot;Do you feel sad Debora?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Sometimes sweetie.  Sometimes I feel very sad and it makes it very hard to do
things like go to work and eat food.  Most of the time that happens I remind
myself how lucky I am to have you two to look forward to.&amp;quot;&lt;/p&gt;
&lt;p&gt;Lilyan didn't know what else to ask and so the three sat in silence as they
drove down Lake-Shore Drive.  The lamp posts cast yellow-tinged shadows on
their faces as they each looked out the windows.&lt;/p&gt;
&lt;p&gt;Odell finally spoke up, &amp;quot;What are we going to do this weekend?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Good question.  What do you guys want to do?  I was thinking we could go
mini-golfing once you get your homework done.  How does that sound?&amp;quot;&lt;/p&gt;
&lt;p&gt;They both groaned. Debra smiled &amp;quot;Well I guess it's settled. Mini putt-putt
tomorrow afternoon.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Creative Writing"></category><category term="MagicRealismBot"></category></entry><entry><title>Emperor Stan of Stantinople</title><link href="/creative-writing/emperor-stan-of-stantinople" rel="alternate"></link><published>2016-07-01T00:00:00-07:00</published><updated>2016-07-01T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-07-01:/creative-writing/emperor-stan-of-stantinople</id><summary type="html">&lt;p class="first last"&gt;An emperor owns a steam-powered device which allows him to destroy the past.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="prompt"&gt;
&lt;h2&gt;Prompt&lt;/h2&gt;
&lt;blockquote&gt;
An emperor owns a steam-powered device which allows him to destroy the
past.  &lt;a class="reference external" href="https://twitter.com/MagicRealismBot/status/749120629308203009"&gt;MagicRealismBot&lt;/a&gt;&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Emperor Stan of Stantinople, the most prosperous 1500 square feet in all of
&lt;strong&gt;Oak Burch Sunrise Shire&lt;/strong&gt; &lt;em&gt;Suburban [Gated] Community&lt;/em&gt;, ruled with an &lt;em&gt;iron
fist&lt;/em&gt; and an endless stream of &lt;em&gt;Puns&lt;/em&gt;.  His wife and three daughters obeyed
his every whim, when it fit their schedules... and if they were in a good
mood... and they wanted to.  Stan was content with his life as an emperor and
ruler of his domain, no matter how far and wide that domain spanned.&lt;/p&gt;
&lt;p&gt;One Tuesday afternoon, as he stood at the edge of the sidewalk squinting
toward his back yard and telling himself that &lt;em&gt;'Stantinople stretches as far
as the eye can see'&lt;/em&gt;, his mind drifted to the life he could have had.  He
thought about all of the mistakes he had made like when he tried stand-up and
totally bombed, when he got into massive debt from college and dropped out,
and when he bought a house in the suburbs -- the mistakes!&lt;/p&gt;
&lt;p&gt;Seemingly out of nowhere he was tapped on the nose by a delivery woman.  She
told him to sign her PDA and before he could process what was happening she
dropped a thick wooden, about the size of a bedside table, at his doorstep.
He turned around and the woman sped away in an un-marked FedEx van; it didn't
say FedEx, because it was unmarked, but the color and shape was right so Stan
figured it probably was FedEx.&lt;/p&gt;
&lt;p&gt;He lugged the box into the house and down to the finished basement he (and a
poster in the stairwell leading down to the basement) called the
&lt;strong&gt;'Stantinople Man Cave'&lt;/strong&gt;, despite it not having many &lt;em&gt;Man Cave&lt;/em&gt; amenities
nor being an actual cave for which one might find men.  The entirety of the
basement consisted of three dark brown leather couches lined up in an 'L'
formation in the corner and a small, almost child-sized foosball table on the
opposite end of the room.  He didn't even invest in a wide-screen TV and a few
Lay-Z boy chairs with built-in mini-fridges!  Stan really had no concept of
what a &lt;em&gt;Man Cave&lt;/em&gt; ought to have but nobody really called him on it since he
was obviously trying his sad 43 year-old best.&lt;/p&gt;
&lt;p&gt;He fumbled the box with a &lt;em&gt;WHOOMP&lt;/em&gt; onto the carpet and painlessly opened it
with its &lt;em&gt;No Hassle™ packaging&lt;/em&gt;, an innovation he did not realized had made
its way to wooden packaging.  Removing the item Stan thought this new device
was a sewing machine and he got excited, but upon closer inspection he
realised it was not a sewing machine.  The device was a rectangular cube with
rounded edges and was hollow in the middle except for what looked like some
pistons; the device was matt black and had four rubber feet on the bottom and
was branded &lt;em&gt;'Past Scrubber'&lt;/em&gt;.  He lifted the device out of the box and
flipped 'on' the devices only switch; it began to &lt;em&gt;whurrrrrr&lt;/em&gt; like a small
engine.&lt;/p&gt;
&lt;p&gt;Stan rummaged through the box and found a piece of paper which read:&lt;/p&gt;
&lt;blockquote&gt;
May this device only be used by the mightiest and wisest emperors.  With
its mechanical power it may erase both mistakes and triumphs of the past.
It does not discriminate, this is the job of its master.  You are its
master.&lt;/blockquote&gt;
&lt;p&gt;&amp;quot;Sweet! This thing looks cool.&amp;quot; Stan said oblivious to the ominous tone of
this note. &amp;quot;Let's see... it can change the past.  I wonder what I should
change...&amp;quot; he said foolishly not taking this very serious device seriously.&lt;/p&gt;
&lt;p&gt;&amp;quot;Well first I'd wish I'd never moved out to the suburbs.  That was a huge
mistake.&amp;quot; The machine's &lt;em&gt;whurrr&lt;/em&gt;'ing intensified and an instant later he found
himself living in a nice apartment near down-town.  Since time had been
altered, and in this universe you don't remember old timeliness if you change
the past (deal with it), Stan had no idea that anything had changed and had
yet to make his first decision.&lt;/p&gt;
&lt;p&gt;&amp;quot;Well first I'd wish I never went to college, that was a huge waste of time
just to drop out.&amp;quot; and again (for you, not for him) the machine &lt;em&gt;whurrr&lt;/em&gt;'d
louder and an instant later Stan found himself in a much shittier apartment,
further from downtown.&lt;/p&gt;
&lt;p&gt;&amp;quot;Well first I'd wish I went to college, I really could have done something
with my life.&amp;quot; and the machine didn't respond because, despite it's visual
similarities to a sewing machine, the device only knew how to destroy time and
not how to create it.  He would have known this if he read the freaking manual.&lt;/p&gt;
&lt;p&gt;Stan quickly grew bored with the device after naming off a few things he
&lt;em&gt;wished&lt;/em&gt; he had done and it just &lt;em&gt;whurr&lt;/em&gt;'ing on.  He switched the machine
&lt;em&gt;off&lt;/em&gt; and put it in the corner and muttered to himself &amp;quot;Maybe I can get
something for it on ebay.&amp;quot;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;After a furious bidding war between two hobbyist mechanics Stan got $153 for
it.&lt;/p&gt;
&lt;p&gt;&amp;quot;Not bad.&amp;quot; He said when the bidding ended. &amp;quot;Not bad indeed.&amp;quot; and smiled.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Creative Writing"></category><category term="MagicRealismBot"></category></entry><entry><title>Character Study: The 'try new things' couple</title><link href="/creative-writing/the-try-new-things-couple" rel="alternate"></link><published>2016-06-17T00:00:00-07:00</published><updated>2016-06-17T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-06-17:/creative-writing/the-try-new-things-couple</id><summary type="html">&lt;p class="first last"&gt;Gwendolyn and Stefan love to try new things...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Gwendolyn and Stefan love to try new things.  Not like... &lt;em&gt;sex things&lt;/em&gt;, but
like &lt;em&gt;lifestyle things&lt;/em&gt;.  Take, for example, Gwendolyn decided last week that
she would love to see what life was like if she and Stefan only shared &lt;strong&gt;one&lt;/strong&gt;
bowl, plate, cup, fork, knife, spoon, and pan for a month. She didn't really
have a good reason for &lt;em&gt;why&lt;/em&gt; at the time, it's not like she read it in a
magazine or anything, but they're young and into wacky stuff like that.  Stefan
always participates in these and likes talking about their &lt;em&gt;adventures&lt;/em&gt; as
they're happening, but never proposes ideas of his own.&lt;/p&gt;
&lt;p&gt;Gwendolyn requires that people use the full &lt;em&gt;Gwendolyn&lt;/em&gt; and not &lt;em&gt;Gwen&lt;/em&gt; and has
been known to &lt;strong&gt;halt&lt;/strong&gt; conversations if people don't. She feels was confident
that she loves Stefan three times more than he loves her.  She wasn't sure why
she felt that way, or where three times came from, but it had always been her
hunch.  Since she's never been able to confirm or deny it, she has kept on
believing it; this puts her in an artificially smug mood whenever she
sacrifices something for Stefan, like the 5% markup on the organic foods
because he prefers them.&lt;/p&gt;
&lt;p&gt;Stefan previously refereed to her as &lt;em&gt;Gwen&lt;/em&gt; internally but forced himself to
adapt after a few preventable meltdowns.  He hasn't ever really considered how
much he loves Gwendolyn, but he regularly thinks about the house they'll buy
together in a few years.  There isn't actually a specific house they're
thinking about, but he still enjoys the fantasy; some women dream of their
wedding day and Stefan dreams of his move-in day.  Year after year they've
stayed in the same mid-town loft and will never did move into that house.&lt;/p&gt;
&lt;p&gt;They both definitely &lt;strong&gt;love&lt;/strong&gt; each other to the extent that any
twenty-somethings can love one another while still collectively managing to
avoid the question of marriage.  They will eventually break-up, not because of
any one event or central cause, but because people grow up and grow apart.
It's never anybody's fault, it's just how the wind blows.  Some people's
connections are able to persevere that inevitable break, but this connection
will not.  Gwendolyn knows this and in the back of her head is already thinking
about why a breakup would be best for them.  Stefan has thought about it once
or twice but doesn't really want things to change.  He likes spending his life
with Gwendolyn and feels like they do share a really close bond, even if that
bond is largely based on things like sharing one bowl, plate, cup, fork, knife,
spoon, and pan for a month.&lt;/p&gt;
&lt;p&gt;That said, the &lt;em&gt;sharing-one-of-everything&lt;/em&gt; thing is working out pretty well.
Gwendolyn hasn't gotten any of their friends to try it but she really feels
like she's looking at food and meals in a whole new light.  Stefan thinks it's
a neat idea, but is looking forward to the end of this month.  He would
never tell her that though.  He loves her too much.&lt;/p&gt;
</content><category term="Creative Writing"></category><category term="Character Study"></category></entry><entry><title>How to Get the Most out of Your Python Exceptions</title><link href="/tech/python-exceptions" rel="alternate"></link><published>2016-04-03T00:00:00-07:00</published><updated>2016-04-03T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-04-03:/tech/python-exceptions</id><summary type="html">&lt;p class="first last"&gt;One of the most useful features of Python are exceptions-- but how the heck do they work? Let's find out.&lt;/p&gt;
</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Please enter a number not equal to 0: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ZeroDivisionError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You had one job!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;This post does not cover &lt;em&gt;what&lt;/em&gt; python exceptions are. If the above
code doesn't make sense you should check out this &lt;a class="reference external" href="https://wiki.python.org/moin/HandlingExceptions"&gt;Introduction to Python
Exceptions&lt;/a&gt; from wiki.python.org before reading this post.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you've fallen in love with Python you've no doubt discovered exceptions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# do a thing&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# thing did not work,&lt;/span&gt;
    &lt;span class="c1"&gt;# do something else&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They are endlessly useful and help one to avoid writing checks upon checks upon
checks before getting to the meat of your project. Just try a thing, catch the
error, keep on rolling (or fail gracefully).&lt;/p&gt;
&lt;p&gt;As powerful as they can be, I have found a lot of folks (past me included) who
don't know how to find python exceptions and don't know how to write their own
exceptions! So let's do that.&lt;/p&gt;
&lt;div class="section" id="finding-exceptions"&gt;
&lt;h2&gt;Finding Exceptions&lt;/h2&gt;
&lt;p&gt;When writing exception handling code it's kosher to explicitly state &lt;em&gt;which&lt;/em&gt;
error you expect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Bad:&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# A thing that might not work&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Something else&lt;/span&gt;

&lt;span class="c1"&gt;# Good:&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# A thing that might not work&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;SpecificError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Maybe print(err)&lt;/span&gt;
    &lt;span class="c1"&gt;# Something else&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I first found this out I thought &lt;em&gt;Golly that does sound useful; I always
try to be explicit in my error handling -- but how??&lt;/em&gt; Thankfully future me is
here to answer questions like this.&lt;/p&gt;
&lt;p&gt;The exception you are looking for (for instance, &lt;tt class="docutils literal"&gt;SpecificError&lt;/tt&gt; in the above
pseudo-code) can be found in the python traceback:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ echo &amp;quot;open(&amp;#39;myfakefile.txt&amp;#39;, &amp;#39;r&amp;#39;).close()&amp;quot; &amp;gt; my-unhandled-script.py
$ python my-unhandled-script.py
Traceback (most recent call last):
  File &amp;quot;/tmp/test.py&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    open(&amp;#39;myfakefile.txt&amp;#39;, &amp;#39;r&amp;#39;).close()
IOError: [Errno 2] No such file or directory: &amp;#39;myfakefile.txt&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That bit on the last line &lt;tt class="docutils literal"&gt;IOError&lt;/tt&gt; is the exception you're looking for. So
when you write your code you'll say something like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myfakefile.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;File `myfakefile.txt` does not exist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To recap, here is one way (and my preferred method for) 'doing' python
exception handling:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write breakable code.&lt;/li&gt;
&lt;li&gt;Run breakable code, see what exceptions python spits out.&lt;/li&gt;
&lt;li&gt;Wrap breakable code in explicit &lt;tt class="docutils literal"&gt;try/except&lt;/tt&gt; blocks.&lt;/li&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;li&gt;Profit.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-your-own-exceptions"&gt;
&lt;h2&gt;Writing Your Own Exceptions&lt;/h2&gt;
&lt;p&gt;You (who me?), yes &lt;em&gt;you&lt;/em&gt; can write custom python exceptions. It's dead easy
too.&lt;/p&gt;
&lt;p&gt;The long and short of it is you define an exception class which either inherits
from the &lt;tt class="docutils literal"&gt;Exception&lt;/tt&gt; class or another pre-existing exception.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CusssstomError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Raise when snakes&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_for_snakes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;snake&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;CusssstomError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Snakes! I hate snakes!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Just don&amp;#39;t mention snakes: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;check_for_snakes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;CusssstomError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thanks. I appreciate it.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code defines the &lt;tt class="docutils literal"&gt;CusssstomError&lt;/tt&gt; exception class which you can
&lt;tt class="docutils literal"&gt;raise&lt;/tt&gt;. Very neat and &lt;a class="reference external" href="https://docs.python.org/2/glossary.html#term-pythonic"&gt;pythonic&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-reading"&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;Here are a few references I suggest you check out to get an even better grasp
on exception handling and custom exceptions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This Stack Overflow post: &lt;a class="reference external" href="http://stackoverflow.com/questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python"&gt;Proper way to declare custom exceptions in modern
Python?&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This Python doc: &lt;a class="reference external" href="https://docs.python.org/2/library/exceptions.html"&gt;Built-in Exceptions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And as always, search engines are your friends.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technical"></category><category term="Pythonic"></category><category term="Guide"></category></entry><entry><title>How to develop a site for the web</title><link href="/tech/how-to-develop-a-site-for-the-web" rel="alternate"></link><published>2016-03-25T00:00:00-07:00</published><updated>2016-03-25T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-03-25:/tech/how-to-develop-a-site-for-the-web</id><summary type="html">&lt;p class="first last"&gt;Testing your website with a web-server is important! Here's how to start testing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8000&lt;/span&gt;&lt;/tt&gt; and stop testing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;file:///home/me/projects/website/site.html&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This post does not deal with the basics of HTML, CSS, or Javascript, but
rather a simple and often overlooked part of the web-dev toolchain.&lt;/p&gt;
&lt;p class="last"&gt;If you would like help with the basics of HTML, CSS, and Javascript I suggest
&lt;a class="reference external" href="https://codecademy.com/learn/make-a-website"&gt;Codecademy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Web Development, especially the front-endy stuff, is a great way to understand
how computers &lt;em&gt;think&lt;/em&gt; and can be a wonderful foray into computer programming.
Anybody that's made a website probably remembers their first time:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open up a text editor.&lt;/li&gt;
&lt;li&gt;Type something like the following in:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is so cool!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Save As index.html&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Right click and open the file in your browser.&lt;/li&gt;
&lt;li&gt;Marvel at what you've created and hack away at it all night long.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And there you go! You've got a website made and ready to roll. It's not on a
server, and you can't tell your friends to go to it from &lt;em&gt;their&lt;/em&gt; computer --
but those are just technicalities. You can still celebrate doing a thing &lt;em&gt;like a
boss&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, when you test your website by viewing local files you're missing
out on a lot of advantages and quirks that you get when you host a website on a
&lt;em&gt;real server&lt;/em&gt; using something like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Web_server"&gt;Apache or Nginx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For instance, when you run check your website by clicking through
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;file///home/username/project/files.html&lt;/span&gt;&lt;/tt&gt; all of your hyperlinks that should
point to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://mywebsite.ext/somepage/&lt;/span&gt;&lt;/tt&gt; will take you to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;file:////somepage&lt;/span&gt;&lt;/tt&gt;
when they should take you to
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;file:///home/username/projects/myawesomesite/somepage/index.html&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="section" id="run-a-development-server-it-s-easy"&gt;
&lt;h2&gt;Run A Development Server (it's easy!)&lt;/h2&gt;
&lt;div class="section" id="the-short-answer"&gt;
&lt;h3&gt;The Short Answer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Use Python!&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python2 -m SimpleHTTPServer
Serving HTTP on 0.0.0.0 port 8000 ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-longer-answer"&gt;
&lt;h3&gt;The Longer Answer&lt;/h3&gt;
&lt;p&gt;You can run your own local webserver to serve files &lt;em&gt;locally&lt;/em&gt;. This gets you
all of the developmental advantages of running a webserver without having to
rent or run a server in the cloud. The best part is that it's very easy to run
a development web server.&lt;/p&gt;
&lt;p&gt;Here's how:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://python.org/downloads/"&gt;Install Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Navigate to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;your-awesome-website&lt;/span&gt;&lt;/tt&gt; directory/folder.&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; SimpleHTTPServer&lt;/tt&gt; if you installed &lt;tt class="docutils literal"&gt;python2&lt;/tt&gt; or run
&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; http.server&lt;/tt&gt; if you installed &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;These instructions assume you are doing things in a Unix environment (OSX
or Linux) thought the commandline. If you are using Windows you should
check out this &lt;a class="reference external" href="http://stackoverflow.com/questions/17351016/set-up-python-simplehttpserver-on-windows"&gt;stack overflow post&lt;/a&gt; for Windows-specific help.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Then in your web browser go to the address &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8000&lt;/span&gt;&lt;/tt&gt; and bam!
&lt;strong&gt;Your&lt;/strong&gt; Website.&lt;/p&gt;
&lt;img alt="'High Five' gif" class="align-center" src="/assets/images/gifs/high-five.gif" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Development"></category><category term="Guide"></category><category term="Pro-Tip"></category><category term="Technical"></category></entry><entry><title>Running Firefox in Docker</title><link href="/tech/running-firefox-in-docker" rel="alternate"></link><published>2016-03-05T00:00:00-08:00</published><updated>2016-03-05T00:00:00-08:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2016-03-05:/tech/running-firefox-in-docker</id><summary type="html">&lt;p class="first last"&gt;You got Firefox in my Docker! You got Docker in my Firefox!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Turns out you can run Firefox in Docker. It's actually pretty easy:&lt;/p&gt;
&lt;div class="section" id="code"&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;From&lt;/strong&gt; &lt;a class="reference external" href="https://gist.github.com/ElijahCaine/29e7e829341d58abe370"&gt;my github gist&lt;/a&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/ElijahCaine/29e7e829341d58abe370.js"&gt;&lt;/script&gt;&lt;p&gt;Installation instructions (on Linux):&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
# install docker and start the docker daemon
$ git clone https://gist.github.com/29e7e829341d58abe370.git docker-firefox
$ ln docker-firefox/ff-docker /some/path/for/binaries
$ ff-docker -b  # -b pulls &amp;amp; builds container, etc used for first time startup.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;I attempted to use &lt;a class="reference external" href="http://alpinelinux.org/"&gt;Alpine Linux&lt;/a&gt; as a proof-of-usability, since it's the hip
new kid on the containerization block &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;, but as it turns out Alpine's
Firefox package is pretty fucked &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Dmenu"&gt;dmenu&lt;/a&gt;, this means I can run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ff-docker&lt;/span&gt;&lt;/tt&gt; from my desktop without
opening a terminal, effectively making it a super-private-yet-convenient
drop-in for Firefox.  Pretty neat right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was pretty simple but effective in terms of giving me the option to have
more privacy. I can see it being extended to add even more security; e.g.,
routing all of the traffic in the container through a VPN would be easy enough.
Food for thought [citation needed].&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;5mb containers sounds pretty nice to me.
&lt;a class="reference external" href="http://gliderlabs.viewdocs.io/docker-alpine/"&gt;http://gliderlabs.viewdocs.io/docker-alpine/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I get a segfault every time I try to start Firefox. More info here:
&lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=724227#c11"&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=724227#c11&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Docker"></category><category term="Guide"></category></entry><entry><title>CatBarcamp 2015</title><link href="/events/cat-barcamp-2015" rel="alternate"></link><published>2015-10-12T00:00:00-07:00</published><updated>2015-10-12T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-10-12:/events/cat-barcamp-2015</id><summary type="html">&lt;p class="first last"&gt;Another great unconference sponsored by the PSU Computer Action Team.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This weekend I went to &lt;a class="reference external" href="http://catbarcamp.org/"&gt;Cat Barcamp 2015&lt;/a&gt;, an unconference run by the PSU
&lt;a class="reference external" href="http://cat.pdx.edu/"&gt;Computer Action Team&lt;/a&gt;. I went to some awesome talks (and gave one myself).&lt;/p&gt;
&lt;p&gt;I enjoyed every talk I went to. Here they are in order:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;History of Cryptography.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;This was given by one of my OSL co-workers. It didn't contain a ton of new
information for me, but was delivered very well and focused on different
types of cryptography and the context in which each one was developed. I
enjoyed it.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Haskell on Steroids.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;I kinda checked out during this talk because I wanted to write my slides...
Wooops. It looked very interesting and mathey though...&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Introduction to Test Driven Development in Power Shell.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Whoa Windows! (actually though, I learned more about Power Shell than I
ever expected to know).&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;MY TALK.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="#my-talk"&gt;(see below)&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;A Whirlwind Tour of Lojban.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Lojban seems like a cool language. Corbin (previous LUG president) gave
this talk, he's a cool guy... you might even say he's TheMostAwesomeDude.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Adventures in IT Security: Then and now.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;I like history. I also like computers. This was a good talk. I am biased.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Talking to people! (or, How I learned to stop worrying and love the user.)&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Spoiler: The secret is understanding social cues.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="my-talk"&gt;
&lt;h2&gt;My Talk&lt;/h2&gt;
&lt;p&gt;I decided on the spur of the moment to give a talk 'How to Write a (very
mediocre) Static Site Generator' and with only 40 minutes of prep work I was
able to fill an hour pretty well.&lt;/p&gt;
&lt;p&gt;Here are some links from that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://gist.github.com/ElijahCaine/0ee1ef21692f3cbb6934"&gt;demo code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://elijahcaine.me/catbarcamp2015-demo/"&gt;abomination of a website&lt;/a&gt; we built between the demo and the end of the
session (epilepsy warning... no seriously).&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://slides.elijahcaine.me/cat-barcamp-2015_how-to-an-ssg/"&gt;very sparse slides&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tldr"&gt;
&lt;h2&gt;TLDR&lt;/h2&gt;
&lt;p&gt;The CAT is an awesome group of people. I'm glad I was able to get a few LUG
members to come to the event. If I went to PSU I would be honored to work with
the CAT. They throw a hellofan event.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Cat Barcamp"></category><category term="Talks"></category><category term="PSU CAT"></category></entry><entry><title>Covertly Installing Packages with Docker</title><link href="/tech/covertly-install-packages-with-docker" rel="alternate"></link><published>2015-10-07T00:00:00-07:00</published><updated>2015-10-07T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-10-07:/tech/covertly-install-packages-with-docker</id><summary type="html">&lt;p class="first last"&gt;A simple guide on install $PACKAGE with $CONTAINER_RUNTIME.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="#the-deets-dockerfile-and-commands"&gt;Jump to the codey bits&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="the-problem-workstations"&gt;
&lt;h2&gt;The Problem: Workstations&lt;/h2&gt;
&lt;p&gt;At the OSL I use workstations which are provisioned by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Chef_%28software%29"&gt;Chef&lt;/a&gt; to look more or
less identical (packages are the same and global config files are consistent
from machine to machine). This is nice because it allows everybody at the lab
to jump from workstation to workstation without dreading the inevitable setup
that usually comes with going to a new computer.&lt;/p&gt;
&lt;p&gt;The only downside here is that to install a package you have to make a pull
request to a GitHub Repository in which you modify a JSON file. This is almost
always for my own good, but as a dev I am prone to avoiding things that the
admins say are good for me (like broccoli, milk, and consistent workstation
environments).&lt;/p&gt;
&lt;p&gt;For instance, yesterday I wanted to use &lt;a class="reference external" href="http://rg3.github.io/youtube-dl/"&gt;youtube-dl&lt;/a&gt; to grab a video I was
watching on repeat*. I could have made a pull request to add the package,
waited until 30 after for the workstations to refresh, used the package, and
went about my day. This would have been the correct and bureaucratic way to do
things.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;could&lt;/em&gt; have, and probably &lt;em&gt;should&lt;/em&gt; have, done that... but I didn't.&lt;/p&gt;
&lt;p&gt;* firefox kept crashing, I wasn't just stealing music for the sake of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enter-docker"&gt;
&lt;h2&gt;Enter: Docker&lt;/h2&gt;
&lt;p&gt;In this case the solution to the 'problem' was &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Docker_%28software%29"&gt;Docker&lt;/a&gt;. I wrote a Dockerfile
which provisioned a container to have &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;youtube-dl&lt;/span&gt;&lt;/tt&gt; installed, spun up the
container with a shared directory (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$PWD:/home/&lt;/span&gt;&lt;/tt&gt;), and executed the
youtube-dl command. The .mp4 video was downloaded to my current working
directory and I was able to play it with my media player of choice, all without
installing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;youtube-dl&lt;/span&gt;&lt;/tt&gt; locally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-deets-dockerfile-and-commands"&gt;
&lt;h2&gt;The Deets: Dockerfile and Commands&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Dockerfile&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:latest

RUN apt-get -y update
RUN apt-get -y upgrade
RUN apt-get -y install python-pip
RUN pip install youtube-dl

WORKDIR /home
RUN alias youtube-dl=&amp;#39;/usr/local/bin/youtube-dl&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are in the directory containing the above Dockerfile, build the
container with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker build -t yt-dl .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and run it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -v $PWD:/home/ yt-dl youtube-dl &amp;lt;YOUTUBE-VID-URL&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will download any url's video into the current working directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pro-tip-add-an-alias"&gt;
&lt;h2&gt;Pro-Tip: Add an &lt;tt class="docutils literal"&gt;Alias&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Add the following content to your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bashrc&lt;/span&gt;&lt;/tt&gt; file and then run &lt;tt class="docutils literal"&gt;source
&lt;span class="pre"&gt;~/.bashrc&lt;/span&gt;&lt;/tt&gt; to get rid the of long Docker bits of the above command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;$VID_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/downloaded/videos/
&lt;span class="nb"&gt;alias&lt;/span&gt; yt-dl&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;docker run -v $VID_DIR:/home/ yt-dl youtube-dl&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wait-this-is-overly-complicated"&gt;
&lt;h2&gt;Wait This is Overly Complicated&lt;/h2&gt;
&lt;p&gt;You're probably thinking: &amp;quot;Hey, couldn't you have just run &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt;
&lt;span class="pre"&gt;youtube-dl&lt;/span&gt;&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;Yes. I could have. But that wouldn't be fun and wouldn't have given me an
excuse to write a blog, post now would it Ms. Smarty Pantz.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;strong&gt;drink the coolaid. come to the docker side.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Docker"></category><category term="Guide"></category></entry><entry><title>Travel travel travel...</title><link href="/europe-2015/2015-09-03" rel="alternate"></link><published>2015-09-03T00:00:00-07:00</published><updated>2015-09-03T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-09-03:/europe-2015/2015-09-03</id><summary type="html">&lt;p class="first last"&gt;Tuesday August 03, 2015. Travel travel travel travel travel travel... PRG -&amp;gt; NYC -&amp;gt; PDX&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Travel Travel Travel&lt;/h2&gt;
&lt;p&gt;Travel travel travel travel travel travel travel travel travel travel travel
travel travel travel travel travel travel travel travel travel travel travel.
travel. Travel travel travel travel travel travel travel travel travel travel
travel travel travel travel travel travel travel travel travel travel travel.&lt;/p&gt;
&lt;p&gt;Travel travel travel travel travel travel travel travel travel travel travel
travel travel travel travel travel travel travel travel travel travel travel.
travel. Travel travel travel travel travel travel travel travel travel travel
travel travel travel travel travel travel travel travel travel travel travel
travel travel travel travel travel travel travel travel travel travel travel.
travel. Travel travel travel travel travel travel travel travel travel travel
travel travel travel travel travel travel travel travel travel travel travel.
travel travel travel travel travel travel travel travel travel travel travel.&lt;/p&gt;
&lt;p&gt;Travel travel travel travel travel travel. Travel travel travel travel travel
travel travel. Travel travel travel travel travel travel travel travel travel.&lt;/p&gt;
&lt;p&gt;Sleep.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Portland"></category><category term="Prague"></category></entry><entry><title>A Personal Day in Prague: (Almost) Just Pictures*</title><link href="/europe-2015/2015-09-02" rel="alternate"></link><published>2015-09-02T00:00:00-07:00</published><updated>2015-09-02T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-09-02:/europe-2015/2015-09-02</id><summary type="html">&lt;p class="first last"&gt;Wednesday September 02, 2015. I adventure Prague alone. I enjoy it quite a bit!&lt;/p&gt;
</summary><content type="html">&lt;img alt="Charles Bridge." class="align-center" src="/assets/images/europe-2015/prague-charles-bridge.jpg" style="width: 100%;" /&gt;
&lt;img alt="Pilot Statue." class="align-center" src="/assets/images/europe-2015/prague-pilot-statute.jpg" style="width: 100%;" /&gt;
&lt;img alt="View of Prague with some trees in the way." class="align-center" src="/assets/images/europe-2015/prague-view.jpg" style="width: 100%;" /&gt;
&lt;p&gt;I went on a hike, found a great view at the top of a hill.&lt;/p&gt;
&lt;img alt="Oldtown Prague" class="align-center" src="/assets/images/europe-2015/prague-oldtown.jpg" style="width: 100%;" /&gt;
&lt;img alt="Panorama with bridge" class="align-center" src="/assets/images/europe-2015/prague-panorama-with-bridge.jpg" style="width: 100%;" /&gt;
&lt;img alt="'Eli' Starbucks Coffee" class="align-center" src="/assets/images/europe-2015/prague-creative-spelling.jpg" style="width: 100%;" /&gt;
&lt;p&gt;'Eli'&lt;/p&gt;
&lt;img alt="Stunning sunset" class="align-center" src="/assets/images/europe-2015/prague-stunning-sunset.jpg" style="width: 100%;" /&gt;
&lt;p&gt;* I swear it's not because I'm lazy and don't want to write. The pictures just
capture it better.&lt;/p&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Prague"></category></entry><entry><title>Write the Docs Day 2</title><link href="/europe-2015/2015-09-01" rel="alternate"></link><published>2015-09-01T00:00:00-07:00</published><updated>2015-09-01T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-09-01:/europe-2015/2015-09-01</id><summary type="html">&lt;p class="first last"&gt;Tuesday September 01, 2015. Write the docs Day 2 is just as educational as the first.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Just like yesterday, I spent most of today enjoying some wonderful talks as
well as stressing out -- I mean totally not stressing out -- about my own talk.&lt;/p&gt;
&lt;img alt="Write the Docs Staff Picture" class="align-center" src="/assets/images/europe-2015/wtd-day-2.jpg" style="width: 100%;" /&gt;
&lt;p&gt;The Write the Docs Staff saying thanks.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first talk of the day was titled &amp;quot;Judas Priest Ate My Scrum Master&amp;quot;,
which has almost nothing to do with Judas Priest or eating or scrum masters;
instead it talked about things that are well known issues and a lot of laws
(&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Brooks%E2%80%99_law"&gt;Brooks' Law&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lehman's_laws_of_software_evolution"&gt;Lehmann's Laws&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pareto_principle"&gt;Pareto Principle&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Conway's_law"&gt;Conway's Law&lt;/a&gt;,
etc) that nobody talks about that much but can be super helpful to consider
when working in an industry.&lt;/li&gt;
&lt;li&gt;The second talk covered different types of user interfaces and what to
consider when writing error messages, troubleshooting pages, product tours.
It was something I hadn't considered having primarily written command line
tools with pretty limited and well established interface guidelines.&lt;/li&gt;
&lt;li&gt;Then I gave a talk. It was a talk. I'll post a video of it once those
get put up online and you can decide if it was good or bad.&lt;/li&gt;
&lt;li&gt;The talk after mine was a nice history lesson and wanted the audience to
reflect on what documentations can learn from documentation practices of the
past. The TLDR on that one is that it used to suck to write technical docs
even more than it sucks now.&lt;/li&gt;
&lt;li&gt;Then there were a bunch of lightning talks. One talk from a twitter employee
(there's a fun name for them I'm sure) mentioned that gathering metrics are
is important because without metrics everything you do is just guess and
check.&lt;/li&gt;
&lt;li&gt;The next talk &amp;quot;MacGyvering your docs&amp;quot; brought up the fact that the best
documentation toolchain will (should?) only help existing developers. A
better toolchain won't attract new devs. That was something I think a lot of
projects can lose sight of.&lt;/li&gt;
&lt;li&gt;The talk after that covered a team of scientists studying clouds (water
clouds not internet clouds) using computer simulations. They wrote and
documented a piece of software and they ended up publishing their program's
documentation in a scientific journal. It's already been sited and
everything. I hadn't even considered that as a possibility (publishing docs
as a scientific paper).&lt;/li&gt;
&lt;li&gt;The next two talks were pretty short (15 minute) talks about putting the data
where the users need it and an introduction to screen-casting. The first was
good for documenting things like an API and the second was good if I ever
need to make a screen-cast. I doubt that will happen, but you never know!&lt;/li&gt;
&lt;li&gt;The last talk &amp;quot;All roads might not lead to docs&amp;quot; held too main takeaways for
me: The quote &lt;em&gt;The Purpose of this document is ________&lt;/em&gt; and the &lt;a class="reference external" href="http://voiceandtone.com/"&gt;mailchimp
voice &amp;amp; tone guide&lt;/a&gt;, which is a very good document I suggest you read it
(the title is pretty self explanatory I think).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a full list of talks given at the conference, check out the &lt;a class="reference external" href="http://www.writethedocs.org/conf/eu/2015/schedule/"&gt;event's
schedule&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The after party ended up happening at two venues since we got pre-maturely
kicked out of the first one; we made the best of it and I got to talk to Anna
Jaruga (the cloud research scientist) as well as a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/"&gt;Mozilla Development
Network&lt;/a&gt; writer, both very interesting people.&lt;/p&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Prague"></category></entry><entry><title>Write the Docs Day 1</title><link href="/europe-2015/2015-08-31" rel="alternate"></link><published>2015-08-31T00:00:00-07:00</published><updated>2015-08-31T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-31:/europe-2015/2015-08-31</id><summary type="html">&lt;p class="first last"&gt;Monday August 31, 2015.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I spent most of today enjoying the Write the Docs talks and (air
conditioned) venue. I took some notes.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The keynote about the imposter syndrome was very relatable. The coping
mechanism of framing goals in &amp;quot;I want to do...&amp;quot; instead of &amp;quot;I want to be...&amp;quot;
seems like it could be effective. I liked the quote &amp;quot;Make better mistakes
tomorrow&amp;quot;.&lt;/li&gt;
&lt;li&gt;The second talk about naming things was very good and got me to think about
the structure of documentation metadata (using labels vs taxonomy vs
thesaurus, etc). This will be useful someday I'm sure.&lt;/li&gt;
&lt;li&gt;The third talk about [emojii] and the use of emoji was [emojii]. I
never considered using them before, but I will going forward.&lt;/li&gt;
&lt;li&gt;The fourth talk mentioned using &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Selenium_%28software%29?wprov=sfia1"&gt;Selenium&lt;/a&gt; to test docs, that just makes
sense. It's so obvious I wish it was easier.&lt;/li&gt;
&lt;li&gt;The API Docs talk mentioned that you should give your user the data they will
be working with as a top level priority instead of an after thought. This
will definitely be a priority for me. I already try to give plenty of
examples (since I speak example natively), but I'll be more Conscience of it.&lt;/li&gt;
&lt;li&gt;The Design Docs with Disability in Mind was interesting. The big takeaway for
me was keeping the elderly in mind.&lt;/li&gt;
&lt;li&gt;The meta talk about crafting a presentation was delivered very well and
mentioned adding contrast slide decks... I should have listened to this
advice...&lt;/li&gt;
&lt;li&gt;The second to the last talk of the day covered the plethora of rules we place
on documentation. Having just recently helped established some style guides
for the OSL docs I think we did a good job of giving some leeway to the
writers.  The extreme example of 'Limited rules docs' (e.g., the Python
Documentation) does not really work well for the reader in my experience.&lt;/li&gt;
&lt;li&gt;The final talk by some &lt;a class="reference external" href="https://developer.mozilla.org/en-US/"&gt;MDN&lt;/a&gt; writers equated docs to a garden.  The metaphor
worked surprisingly well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a full list of the talks and their descriptions, visit the &lt;a class="reference external" href="http://www.writethedocs.org/conf/eu/2015/schedule/"&gt;event's
schedule&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Day 1 was pretty emojii. We ended the night with emojii at a venue called The
Pub. Many conversations and laughs were had. I like this crowd.&lt;/p&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Prague"></category><category term="Write the Docs"></category></entry><entry><title>Prague Day 1</title><link href="/europe-2015/2015-08-30" rel="alternate"></link><published>2015-08-30T00:00:00-07:00</published><updated>2015-08-30T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-30:/europe-2015/2015-08-30</id><summary type="html">&lt;p class="first last"&gt;Sunday, August 30. Prague day 1 in which I meet the other speakers of Write the Docs EU 2015.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I went on a wonderful &lt;a class="reference external" href="http://www.writethedocs.org/conf/eu/2015/#events"&gt;city tour&lt;/a&gt; of Prague provided by Write The Docs. We
crossed some bridges, saw some castles, and experienced many wonderful parts of
the city.&lt;/p&gt;
&lt;img alt="My dumb face and a delicious gelato." class="align-center" src="/assets/images/europe-2015/prague-gelato.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;Here's me in front of a church eating some gelato.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After the tour I was very hungry and tagged along with some folks from my tour
group on a journey to get food. We went to a restaurant that brought us beer on
a model train.&lt;/p&gt;
&lt;img alt="Choo choo. Here comes the beer train." class="align-center" src="/assets/images/europe-2015/prague-beer-train.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;This is the train that brought us beer.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here are some picture I took of the buildings in the city. I like the
architecture a lot.&lt;/p&gt;
&lt;img alt="Classic architecture in the Prague city center." class="align-center" src="/assets/images/europe-2015/prague-city-center.jpg" style="width: 100%;" /&gt;
&lt;img alt="Even the small regular old streets in Prague are breathtaking." class="align-center" src="/assets/images/europe-2015/prague-street.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;They are so cool. I haven't found the words to describe why, but the asthetics
please me.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After the tour and food there was a &lt;em&gt;Write the Docs Conference Reception&lt;/em&gt; (aka
meet &amp;amp; greet) where I got to hang out with many of the attendees of the
conference. There was food and fabulous people.&lt;/p&gt;
&lt;p&gt;I did not have a hard time falling asleep that night.&lt;/p&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Prague"></category></entry><entry><title>To Prague!</title><link href="/europe-2015/2015-08-29" rel="alternate"></link><published>2015-08-29T00:00:00-07:00</published><updated>2015-08-29T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-29:/europe-2015/2015-08-29</id><summary type="html">&lt;p class="first last"&gt;Saturday August 29, 2015. AMS -&amp;gt; PRG.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="i-strongly-dislike-travel"&gt;
&lt;h2&gt;I Strongly Dislike Travel&lt;/h2&gt;
&lt;p&gt;I would say I hate travel, but that level of hyperbole is literally the worst
thing on the planet...&lt;/p&gt;
&lt;p&gt;My strong dislike for travel comes mostly from my personal inability to trust
the systems that will get me to where I am going. If I have a flight in one
week and I have to take a bus or train to the airport, I will spend the entire
week running through my head &amp;quot;When is my flight? Umm days, yeesh hours, and ack
minutes. How am I getting there? The oh God bus leaving at some time, somewhere
bound.  Once you get there you will go through security which will take between
5 minutes and 2 hours. Budget your time appropriately.  Any of these systems
can fail and based on experience they have&amp;quot; over and over and over. The stress
is compounded when people don't always speak your language and you forgot to
eat a proper meal the morning of.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;That&lt;/em&gt; is why I am 3 hours early to my flight from Amsterdam to Prague. I
regret nothing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="currency-is-weird"&gt;
&lt;h2&gt;Currency is Weird&lt;/h2&gt;
&lt;img alt="1 USD = 24.17 Czech Republic Koruna" class="align-center" src="/assets/images/europe-2015/prague-conversion-rate.jpg" style="width: 100%;" /&gt;
&lt;p&gt;It is going to take me forever to remember &lt;em&gt;25 here monies is about 1 home
monies&lt;/em&gt;. Everything is gonna feel really expensive I bet...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-made-it-to-prague"&gt;
&lt;h2&gt;I Made it to Prague&lt;/h2&gt;
&lt;p&gt;I made it to Prague just fine. They have a cool train system.&lt;/p&gt;
&lt;img alt="The MUSTEK stop in the Prague underground transit system. Very Soviet-era design." class="align-center" src="/assets/images/europe-2015/prague-mustek-stop.jpg" style="width: 100%;" /&gt;
&lt;p&gt;Way cooler than the underground train systems I'm used to...&lt;/p&gt;
&lt;/div&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Prague"></category><category term="Amserdam"></category></entry><entry><title>A very long bike ride</title><link href="/europe-2015/2015-08-28" rel="alternate"></link><published>2015-08-28T00:00:00-07:00</published><updated>2015-08-28T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-28:/europe-2015/2015-08-28</id><summary type="html">&lt;p class="first last"&gt;Friday August 28, 2015. I rent a bike and try to go all the way to the coast. It looked so much closer on the map...&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="my-butt-hurts"&gt;
&lt;h2&gt;My Butt Hurts...&lt;/h2&gt;
&lt;p&gt;Today I went on an awesome bike ride all the way to Haarlem (15km west of
Amsterdam). I didn't actually do anything there; I just went, picked up snacks,
and headed back. I'm 99% sure I missed out on an awesome Haarlem exclusive
cultural experience, but if was really more about the journey (I originally set
out to bike to the coast and Haarlem was my compromise to that).&lt;/p&gt;
&lt;img alt="I don't recall where this park is exactly. I remember it was east of the city center, many kilometers." class="align-center" src="/assets/images/europe-2015/amsterdam-huge-park.jpg" style="width: 100%;" /&gt;
&lt;img alt="Another view of the park, this time with a play structure." class="align-center" src="/assets/images/europe-2015/amsterdam-huge-park-2.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;I found a very neat park near the Western edge of Amsterdam; I ended
up spending an hour or so there having a picnic.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dilapidated&lt;/p&gt;
&lt;img alt="An old and dilapiddated building. It's hard to tell the building original purpose..." class="align-center" src="/assets/images/europe-2015/amserdam-dilapidated-building.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;This was a cool abandoned building I found. I like abandoned
buildings.&lt;/em&gt;&lt;/p&gt;
&lt;img alt="A large ice-cream cone shaped trashcan at a 45 degree angle for cyclists to dispose of trash into." class="align-center" src="/assets/images/europe-2015/amserdam-travelers-trash-can.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;I also found this awesome trash can for people riding bikes. It's
genius.&lt;/em&gt;&lt;/p&gt;
&lt;img alt="Ponies!" class="align-center" src="/assets/images/europe-2015/amsterdam-ponies.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;PONIES&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After the bike ride I was very tired. I slept a lot. And yet not enough...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="small-and-large-appreciations"&gt;
&lt;h2&gt;Small (and Large) Appreciations&lt;/h2&gt;
&lt;p&gt;Here is a list of some of the traits of Amsterdam (and what I have experienced
of the Netherlands at large) which I appreciate.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;They have signs that tell you you're going the wrong direction.&lt;/li&gt;
&lt;li&gt;You can bike to another city and be on bike paths the whole time!&lt;/li&gt;
&lt;li&gt;Bikes are easy to use and aren't shoe-horned in as a second class mode of
transportation.&lt;/li&gt;
&lt;li&gt;The trains are so quiet. Why can't America have quiet trains?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list will probably grow as I remember things. All in all I like the city
and the country. You should visit if you haven't already.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Amsterdam"></category></entry><entry><title>Van Vough museum</title><link href="/europe-2015/2015-08-27" rel="alternate"></link><published>2015-08-27T00:00:00-07:00</published><updated>2015-08-27T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-27:/europe-2015/2015-08-27</id><summary type="html">&lt;p class="first last"&gt;Thursday August 27, 2015. I visit the Van Gough museum and to be completely honest, I am nonplussed.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Today I visited the Van Gough museum. I tried to get in using my mom's
Amsterdam Museum Pass, but it didn't fly there like it did at the Rijks.&lt;/p&gt;
&lt;p&gt;It was pretty fun, but the entire experience felt very artificial and plastic.
The paintings were great to see in person, but everything around the pieces
felt a little tacky. My opinion will likely change about it, but I did not
enjoy the Van Gough museum nearly as much as I enjoyed the Rijks Museum,
despite my love for Van Gough and his works.&lt;/p&gt;
&lt;p&gt;I spent the rest of the day walking around and cashed in early. Jetlag + lots
of walking = ready for bed by 3pm.&lt;/p&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Amsterdam"></category></entry><entry><title>The Rijks museum and travel tips</title><link href="/europe-2015/2015-08-26" rel="alternate"></link><published>2015-08-26T00:00:00-07:00</published><updated>2015-08-26T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-26:/europe-2015/2015-08-26</id><summary type="html">&lt;p class="first last"&gt;Wednesday August 26, 2015. I've been to a lot of museums in my day, and this is definitely a condender for the best.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="the-rijks-museum"&gt;
&lt;h2&gt;The Rijks Museum&lt;/h2&gt;
&lt;img alt="A panorama of an Amsterdam canal." class="align-center" src="/assets/images/europe-2015/amsterdam-canal.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;I'm not sure which street I took this panorama on, but I think it looks
awesome. It captures the Amsterdam canal street pretty well.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Today I went to the Rijks Museum and had a bit of a culture overload.&lt;/p&gt;
&lt;img alt="Chilling with the milk maid." class="align-center" src="/assets/images/europe-2015/amsterdam-milk-maid.jpg" style="width: 100%;" /&gt;
&lt;p&gt;Everybody got selfies with Van Gough, so I got a selfie The Milkmaid.  I
realize in retrospect that it doesn't work as well.&lt;/p&gt;
&lt;p&gt;In other news, this is my face when I realized the bathroom stalls go from
floor to ceiling.&lt;/p&gt;
&lt;img alt="Surprise and joy." class="align-center" src="/assets/images/europe-2015/amsterdam-all-the-way.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;Yes, this photo was taken in the bathroom stall.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And this is a classy restaurant I found with classy lamps.&lt;/p&gt;
&lt;img alt="A lamp with a cute switch." class="align-center" src="/assets/images/europe-2015/amsterdam-cute-lamp.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;They were closed, otherwise I would have gone in.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-travel-tips"&gt;
&lt;h2&gt;Some Travel Tips&lt;/h2&gt;
&lt;p&gt;Although I have not completed my trip, I have some tips to share
with you about travel.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Always bring a 'Go Bag' when you go out for the day. Fill it with snacks and
necessities and leave plenty of room for memorabilia you get while out and
about.&lt;/li&gt;
&lt;li&gt;Try something new before defaulting to your comfort zone. This is true for
food as well as experiences.&lt;/li&gt;
&lt;li&gt;Always being plenty of snacks and water. You will regret it if you don't.&lt;/li&gt;
&lt;li&gt;Be patient. You invested a lot to get here, make it count.&lt;/li&gt;
&lt;li&gt;At a museum, take a picture of the plackard after taking a picture of the
piece so you don't forget what it's called.&lt;/li&gt;
&lt;li&gt;Don't be afraid to sit in a café and just read for a bit. Sometimes that's as
culturally diversifying as a day in a museum or city tour.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Amsterdam"></category></entry><entry><title>To Amsterdam!</title><link href="/europe-2015/2015-08-25" rel="alternate"></link><published>2015-08-25T00:00:00-07:00</published><updated>2015-08-25T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-25:/europe-2015/2015-08-25</id><summary type="html">&lt;p class="first last"&gt;Tuesday August 25, 2015. PDX -&amp;gt; AMS.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="pdx-ams"&gt;
&lt;h2&gt;PDX -&amp;gt; AMS&lt;/h2&gt;
&lt;p&gt;The flight was uneventful. It was the longest one I've ever been on, which is
always a rough milestone to overcome, but actually one of the better flights
I've taken. TIL Delta's service does not suck.&lt;/p&gt;
&lt;p&gt;I usually sleep the entire way to &amp;lt;insert location here&amp;gt;, but I managed to stay
productive (coding, reading, writing) for the majority of flight. I must say,
it was nice to have my own personal screen to catch up on Last Week Tonight.
I've wanted to watch that show for ages...&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;Lazy bliss not pictured&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;So good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-0-part-1"&gt;
&lt;h2&gt;Day 0: Part 1&lt;/h2&gt;
&lt;p&gt;So I wrote down some thoughts about Amsterdam thus far:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;People keep using fake made up words. What's up with that?&lt;/li&gt;
&lt;li&gt;The roads are tiny but people keep driving on them. It looks like chaos but I
haven't seen an accident yet. I'm kinda impressed. People aren't even yelling
at each other about almost getting hit.&lt;/li&gt;
&lt;li&gt;The toilet paper squares are actually rectangles. It might just be the toilet
paper at the place I am staying. Either way, I can't deal with this aspect
ratio change. I might not be able to poop in Amsterdam.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;COFFEE COFFEE COFFEE COFFEE COFFEE COFFEE COFFEE COFFEE COFFEE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The trains are so quiet. I didn't want to get off...&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BIKES BIKES BIKES BIKES BIKES BIKES BIKES BIKES BIKES BIKES&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's some pictures I took:&lt;/p&gt;
&lt;img alt="Mostly trees and sky." class="align-center" src="/assets/images/europe2015/amsterdam-view.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;The view from the location I am staying at.&lt;/em&gt;&lt;/p&gt;
&lt;img alt="Panorama of an Amsterdam park." class="align-center" src="/assets/images/europe2015/amsterdam-park-panorama.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;A panorama from the park outside of where I am staying.&lt;/em&gt;&lt;/p&gt;
&lt;img alt="Goats!" class="align-center" src="/assets/images/europe2015/amsterdam-goats.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;Some goats I found.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Aaaaaaaand naptime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-0-part-2"&gt;
&lt;h2&gt;Day 0: Part 2&lt;/h2&gt;
&lt;p&gt;I finished today by going to the Red Light District. There
were a lot of half naked ladies in windows. They kept winking
at me. I'm pretty sure they liked me; it's not like they
&lt;em&gt;definitely&lt;/em&gt; have a monetary incentive to get my attention or
anything.&lt;/p&gt;
&lt;p&gt;I ended up finding a bar and enjoying a Belgian White Beer.
It tasted &lt;a class="reference external" href="https://xkcd.com/1534/"&gt;surprisingly good&lt;/a&gt;&lt;/p&gt;
&lt;img alt="A Belgium white beer." class="align-center" src="/assets/images/europe2015/amsterdam-beer.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;em&gt;So this is what it feels like to drink in a bar... neat.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category></entry><entry><title>Packed and Ready to Fly</title><link href="/europe-2015/2015-08-23" rel="alternate"></link><published>2015-08-23T00:00:00-07:00</published><updated>2015-08-23T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-23:/europe-2015/2015-08-23</id><summary type="html">&lt;p class="first last"&gt;Sunday August 23, 2015. Packing for a three-ish week trip isn't that bad.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="all-packed"&gt;
&lt;h2&gt;All Packed&lt;/h2&gt;
&lt;p&gt;So I'm all packed up and ready to go.&lt;/p&gt;
&lt;img alt="Three weeks of supplies neatly displayed on a pink bed." class="align-center" src="/assets/images/europe-2015/packed.jpg" style="width: 100%;" /&gt;
&lt;p&gt;&lt;strong&gt;Left:&lt;/strong&gt; Chargers, electronics, entertainment, toiletries, water bottle,
wallet, etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Center:&lt;/strong&gt; The bag, the &lt;em&gt;Write the Docs&lt;/em&gt; shirt I'll be wearing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Right:&lt;/strong&gt; Clothing. Gameboy SP at the top.&lt;/p&gt;
&lt;p&gt;Not the &lt;em&gt;perfect&lt;/em&gt; bag of things to bring to Europe, but certainly solid and
most of it practical. I'm packing an extra bag for all of the trinkets I'll
bring back.&lt;/p&gt;
&lt;p&gt;Let me know if you want anything (if you know how to contact me we're close
enough for you to ask.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Portland"></category></entry><entry><title>Dominos are setup</title><link href="/europe-2015/2015-08-02" rel="alternate"></link><published>2015-08-02T00:00:00-07:00</published><updated>2015-08-02T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-02:/europe-2015/2015-08-02</id><summary type="html">&lt;p class="first last"&gt;Sunday August 02, 2015. This post won't add much to your life. You can definitely skip it. No really. It's only here for posterity.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;All of my travel is booked, plane tickets are bought, and vacation time gotten.&lt;/p&gt;
&lt;p&gt;The only thing left to do now is to write the talk. Easy-peasy.&lt;/p&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Portland"></category></entry><entry><title>About the blog (this is a test)</title><link href="/europe-2015/2015-08-01" rel="alternate"></link><published>2015-08-01T00:00:00-07:00</published><updated>2015-08-01T00:00:00-07:00</updated><author><name>Elijah Caine</name></author><id>tag:None,2015-08-01:/europe-2015/2015-08-01</id><summary type="html">&lt;p class="first last"&gt;Is this thing on? Starting the travel blog strong.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This blog was created in preparation for my trip to Europe in about 3 weeks. I
wanted to see how difficult it would be to make a blog that could be updated on
the go, version controlled with git, and would not require me to log into a
laptop or server to make changes.&lt;/p&gt;
&lt;p&gt;I ended up using PageUp (link in the footer), along with Github Gists (also
linked in the footer) to make a mostly useful platform. New changes are pushed
to Github, my personal server pulls those changes every 10 minutes, and this
page is rebuilt pretty painlessly.&lt;/p&gt;
&lt;p&gt;Best of all: with a git client on my phone I can make updates anywhere that has
a signal and I don't need to bust my laptop out. I wrote this post while I was
on the toilet!&lt;/p&gt;
&lt;p&gt;It wasn't as easy as using an established platform like Twitter, but just like
with everything I try to make, I put something together I would want to use and
interact with. If a friend started a liveblog for a specific event I would
follow it over their Twitter feed any day. Plus I don't have to deal with the
character limit of Twitter.&lt;/p&gt;
&lt;img alt="Evergreen trees into the distace." class="align-center" src="/assets/images/europe-2015/pre-travel-view.png" style="width: 100%;" /&gt;
</content><category term="Europe 2015"></category><category term="Travel"></category><category term="Portland"></category></entry></feed>